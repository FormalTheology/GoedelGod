%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: FULogo-RGB.pdf
%%Creator: Adobe Acrobat 9.4.0
%%For: ce
%%CreationDate: 11-01-06, 11:19 
%%BoundingBox: 0 0 199 53
%%HiResBoundingBox: 0 0 198.4470 52.5310
%%CropBox: 0 0 198.4470 52.5310
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 14066 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-15:56:37        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xmp:CreatorTool="Adobe Illustrator CS4"
   xmp:CreateDate="2011-01-06T10:35:49+02:00"
   xmp:MetadataDate="2011-01-06T11:18:17+01:00"
   xmp:ModifyDate="2011-01-06T11:18:17+01:00"
   xmpTPg:NPages="1"
   xmpTPg:HasVisibleTransparency="False"
   xmpTPg:HasVisibleOverprint="False"
   dc:format="application/pdf"
   xmpMM:DocumentID="xmp.did:F92A6F567819E0118896D4DBC4B47555"
   xmpMM:InstanceID="uuid:0ad54b66-6db0-1247-a6d7-54098b7aa8c2"
   xmpMM:OriginalDocumentID="xmp.did:F92A6F567819E0118896D4DBC4B47555"
   xmpMM:RenditionClass="proof:pdf"
   pdf:Producer="Adobe PDF library 9.00">
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:width="256"
      xmpGImg:height="68"
      xmpGImg:format="JPEG"
      xmpGImg:image="/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgARAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FUj81ecdF8s20Ul+zy3V0xjsNOtlMt1cyD9iGIbsdxuaAdzlmPG&#xA;ZcmE8gjzeba/5q/MC91eHTtXuf8ACFldCNlhtmjadYp2aJHnvHDqtJxGj+kvw+otTmVDHACx6vx3&#xA;ONKcyaPpYPc2ei3dtfz6lPILmKK1vLG+uJXuZXLpHzhZ77nG8jeuzAwqwon2hvXIBIqvx8mggG7/&#xA;AB82n0/yBPeMYNVgu4rSS/lEUZtHaWG0jQwKnoKJRJc1cLwIPWnYY3OuXd3/AI2WoXz72X+RINcv&#xA;7u4s/LPmG90+aysrWeJb0veWN0zGWK49OG45SRRCaLiGWQt19soykAXIA7/FuxAnaJZb5V/NVbi4&#xA;i03zPbx6deTTSWtnqtuXfS72aFzG6wTSBSrc0aiv17MajKcmnreO/wB4bYZ+ktvuehZjOQ7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqkHnjzhY+U9Al1S5X1piwhs&#xA;rQEK09w/2Iwx2UbVZj0UE5Zixmcqa8mQQFvBtZ1RGsU8x6+g1C71e2TUE8wW91FCsH1a59M2Mdrc&#xA;xzq0MTuhYKpdq1Kls2MY78Mdq2r9LgyltxHr1/Qx/wA2fmRq/miXRYL7Wra2W3t2R5IHjE7JPwRx&#xA;cTIUjDzUUvGhCKPtNs/CzHgELoNeTMZVZegeVtO/JvT7OBtV812E9zCKxQW14saxMdzxuFMU7En7&#xA;RVo0Y7+mMx8kspO0T8nIgMYG5DtEuvys1LS7iLzHr1lb3IlP1Zk1AzhV2r+6uZryBuLCkZaOvAKT&#xA;8RNGQyA+kH5f2LE4yPUftYD5mv7fytqz3flXzhBKl0GW4eyuOYmjkakgkiMlUkHKv2992R0pxXIg&#xA;OMVKLjzPCfTJbP5judatI9Blv7G8trG0jgtmLwraQWjPHV0HBf8AJaQyJ6qInp05t6hRDhPFR/H4&#xA;9ymfFtb1/wDK/wDMF11EeWNSlmm0+R5IvLerXSlJJRD9q2nqf7xf2K/EQCrBXBXMLPh24hz6hy8O&#xA;XfhPwes5huW7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXgf5k63+&#xA;mfNWoTzWk15oWht+i0kgcoLeRmj+vXLMElCUD+lWVfTKqwPXfY4IcMR3nf8AU4GaVyPcNv1vOfMN&#xA;3qfmPUNXnjkiVrC1u1upbeC34XdwtrcvJLIjukYk+rW8g9aFD0+EKTmVACIHn+z9LjzJkS9q/wCc&#xA;gNR1TT7HR7q0a4SKN7l2lt3RSJo4RInIORUCNJW23HGozA0cQSbczVEgB6Xobag2i6e2pGuom2hN&#xA;6SAv74xj1PhAAHxV2GYs6s1ycmN0L5vmz87/ADL+ZKajdzSajd+W7GNPRXS0nlVbji5QyQyQgc0k&#xA;UqTXYE8Tm00sMdcuJ12pnO+dJP8A843+ZPMU/wCaMdvNqV1NBqEMz6gjuZRMYIW9Iyl+R+D9kg17&#xA;dNsnrYR8PlyYaSZ4+bO/+cgtMvbrzD9ZgkMcdlptvK1I4JKuJrlhyMro6JwR+Zj5fDWqkZj6OQEf&#xA;j+pv1QJPwYtard+YtFOqWU+o32qQJbpYwIJZ2s2jk5i5MwjMEfCTZIxWWQDkWq5y41E0ar7/AMfJ&#xA;qHqFi7fRXknzF/iLyrp2rsnpz3EfG7iGwS4iYxzoPZZEantmsyw4ZEOxxz4ogp5lbN2KuxV2KuxV&#xA;2KsM/MTzlrvl+50Gw0Syt7y/1y7a0jF3I8UalU51LIGP4ZfhxCVknYNOXIY0B1TTy9qXmRbVj5uT&#xA;TtPu5JCtpFaTvIroqc2JMqx/EACaDsK5CcY/w2WUDL+Kkwl8w6BFYx38upWsdjMeMN208YidgSKL&#xA;IW4k1B6HI8ErqmXGKu0u1vVtZTWtDtdIm01rS5kLaol1KRcG3K1ja1RT8RJDbmv6yJRiKN2xlI2K&#xA;pNZtX0mC9isJ72CK+m3htXlRZXr/ACoTyP0DIiJq6Z8Qul2qXjWWmXd4qh2toZJgh2BMaFqV96YI&#xA;izSyNC2EXP5mXsP5Ojz6LKM3ZtY7n6lyb0+TyiOnL7VPirmQMA8XgtoOY+Hxs0udZ0e15fWr63g4&#xA;SLC3qyolJWAZUPIj4iGBA65QIk9G8yASvWdX1iLzDo1ppsunGwlMr6wlzKVuhEErE1sgIB3DciQd&#xA;hkoxHCSbvowlI2KpODqOnizF8bqEWRAIuvUX0qE8QedePXbrkOE3TOxVrLjV9Jt7yGxuL2CG9uP7&#xA;i1klRZZO3wISGb6BhESRdKZC6budV0u1Li5vIIDHwEgkkROPqkiOvIinMqePjTAIkqZAObVdLW6e&#xA;za8gF3GvqPbmRBIqAV5FK8gKDrjwmrXiHJhl1+YV/oHlLVNf8x/o+5MF8YdMh0yeoltpJY4oubOW&#xA;/eL6vKTj+zvTLxhEpCMb5dWk5TGJMq59E/1/zDcwaMNQ0EWeoss8ccrS3SQwJEWHqsZd1qq9v9rK&#xA;4Q3o7M5T2sbpbc+fX0/y/r/mHUIbVtJ05pG0mW0u45vrkUcfIbj4UdmBHGv9sxhuQiOZ5+TE5aBJ&#xA;5BPtK1/TtS0lNSt5o5IzCs0qROshj5JzKtx7jKpQINNkZAi3zpb6XJceWJ9WntdQjuDayXk+owxn&#xA;6s0kpe4EdwLuJVbm1wVV7dy67ArUb7QyqVbfj3fpdcI+m9/x+OiC81aTLdrqln5cRYofL+hNpuo3&#xA;RDMJ59PjM+oSqQQE4rIYWZq1Z+IFCzKccqoy6yv58kTjdiPQfdzekf8AOTWo2uneUbC6ktnnuXnu&#xA;LS2kAX00+t2M9u/MkFvsyc1C9SuYuhiTIj8c3I1hqI/HRJPLP/OVWgQafbWnmTR721vYo40eW29O&#xA;aNxwWkpEjQuvIfFQBvmcsydnyu4kMIa0V6g8h/OT805vPvmASwwJBo9lWPTVaJBcFD1aWT4m+I78&#xA;A3EeFak5um0/hx83E1GfxD5Mh/5xWSVvzMmKMwVNNuDKFpQr6kQo23TkQfnTKtf/AHfxbNF9fwem&#xA;fnpoGv6hrbXGmSxrbppiRXCyA0WSSaaKNy3JQqssskLMdlD1O1WXF0k4gb97k6mJJ27mLO+l6nqV&#xA;hd6Pp92bC8trOWbSbItHdw3FrFPZS2pkjX92ry2tvG7lRSoaqmhy7cAgnfff7f1tWxIofjl+p6r+&#xA;UN1cH/EllcWUmnSJqX1wWMtSYRfQRzGMEhSQH5EVAO/QdBh6kcjd7fc5WA8xy3SBPzi862/li085&#xA;3+iWD+VZ7preb6tczfXIUW5a19Ro3j4H402Ctv7ZZ+WgZcAJ4mv8xLh4iBwvV7/VtK05Y21C8gs1&#xA;lPGI3EqRBm8F5kVOYYiTycsyA5r7jULC2Fbi5ihBRpayOq/u0pyfcj4V5Cp98QCVJAYla+dru582&#xA;+YtMils/0dpunWd3p907cY3kuhJvLMGZeBKrTiPvy44gIg9SS1DJciOgCc+WdU1GTy/p8/mGaxj1&#xA;a5VvVFlJytmZeTfuWcktSNatuab9shOI4jw3TOEjQurTSy1Cwv4fXsbmK6hqV9WB1kWo6jkpIyBB&#xA;HNkCDyea/nLYvf8AmLyFZpdT2TTarIou7VlWaP8Acn4kLq6g/NTmVpjUZHycbUCzEeaF/NDyjaDS&#xA;vJmj6leXesxXHmW2gnub6RTcNBcQziSIvCkPwMFpsMODIbkRt6UZse0Qd/UlfmnRmH5rwaJYWWiL&#xA;p9poQOlabrMbCxVXuH+sG2ijHD1Nhy2rxyeOX7uyZXxdObGcf3lCuXVTtvKsWiWv5ZrPNZajfwa0&#xA;9tFqtnSUfVKXMkdsk7D1GjiZiOJNAcJycXHzAr9SBDh4Ou6QNoGreZP8dR3c/l+zvf03cLPqeqtL&#xA;HqNqsTKbVoZR9iFUUenvQ75ZxiPDXFy6cmHCZcX08+vN75qcF43lO6t5W+sXhsJI5GT9uX0SCV6f&#xA;abNdEji+LnEHh+Dxe71bTJv+cVo4IrqJ7h7SG1SFXBkM4ulrEE+0X2rSnTfpmcIn8w4ZkPATeTyl&#xA;5a1bzz+aV3qemwXk9nBaC0aZeYiM2lhpGRT8KsSoPICvvkPEkIQAP4tn4cTKdj8UhdJsbF4fya1B&#xA;7aI380Qt5rsxr6rwx6c/CNnpyKL2BNMlIn94On7WMQP3Z/HJB2FlcSanD+TboxsbHW5NQnNCVOhx&#xA;8b2GNj/lzyrHhJ28Xy+3kgDfw/P7OaX3Hl7U/MV1+YENzNoNvONZuI31LWGlTULWCMr9TeGQbRxB&#xA;Keme++SExEQ+rl05ebEwMuLlz682ZWflLR9T/OidtbtotSubDQbCYPIOcbXPqSRmcofhZqD4Sw27&#xA;b5QchGLba5FuGMHJvvsEu0TS9G8tfmAlnqGnab5itPNOo30umeYY/TmvoJZkYzW1yrBi0fAspKmn&#xA;Wo3ycpGULBMeEDboxjERnRAPETukOtaNoiflH56JsbZU0zzZcpYExRgW0Z1K2jZYdv3a+l8J40+H&#xA;bplkZHxY784/oLCUR4cvKX6Wfef38n6V5c03SdJ0HR76HUdWitLS0lWKLTYbx42b1bgRKVqEH2aV&#xA;NcxsPEZEknYfFvy8IAAA3Pwef6bpunv5G/Neynh0u4FjIbmGLTYwbGGf6n/eWqOX9MqQRUdCD06Z&#xA;kykeOB3+PPm44A4ZjZ7B5N07y3B5Pjh0C2soZLixhkuUsUhQvJJAOLyekBVm8WzCyylxeq+bmYxH&#xA;h2eSt5kiuvI9lawWWrNcXuji0hDyW/6NIt3MrSxx+qXeRmj4V49PYZmcFTJsc/i4nHcevL4Jx5K0&#xA;mDTvyk84XjL60o0yaOrblom0/wCvkGtdzLfSD5UyGWV5Ijz/AE1+hnjjWOR8v0X+lZ+bfm0a3obe&#xA;XtV02GCCV4biWZZrkOgHKQBUnsoXDOkb0YKafPbDp8fCeIH8fNc+TiFEfj5PDX/La+vmpp96LqYQ&#xA;GW2gcSVeGNZTVXZUULS1kpXwzP8AHA5hwfBJ5IS7/LfUbaaFDqFq8c8SzrMIdQRQrhWX4ZbWOQ8h&#xA;InGinlUBattkhnB6fd+tBwkdfv8A1PQPyT/S3kvU9R1aCwj1r61ZEQmN57YeisgZnSSa3CMDxG1Q&#xA;dqdQRmNqqmALrdv01wJNW9w8u6ynmrzBqcN9ZKlpPo8CtHS64y29zJOK0urayajKD0Uj3zAnHgiK&#xA;PX8dS50JcRN9347nkvlpn0HzF5kuLqa4EF9aLp9bWcRXsl9cLCbiW04iTlcySJVVUb9a7HMyfqiP&#xA;n5V5+TiQ9JL1b8sphd+YvNd8sNxbqzabbGG7MbTK1vZLy9QxvKvP4/i+LMPOKjEe/wC9ysJsk+77&#xA;nkI0m2tvyasfMbeY5/rVhezXVn5aupIpLCaaPUpFWMWoRZXLfa3ZtyTsOmbxXlMa5jn15OJw1j4r&#xA;+HTmyzzFb6xrH5sarbXtrorU0a1NnaeYfUaNIJATcm29PbkJSVd+u22UwIjjFXz6NswTkN1y6rB5&#xA;Js3n/Kby9r89tr0Uf6Vimubd2e3nhhhNxBHy25xp6cY4nb4adMfFP7yUduS+GPQDvzZTpGnaDJ+a&#xA;/mrRLq2tXsJNJ0qKLTJUjaJoofUoqwsOJVPh2pttlUpHw4nrZbYgeIR5Bguj6Rpuq/lv+UtnqEC3&#xA;FrPqkkU0TVAaNvrJZTQg0biKjMiUiMmQju/U0RiDCAPe9H/L/SNM0jz955sdLtYrKyRtLaO1gQRx&#xA;KWtW5cUWiitKmnfMXNImESfNyMUQJyA8kxvPNXlO9ntbi70+S4nsZDNZyyRRM0UhHHkhL/CaHtnM&#xA;j2kwjkJ/Z/xTcQC3e+bfKt+bY3thJcGzmW6tTJHG3pzoCFkSr7MoY0OAe0mEchP7P+KSQDzQXmHU&#xA;/IHmOKKLXdGOopAxaD14YmKE9eLc6itNx3yUPafFHkJj5f8AFMZwjLmLVItb8jQ29hbQ6P6dvpb+&#xA;rp0KQQqkElCOcShqK3xnceOP+ibDvtPf3f8AFJ4BttyQeqv+WWraomq6n5ejvNRSgFzNbwu54048&#xA;qt8XGm3KtMMfajFEUOOvh/xTGWKJNkbp8PP+igACC4AGwAWP/mvK/wDRHg7p/If8U2Mcht/yph1n&#xA;9NReWok1MP6ouRbw1EleXqAc+Ieu/Kla5afanHVfvK+H/FNfhQu63TdfM/lFZ764XTnWfUwq6hII&#xA;og04RPTUSHn8XFPhFe2Q/wBEuHbae3u/4plwj5qcev8AkqNNPSPSiqaT/wAcxRDEBb/B6f7oc/h+&#xA;A02x/wBEuHfae/u/4peEbbclZfNXlNdTfVV0+QalJCLd7wRReqYVbkIy/OvENvTH/RJhqqnXw/4p&#xA;NC76pXq7fljrGppqmq+Xo72/QAC4nt4XYhfsh6t8dO3KuSj7UYoihx18P+KYSxRJshNI/NflSPUH&#xA;1GPT5Ev5Ilt5LlYohI0SEsqFg9eKljQZD/RJhqqnXw/4pnQu0s0uX8s9K1STVtN8vR2mpS1LXUVv&#xA;CrjlUNxIb4eVd+NK5OXtRiIo8dfD/imEccQbA3Rh13yObK8sTpHKy1GWSe/tmghMc0spBkeRC1GZ&#xA;iKknI/6JsN3U9vd/xTLhFVXNBK35YLor6GvlyIaTI/qvZC2gEZkpT1COX26bcuvvkv8ARRiu/wB5&#xA;fw/4pj4UaqtkRpupfl9pkNxBp2hpaQ3cawXUUVtAqSxIGVUkUNRlo7bHxPjgl7T4jzE/s/4pIhEc&#xA;gu0LV/IXl+OWPRNFGmrcENP9WghiLla8eRVgTx5GlenbGftNilzEz8v+KWMIx5Cni0guZNXm8vQL&#xA;qF1HYXUj6dpqSyem8Mt1HNATGHZYwgl+JooJH+0dlQnOq0mphnxDLHlIfHuP4twJAg8O+zIfy6hn&#xA;195/Llzqb2KFz9YtAPTMzR+kjoApXiTYQxUSQMprJ8FUJFmY8Pqr8f2ssXq2v8f2JO/lnzGZbvSx&#xA;Zj1tOiOmXElkYrI+rGjKskiQtaeqJo3SccuXwtxNd8n4keffv3seA8u7ZbbW2oeXoLjTLmyN3eS2&#xA;txFp8KyRTypbGOaH1CZFZxIfX5n0inMpTYVxJEt7QAY7Jdr1neT3AmZlZ0t4Y2vbaI2yK0SsksXG&#xA;NrWpEyrI1VbiQo7ZOBDGQLKbG4vNP8sSaXFpUEt6LOayg1Bb2yeRleUus0krpHN6nFqUEnA/5Pak&#xA;gGV39hbQajVfcm2kaTqS+WpvOf14WM01xCtpFaxpAt5b2tEtRHHEIE5z3JdovUVk4vVlagOQlIcX&#xA;BX7GcYnh4mF6Ze6e+mandzFZp2j9SwnS7W2IMUIt47hrS5VIbiKX0fVcIzMob7HI5fIGwPx82kEU&#xA;Xov5P67pmieTl9eKYz6jPJfN6ccaoEkCpFxVWUAelGpoBnMdpdv4MeYwIkTDbaufXr3uXpo1D3pt&#xA;Yx/lVYX66hZ+WYIL5GLpcpaW4dWJryVuXwn3GYx9qcZFHxPs/wCKbBigDYARPmC//L3zF6J1zRBq&#xA;JtzWBriGJ2Su5AYvWh7jocjD2nxR5CY+X/FJnjjLmLREWv8AkmFtPaHSTGdKDrpnCCFfq4kXg4io&#xA;3wcl2NMB9psO+09/d/xSeEbbclO61jyHdazb63c6N6ur2o429+0EJmQb0AflXapp4YR7TYQKqdfD&#xA;/ikGESbrduDWfIsFrYWsOj+nbaXJ62nRLDEFgk+IcogH+E/G3TxxPtNh3NT393/FJEBttyRcHm/y&#xA;xBeXN5DYyx3d5w+tTrHGHk9JeMfM89+K7DIn2kwVVT+Q/wCKSAObIv0Lo3/LBb/8ik/pm0/I4P8A&#xA;U4f6UJd+hdG/5YLf/kUn9MfyOD/U4f6UK79C6N/ywW//ACKT+mP5HB/qcP8AShXfoXRv+WC3/wCR&#xA;Sf0x/I4P9Th/pQrv0Lo3/LBb/wDIpP6Y/kcH+pw/0oV36F0b/lgt/wDkUn9MfyOD/U4f6UK79C6N&#xA;/wAsFv8A8ik/pj+Rwf6nD/ShXfoXRv8Algt/+RSf0x/I4P8AU4f6UK79C6N/ywW//IpP6Y/kcH+p&#xA;w/0oV36F0b/lgt/+RSf0x/I4P9Th/pQrv0Lo3/LBb/8AIpP6Y/kcH+pw/wBKFd+hdG/5YLf/AJFJ&#xA;/TH8jg/1OH+lCu/Qujf8sFv/AMik/pj+Rwf6nD/ShXfoXRv+WC3/AORSf0x/I4P9Th/pQrv0Lo3/&#xA;ACwW/wDyKT+mP5HB/qcP9KFd+hdG/wCWC3/5FJ/TH8jg/wBTh/pQrv0Lo3/LBb/8ik/pj+Rwf6nD&#xA;/ShXm35ueSxBHF5s0ay5vYxNDrGn2zPB9YsiS1SYOLn0m3YKQWQsK5stEIQHhgCI6UBzcXUQ/iDD&#xA;Y/KGoQ+W7Hztb6rBBd3j28em6ZaRJFC4eRvRitltjIIni5Fk486DmZCQ0gzL8QcRhTT4Z4RK0Hqn&#xA;5itfX0VzPF6XmW2Vbe7QP9T+twqzKFuVdokjeJmJjf1AW3BjXopjhof0WMstn+kkmv63oHmAvLpt&#xA;9Kk0kMiRx8OU8jNxUerGkl40YDxgHkfsivEgitkIyjzH4+xhKQlyUPLun6Fp2lSvrKtBJaSq1rcT&#xA;rdA84mnBcNEvpiodAvqcU48hStDhmSTsiAAG6dSefvLVzY2+m+n6GjWsSw6sYrjiSyIB9UjAvLst&#xA;C4qGljiPwiigE1WvwZA316fr5Bn4sSK6fjzb80+ade80WtjcyW8tloMsj2FglvbyNCpKCP0oEqnq&#xA;F1bhUH1XXkkccfx1ceMQJ7/x+O7vTOZlXcv8p6JP5r1xPL9laRW1n6UUvmPVbJnjjms3czQqUJAM&#xA;k8ZQI7JHIKyckIGOSfAOI/BYR4zQ+L6JTQtERFRNPtlRQAqiGOgA2A6ZoZaLCTZhG/6odlS79C6N&#xA;/wAsFv8A8ik/pg/I4P8AU4f6UK79C6N/ywW//IpP6Y/kcH+pw/0oV36F0b/lgt/+RSf0x/I4P9Th&#xA;/pQrv0Lo3/LBb/8AIpP6Y/kcH+pw/wBKFd+hdG/5YLf/AJFJ/TH8jg/1OH+lCu/Qujf8sFv/AMik&#xA;/pj+Rwf6nD/ShUZmUrsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiriARQ9MVeS+a/y91rQt&#xA;QTWPKv1i40SJppLny5ZvHDNCbhCs8mnu6ScPUU7otGH+62FdszHmEhUuff8ArcSeIxNx5d36nmC6&#xA;Za6o06aW0Ekumpcak86I8UtukVjHJcW7J8DwJFdRmKFGrVXJNeB5ZfFXPrt9v6nG4b5dP1KvmyXW&#xA;pbFLZWW3vLe2XU7HXILWOzvUtWMi8uUD20gjf0GPxxmqhW60xx1f2V0Wd19toOxtvNv6RtrzV9fX&#xA;zPFbQ/WYbHUJJ7i1oty9qZ2jlljWYRNGzFo+a7AmtV5EmNUBwoAldk8Sba1o+v3E31nX4IJFs7uW&#xA;21HSbf6tbywiK2F20sfFIoOUcbKyFi/P7PIVyEZRH0/P7Gconqyry/PqXmbylJ5F8uWcd7o8czwy&#xA;eZ7wGa0S1EgeIojfDNdJ3VG4BlDV+LamYEJccufd+OjbAmUeAcu/8dXq/lPyno/lfR49M0yOiD4p&#xA;52oZZpSKNJIwpUmnyA2G2YeTIZmy5UICIoJzkGbsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVedfmL/yqX66v6f4/wCIKD0P0b6v6UrQ8P8AeT97T+Xn8OZOHxK9&#xA;P0+fL7XHy+He/P7XkXmX65+lLz6p+nq+lH+kf056frfV/Rl4et9X/f8AHh6nDlvTl3zNhVb8PwcS&#xA;d31+KGn/AMV+rN+lPQ9L1tQ9X6t/vP8A8fH1v0vrn+icq+ty9Ptyp8NckOHp5fs5boPF182caT/y&#xA;q7683+NP0t+kPUj9T/EdPqvren8Nfq3+jf3dP739mnamY8vEr0VXl+Lbo8F+q/i9tsfqX1OH6j6f&#xA;1Pgv1f0OPpcKfDw4/Dxp0pmAbvdzRVbK2BLsVdirsVdirsVdirsVf//Z"/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <xmpTPg:MaxPageSize
    stDim:w="208.844444"
    stDim:h="296.333333"
    stDim:unit="Millimeters"/>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li
      xmpG:groupName="Standard-Farbfeldgruppe"
      xmpG:groupType="0"/>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">FULogo_Ausdruck_RGB</rdf:li>
    </rdf:Alt>
   </dc:title>
   <xmpMM:DerivedFrom rdf:parseType="Resource"/>
   <xmpMM:History>
    <rdf:Seq>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:F92A6F567819E0118896D4DBC4B47555"
      stEvt:when="2011-01-06T10:35:45+01:00"
      stEvt:softwareAgent="Adobe Illustrator CS4"
      stEvt:changed="/"/>
    </rdf:Seq>
   </xmpMM:History>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -52.531 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
1.52587e-05 0 mo
1.52587e-05 52.531 li
198.447 52.531 li
198.447 0 li
cp
clp
[1 0 0 1 -188.068 0 ]ct
gsave
0 -395.532 mo
592 -395.532 li
592 444.468 li
0 444.468 li
cp
clp
196.359 22.493 mo
193.001 22.493 li
193.001 26.019 li
195.984 26.019 li
196.12 26.019 196.188 26.087 196.188 26.223 cv
196.188 26.818 li
196.188 26.964 196.12 27.037 195.984 27.037 cv
193.001 27.037 li
193.001 31.645 li
193.001 31.782 192.933 31.847 192.797 31.847 cv
191.953 31.847 li
191.817 31.847 191.749 31.782 191.749 31.645 cv
191.749 21.621 li
191.749 21.475 191.817 21.402 191.953 21.402 cv
196.641 21.402 li
196.777 21.402 196.844 21.438 196.844 21.511 cv
196.844 21.553 196.841 21.581 196.836 21.597 cv
196.831 21.612 196.824 21.631 196.813 21.651 cv
196.594 22.321 li
196.553 22.436 196.474 22.493 196.359 22.493 cv
false sop
/0 
[/DeviceRGB] /CSA add_res
0 .2 .4 rgb
f
199.019 24.929 mo
199.072 25.042 199.135 25.265 199.207 25.595 cv
199.379 25.394 li
199.743 24.971 200.051 24.686 200.301 24.541 cv
200.519 24.407 200.785 24.34 201.099 24.34 cv
201.337 24.34 201.556 24.386 201.753 24.479 cv
201.828 24.511 201.864 24.546 201.864 24.588 cv
201.864 24.608 201.853 24.645 201.833 24.696 cv
201.457 25.518 li
201.447 25.56 201.421 25.581 201.379 25.581 cv
201.369 25.581 201.352 25.575 201.333 25.565 cv
201.155 25.502 200.998 25.471 200.863 25.471 cv
200.509 25.471 200.009 25.857 199.364 26.63 cv
199.364 31.675 li
199.364 31.791 199.306 31.847 199.192 31.847 cv
198.395 31.847 li
198.279 31.847 198.223 31.791 198.223 31.676 cv
198.223 27.109 li
198.223 26.588 198.212 26.238 198.191 26.061 cv
198.139 25.716 198.025 25.382 197.847 25.059 cv
197.807 24.986 197.785 24.934 197.785 24.903 cv
197.785 24.851 197.817 24.809 197.878 24.777 cv
198.503 24.37 li
198.545 24.35 198.587 24.34 198.629 24.34 cv
198.743 24.34 198.874 24.536 199.019 24.929 cv
f
205.525 25.2513 mo
204.483 25.2513 203.931 26.0023 203.868 27.5083 cv
207.15 27.5083 li
207.119 26.0023 206.577 25.2513 205.525 25.2513 cv
208.213 28.4483 mo
203.854 28.4483 li
203.936 30.1613 204.609 31.0193 205.869 31.0193 cv
206.421 31.0193 207.005 30.8343 207.619 30.4703 cv
207.671 30.4383 207.718 30.4223 207.76 30.4223 cv
207.812 30.4223 207.849 30.4473 207.869 30.5003 cv
208.15 31.0893 li
208.171 31.1733 208.182 31.2103 208.182 31.1983 cv
208.182 31.4153 207.827 31.6193 207.119 31.8043 cv
206.526 31.9603 206.072 32.0383 205.76 32.0383 cv
204.801 32.0383 204.035 31.6923 203.462 31.0003 cv
202.889 30.3083 202.603 29.3733 202.603 28.1963 cv
202.603 27.0203 202.874 26.0833 203.416 25.3863 cv
203.958 24.6883 204.687 24.3393 205.603 24.3393 cv
206.479 24.3393 207.16 24.6363 207.65 25.2303 cv
208.139 25.8233 208.384 26.6513 208.384 27.7143 cv
208.384 28.1673 li
208.384 28.3553 208.327 28.4483 208.213 28.4483 cv
f
210.855 20.9119 mo
211.115 20.9119 211.333 21.0039 211.51 21.1859 cv
211.688 21.3699 211.777 21.5859 211.777 21.8369 cv
211.777 22.0979 211.688 22.3179 211.51 22.4949 cv
211.333 22.6729 211.115 22.7619 210.855 22.7619 cv
210.605 22.7619 210.389 22.6729 210.206 22.4949 cv
210.025 22.3179 209.932 22.0979 209.932 21.8369 cv
209.932 21.5859 210.025 21.3699 210.206 21.1859 cv
210.389 21.0039 210.605 20.9119 210.855 20.9119 cv
210.387 25.4709 mo
209.12 25.4709 li
209.048 25.4709 209.012 25.4119 209.012 25.2979 cv
209.012 24.7029 li
209.012 24.5879 209.048 24.5309 209.12 24.5309 cv
211.417 24.5309 li
211.501 24.5309 211.542 24.5879 211.542 24.7029 cv
211.542 31.6759 li
211.542 31.7909 211.484 31.8469 211.37 31.8469 cv
210.559 31.8469 li
210.443 31.8469 210.387 31.8099 210.387 31.7379 cv
cp
f
216.494 25.2513 mo
215.452 25.2513 214.9 26.0023 214.838 27.5083 cv
218.119 27.5083 li
218.088 26.0023 217.547 25.2513 216.494 25.2513 cv
219.181 28.4483 mo
214.823 28.4483 li
214.905 30.1613 215.578 31.0193 216.838 31.0193 cv
217.39 31.0193 217.973 30.8343 218.588 30.4703 cv
218.64 30.4383 218.687 30.4223 218.729 30.4223 cv
218.781 30.4223 218.817 30.4473 218.838 30.5003 cv
219.119 31.0893 li
219.14 31.1733 219.151 31.2103 219.151 31.1983 cv
219.151 31.4153 218.796 31.6193 218.088 31.8043 cv
217.494 31.9603 217.041 32.0383 216.729 32.0383 cv
215.77 32.0383 215.004 31.6923 214.431 31.0003 cv
213.859 30.3083 213.572 29.3733 213.572 28.1963 cv
213.572 27.0203 213.843 26.0833 214.385 25.3863 cv
214.926 24.6883 215.655 24.3393 216.573 24.3393 cv
217.447 24.3393 218.13 24.6363 218.619 25.2303 cv
219.108 25.8233 219.354 26.6513 219.354 27.7143 cv
219.354 28.1673 li
219.354 28.3553 219.296 28.4483 219.181 28.4483 cv
f
225.025 21.62 mo
225.025 21.475 225.093 21.402 225.229 21.402 cv
226.072 21.402 li
226.207 21.402 226.275 21.475 226.275 21.621 cv
226.275 29.014 li
226.275 29.745 226.421 30.263 226.712 30.572 cv
227.003 30.879 227.495 31.033 228.192 31.033 cv
229.571 31.033 230.261 30.36 230.261 29.014 cv
230.261 21.621 li
230.261 21.475 230.329 21.402 230.466 21.402 cv
231.25 21.402 li
231.387 21.402 231.455 21.475 231.455 21.62 cv
231.455 29.037 li
231.455 30.089 231.128 30.87 230.472 31.382 cv
229.91 31.819 229.14 32.038 228.162 32.038 cv
226.071 32.038 225.025 31.037 225.025 29.037 cv
cp
f
233.757 24.3397 mo
233.945 24.3397 234.101 24.6797 234.226 25.3607 cv
235.07 24.6797 235.882 24.3397 236.663 24.3397 cv
237.33 24.3397 237.799 24.5087 238.07 24.8487 cv
238.34 25.1867 238.476 25.7737 238.476 26.6087 cv
238.476 31.6758 li
238.476 31.7917 238.419 31.8467 238.305 31.8467 cv
237.507 31.8467 li
237.393 31.8467 237.336 31.7917 237.336 31.6758 cv
237.336 26.5847 li
237.336 25.7367 236.997 25.3138 236.32 25.3138 cv
235.684 25.3138 235.023 25.6317 234.335 26.2687 cv
234.335 31.6758 li
234.335 31.7917 234.278 31.8467 234.163 31.8467 cv
233.351 31.8467 li
233.236 31.8467 233.178 31.7917 233.178 31.6747 cv
233.178 26.4128 li
233.178 25.8277 233.085 25.3397 232.898 24.9518 cv
232.888 24.9317 232.877 24.9057 232.867 24.8737 cv
232.867 24.8327 232.893 24.7957 232.944 24.7627 cv
233.632 24.3707 li
233.674 24.3507 233.715 24.3397 233.757 24.3397 cv
f
241.69 20.9119 mo
241.951 20.9119 242.17 21.0039 242.347 21.1859 cv
242.524 21.3699 242.612 21.5859 242.612 21.8369 cv
242.612 22.0979 242.524 22.3179 242.347 22.4949 cv
242.17 22.6729 241.951 22.7619 241.69 22.7619 cv
241.44 22.7619 241.225 22.6729 241.042 22.4949 cv
240.859 22.3179 240.769 22.0979 240.769 21.8369 cv
240.769 21.5859 240.859 21.3699 241.042 21.1859 cv
241.225 21.0039 241.44 20.9119 241.69 20.9119 cv
241.222 25.4709 mo
239.956 25.4709 li
239.883 25.4709 239.847 25.4119 239.847 25.2979 cv
239.847 24.7029 li
239.847 24.5879 239.883 24.5309 239.956 24.5309 cv
242.253 24.5309 li
242.336 24.5309 242.378 24.5879 242.378 24.7029 cv
242.378 31.6759 li
242.378 31.7909 242.321 31.8469 242.207 31.8469 cv
241.394 31.8469 li
241.278 31.8469 241.222 31.8099 241.222 31.7379 cv
cp
f
246.743 30.1859 mo
246.754 30.2389 246.774 30.3329 246.806 30.4699 cv
246.858 30.2809 246.957 29.9609 247.102 29.5119 cv
248.915 24.4929 li
248.947 24.4089 248.983 24.3669 249.023 24.3669 cv
249.045 24.3669 249.076 24.3719 249.119 24.3819 cv
249.915 24.6019 li
250.008 24.6229 250.056 24.6649 250.056 24.7279 cv
250.045 24.7799 250.04 24.8009 250.04 24.7899 cv
250.024 24.8209 li
247.227 31.8779 li
247.207 31.9309 247.149 31.9569 247.056 31.9569 cv
246.415 31.9569 li
246.362 31.9569 246.321 31.9089 246.29 31.8139 cv
243.696 24.7279 li
243.682 24.7169 243.682 24.7069 243.696 24.6969 cv
243.686 24.6969 243.681 24.6919 243.681 24.6809 cv
243.681 24.6179 243.733 24.5769 243.837 24.5549 cv
244.696 24.3819 li
244.717 24.3719 244.743 24.3669 244.774 24.3669 cv
244.826 24.3669 244.868 24.4089 244.9 24.4929 cv
246.54 29.4939 li
246.571 29.5779 246.602 29.6879 246.634 29.8259 cv
246.644 29.8359 246.68 29.9559 246.743 30.1859 cv
f
253.8 25.2513 mo
252.758 25.2513 252.205 26.0023 252.143 27.5083 cv
255.424 27.5083 li
255.393 26.0023 254.851 25.2513 253.8 25.2513 cv
256.487 28.4483 mo
252.127 28.4483 li
252.21 30.1613 252.882 31.0193 254.142 31.0193 cv
254.695 31.0193 255.278 30.8343 255.893 30.4703 cv
255.945 30.4383 255.992 30.4223 256.033 30.4223 cv
256.086 30.4223 256.123 30.4473 256.144 30.5003 cv
256.424 31.0893 li
256.445 31.1733 256.456 31.2103 256.456 31.1983 cv
256.456 31.4153 256.102 31.6193 255.393 31.8043 cv
254.799 31.9603 254.346 32.0383 254.034 32.0383 cv
253.075 32.0383 252.31 31.6923 251.737 31.0003 cv
251.163 30.3083 250.877 29.3733 250.877 28.1963 cv
250.877 27.0203 251.148 26.0833 251.69 25.3863 cv
252.232 24.6883 252.96 24.3393 253.877 24.3393 cv
254.753 24.3393 255.434 24.6363 255.924 25.2303 cv
256.413 25.8233 256.659 26.6513 256.659 27.7143 cv
256.659 28.1673 li
256.659 28.3553 256.602 28.4483 256.487 28.4483 cv
f
259.387 24.929 mo
259.438 25.042 259.501 25.265 259.575 25.595 cv
259.746 25.394 li
260.111 24.971 260.419 24.686 260.667 24.541 cv
260.887 24.407 261.152 24.34 261.466 24.34 cv
261.704 24.34 261.924 24.386 262.122 24.479 cv
262.194 24.511 262.231 24.546 262.231 24.588 cv
262.231 24.608 262.22 24.645 262.2 24.696 cv
261.825 25.518 li
261.814 25.56 261.788 25.581 261.746 25.581 cv
261.736 25.581 261.72 25.575 261.7 25.565 cv
261.523 25.502 261.367 25.471 261.231 25.471 cv
260.877 25.471 260.377 25.857 259.731 26.63 cv
259.731 31.675 li
259.731 31.791 259.674 31.847 259.558 31.847 cv
258.762 31.847 li
258.647 31.847 258.59 31.791 258.59 31.676 cv
258.59 27.109 li
258.59 26.588 258.579 26.238 258.559 26.061 cv
258.507 25.716 258.391 25.382 258.215 25.059 cv
258.173 24.986 258.153 24.934 258.153 24.903 cv
258.153 24.851 258.183 24.809 258.246 24.777 cv
258.871 24.37 li
258.913 24.35 258.955 24.34 258.996 24.34 cv
259.111 24.34 259.241 24.536 259.387 24.929 cv
f
262.754 31.2777 mo
262.764 31.2667 262.862 31.0447 263.05 30.6097 cv
263.071 30.5577 263.107 30.5317 263.159 30.5317 cv
263.18 30.5317 263.216 30.5437 263.267 30.5647 cv
263.953 30.9087 264.566 31.0797 265.107 31.0797 cv
265.471 31.0797 265.762 30.9797 265.981 30.7747 cv
266.198 30.5727 266.307 30.3027 266.307 29.9697 cv
266.307 29.5107 265.986 29.1317 265.341 28.8277 cv
264.51 28.4417 263.949 28.1297 263.658 27.8907 cv
263.191 27.5057 262.957 27.0237 262.957 26.4517 cv
262.957 25.8367 263.173 25.3297 263.605 24.9337 cv
264.038 24.5377 264.592 24.3397 265.27 24.3397 cv
265.883 24.3397 266.477 24.4847 267.051 24.7747 cv
267.166 24.8377 267.223 24.8997 267.223 24.9607 cv
267.223 25.0027 267.212 25.0377 267.191 25.0697 cv
266.926 25.6277 li
266.894 25.6997 266.847 25.7367 266.785 25.7367 cv
266.754 25.7247 266.717 25.7107 266.676 25.6887 cv
266.092 25.4277 265.618 25.2987 265.254 25.2987 cv
264.483 25.3087 264.098 25.6467 264.098 26.3147 cv
264.098 26.7837 264.374 27.1537 264.925 27.4267 cv
265.987 27.9407 li
266.548 28.2137 266.942 28.4907 267.166 28.7777 cv
267.39 29.0667 267.501 29.4317 267.501 29.8817 cv
267.501 30.5277 267.28 31.0477 266.837 31.4457 cv
266.395 31.8407 265.809 32.0387 265.081 32.0387 cv
264.248 32.0387 263.503 31.8457 262.847 31.4637 cv
262.784 31.4227 262.754 31.3777 262.754 31.3247 cv
cp
f
270.097 20.9119 mo
270.357 20.9119 270.576 21.0039 270.753 21.1859 cv
270.93 21.3699 271.019 21.5859 271.019 21.8369 cv
271.019 22.0979 270.93 22.3179 270.753 22.4949 cv
270.576 22.6729 270.357 22.7619 270.097 22.7619 cv
269.847 22.7619 269.631 22.6729 269.448 22.4949 cv
269.266 22.3179 269.175 22.0979 269.175 21.8369 cv
269.175 21.5859 269.266 21.3699 269.448 21.1859 cv
269.631 21.0039 269.847 20.9119 270.097 20.9119 cv
269.628 25.4709 mo
268.363 25.4709 li
268.29 25.4709 268.253 25.4119 268.253 25.2979 cv
268.253 24.7029 li
268.253 24.5879 268.29 24.5309 268.363 24.5309 cv
270.66 24.5309 li
270.743 24.5309 270.785 24.5879 270.785 24.7029 cv
270.785 31.6759 li
270.785 31.7909 270.727 31.8469 270.612 31.8469 cv
269.801 31.8469 li
269.685 31.8469 269.628 31.8099 269.628 31.7379 cv
cp
f
272.352 24.5306 mo
273.43 24.5306 li
273.43 22.4396 li
273.43 22.3456 273.482 22.2836 273.587 22.2516 cv
274.43 22.0156 li
274.44 22.0156 274.446 22.0106 274.446 22.0006 cv
274.462 22.0006 li
274.534 22.0006 274.571 22.0576 274.571 22.1736 cv
274.571 24.5306 li
276.852 24.5306 li
276.945 24.5306 276.993 24.5676 276.993 24.6406 cv
276.993 24.6616 276.987 24.6926 276.977 24.7336 cv
276.806 25.3286 li
276.774 25.4236 276.706 25.4706 276.602 25.4706 cv
274.571 25.4706 li
274.571 29.7646 li
274.571 30.2536 274.633 30.5876 274.759 30.7596 cv
274.883 30.9306 275.128 31.0186 275.493 31.0186 cv
275.826 31.0186 276.279 30.8866 276.852 30.6276 cv
276.894 30.6046 276.93 30.5946 276.961 30.5946 cv
277.003 30.5946 277.034 30.6276 277.056 30.6886 cv
277.259 31.3676 li
277.259 31.3976 li
277.259 31.4506 277.217 31.5026 277.134 31.5536 cv
276.529 31.8576 275.915 32.0106 275.29 32.0106 cv
274.612 32.0106 274.133 31.8416 273.851 31.5016 cv
273.571 31.1616 273.43 30.5896 273.43 29.7846 cv
273.43 25.4706 li
272.352 25.4706 li
272.227 25.4706 272.164 25.4126 272.164 25.2986 cv
272.164 24.7026 li
272.164 24.5876 272.227 24.5306 272.352 24.5306 cv
f
282.947 23.057 mo
282.718 23.057 282.526 22.975 282.369 22.812 cv
282.212 22.65 282.134 22.458 282.134 22.237 cv
282.134 22.006 282.212 21.809 282.369 21.646 cv
282.526 21.483 282.718 21.402 282.947 21.402 cv
283.176 21.402 283.368 21.483 283.525 21.646 cv
283.681 21.809 283.76 22.006 283.76 22.237 cv
283.76 22.468 283.681 22.663 283.525 22.821 cv
283.368 22.978 283.176 23.057 282.947 23.057 cv
282.619 30.171 mo
282.619 28.214 li
280.723 28.224 279.775 28.762 279.775 29.828 cv
279.775 30.183 279.876 30.476 280.08 30.704 cv
280.283 30.933 280.546 31.048 280.868 31.048 cv
281.39 31.048 281.972 30.756 282.619 30.171 cv
279.947 23.057 mo
279.727 23.057 279.538 22.975 279.377 22.812 cv
279.215 22.65 279.134 22.458 279.134 22.237 cv
279.134 22.006 279.215 21.809 279.377 21.646 cv
279.538 21.483 279.733 21.402 279.962 21.402 cv
280.181 21.402 280.371 21.483 280.532 21.646 cv
280.694 21.809 280.775 22.006 280.775 22.237 cv
280.775 22.458 280.694 22.65 280.532 22.812 cv
280.371 22.975 280.176 23.057 279.947 23.057 cv
278.603 29.925 mo
278.603 28.19 279.942 27.299 282.619 27.258 cv
282.619 26.756 li
282.619 26.265 282.512 25.916 282.298 25.705 cv
282.085 25.496 281.723 25.392 281.213 25.392 cv
280.692 25.392 280.093 25.544 279.417 25.848 cv
279.353 25.868 279.316 25.878 279.306 25.878 cv
279.254 25.878 279.218 25.852 279.197 25.799 cv
278.978 25.18 li
278.957 25.138 278.947 25.101 278.947 25.069 cv
278.947 24.963 279.129 24.843 279.494 24.704 cv
280.118 24.461 280.744 24.34 281.369 24.34 cv
282.963 24.34 283.76 25.058 283.76 26.493 cv
283.76 29.37 li
283.76 30.23 283.894 30.901 284.166 31.383 cv
284.186 31.403 284.197 31.429 284.197 31.461 cv
284.197 31.503 284.181 31.535 284.151 31.554 cv
283.479 31.963 li
283.426 31.995 283.384 32.011 283.353 32.011 cv
283.176 32.011 282.989 31.691 282.79 31.048 cv
282.124 31.691 281.4 32.011 280.618 32.011 cv
280.005 32.011 279.515 31.822 279.15 31.448 cv
278.785 31.07 278.603 30.565 278.603 29.925 cv
f
285.361 24.5306 mo
286.44 24.5306 li
286.44 22.4396 li
286.44 22.3456 286.491 22.2836 286.596 22.2516 cv
287.439 22.0156 li
287.448 22.0156 287.454 22.0106 287.454 22.0006 cv
287.471 22.0006 li
287.543 22.0006 287.58 22.0576 287.58 22.1736 cv
287.58 24.5306 li
289.861 24.5306 li
289.955 24.5306 290.002 24.5676 290.002 24.6406 cv
290.002 24.6616 289.996 24.6926 289.986 24.7336 cv
289.815 25.3286 li
289.783 25.4236 289.715 25.4706 289.611 25.4706 cv
287.58 25.4706 li
287.58 29.7646 li
287.58 30.2536 287.643 30.5876 287.767 30.7596 cv
287.893 30.9306 288.138 31.0186 288.502 31.0186 cv
288.835 31.0186 289.289 30.8866 289.861 30.6276 cv
289.903 30.6046 289.94 30.5946 289.971 30.5946 cv
290.012 30.5946 290.044 30.6276 290.064 30.6886 cv
290.268 31.3676 li
290.268 31.3976 li
290.268 31.4506 290.226 31.5026 290.143 31.5536 cv
289.538 31.8576 288.924 32.0106 288.299 32.0106 cv
287.621 32.0106 287.143 31.8416 286.861 31.5016 cv
286.58 31.1616 286.44 30.5896 286.44 29.7846 cv
286.44 25.4706 li
285.361 25.4706 li
285.236 25.4706 285.173 25.4126 285.173 25.2986 cv
285.173 24.7026 li
285.173 24.5876 285.236 24.5306 285.361 24.5306 cv
f
352.27 27.0394 mo
350.846 27.0394 li
350.846 30.8314 li
352.347 30.8314 li
353.711 30.8314 354.395 30.1974 354.395 28.9294 cv
354.395 27.6694 353.688 27.0394 352.27 27.0394 cv
352.254 22.4264 mo
350.846 22.4264 li
350.846 26.0334 li
351.955 26.0334 li
353.3 26.0334 353.972 25.3764 353.972 24.0584 cv
353.972 23.4624 353.841 23.0424 353.581 22.7954 cv
353.322 22.5514 352.878 22.4264 352.254 22.4264 cv
355.331 23.9034 mo
355.331 25.0814 354.835 25.9114 353.846 26.3904 cv
354.314 26.5154 354.674 26.6914 354.923 26.9214 cv
355.465 27.4234 355.737 28.1054 355.737 28.9714 cv
355.737 29.7004 355.542 30.3184 355.151 30.8234 cv
354.76 31.3304 354.236 31.6404 353.582 31.7534 cv
353.238 31.8164 352.716 31.8474 352.02 31.8474 cv
349.801 31.8474 li
349.663 31.8474 349.596 31.7814 349.596 31.6454 cv
349.596 21.6344 li
349.596 21.4894 349.663 21.4154 349.801 21.4154 cv
352.3 21.4154 li
353.415 21.4154 354.19 21.6244 354.628 22.0414 cv
355.095 22.4894 355.331 23.1104 355.331 23.9034 cv
f
360.278 25.2596 mo
359.236 25.2596 358.682 26.0096 358.622 27.5136 cv
361.901 27.5136 li
361.872 26.0096 361.331 25.2596 360.278 25.2596 cv
362.966 28.4516 mo
358.606 28.4516 li
358.689 30.1636 359.361 31.0186 360.622 31.0186 cv
361.173 31.0186 361.757 30.8366 362.371 30.4726 cv
362.423 30.4376 362.47 30.4246 362.511 30.4246 cv
362.564 30.4246 362.6 30.4496 362.623 30.5026 cv
362.903 31.0916 li
362.924 31.1756 362.935 31.2106 362.935 31.1996 cv
362.935 31.4166 362.58 31.6196 361.872 31.8046 cv
361.276 31.9606 360.825 32.0386 360.512 32.0386 cv
359.554 32.0386 358.788 31.6936 358.215 31.0026 cv
357.642 30.3096 357.355 29.3776 357.355 28.2026 cv
357.355 27.0266 357.628 26.0916 358.168 25.3946 cv
358.711 24.6976 359.438 24.3496 360.356 24.3496 cv
361.229 24.3496 361.913 24.6466 362.401 25.2396 cv
362.892 25.8326 363.136 26.6596 363.136 27.7196 cv
363.136 28.1726 li
363.136 28.3596 363.079 28.4516 362.966 28.4516 cv
f
365.864 24.9378 mo
365.916 25.0528 365.98 25.2738 366.054 25.6038 cv
366.225 25.4028 li
366.588 24.9798 366.896 24.6958 367.145 24.5508 cv
367.365 24.4168 367.631 24.3498 367.943 24.3498 cv
368.18 24.3498 368.4 24.3968 368.598 24.4898 cv
368.673 24.5208 368.71 24.5558 368.71 24.5978 cv
368.71 24.6178 368.699 24.6548 368.678 24.7058 cv
368.302 25.5268 li
368.293 25.5688 368.264 25.5888 368.224 25.5888 cv
368.213 25.5888 368.197 25.5838 368.177 25.5738 cv
368.001 25.5108 367.843 25.4798 367.709 25.4798 cv
367.353 25.4798 366.855 25.8648 366.209 26.6378 cv
366.209 31.6758 li
366.209 31.7918 366.152 31.8468 366.038 31.8468 cv
365.241 31.8468 li
365.125 31.8468 365.068 31.7918 365.068 31.6758 cv
365.068 27.1158 li
365.068 26.5958 365.057 26.2458 365.036 26.0678 cv
364.985 25.7238 364.869 25.3908 364.691 25.0688 cv
364.651 24.9958 364.631 24.9428 364.631 24.9128 cv
364.631 24.8608 364.661 24.8188 364.724 24.7858 cv
365.349 24.3808 li
365.391 24.3598 365.433 24.3498 365.474 24.3498 cv
365.589 24.3498 365.718 24.5458 365.864 24.9378 cv
f
369.91 29.8011 mo
369.91 21.2091 li
369.91 21.1151 369.968 21.0531 370.082 21.0221 cv
370.863 20.8341 li
370.874 20.8341 370.884 20.8291 370.894 20.8181 cv
370.958 20.8181 li
371.029 20.8181 371.066 20.8761 371.066 20.9901 cv
371.066 30.0781 li
371.066 30.7371 371.284 31.0661 371.723 31.0661 cv
371.921 31.0661 372.143 31.0041 372.395 30.8781 cv
372.457 30.8571 372.492 30.8461 372.504 30.8461 cv
372.556 30.8461 372.592 30.8781 372.612 30.9411 cv
372.8 31.5081 li
372.819 31.5611 372.83 31.6021 372.83 31.6341 cv
372.83 31.6761 372.794 31.7181 372.723 31.7591 cv
372.328 31.9271 371.931 32.0111 371.534 32.0111 cv
370.921 32.0111 370.494 31.8541 370.262 31.5411 cv
370.027 31.2281 369.91 30.6481 369.91 29.8011 cv
f
374.606 20.9266 mo
374.866 20.9266 375.083 21.0186 375.261 21.2006 cv
375.439 21.3846 375.528 21.6006 375.528 21.8496 cv
375.528 22.1116 375.439 22.3296 375.261 22.5086 cv
375.083 22.6856 374.866 22.7746 374.606 22.7746 cv
374.356 22.7746 374.138 22.6856 373.956 22.5086 cv
373.775 22.3296 373.683 22.1116 373.683 21.8496 cv
373.683 21.6006 373.775 21.3846 373.956 21.2006 cv
374.138 21.0186 374.356 20.9266 374.606 20.9266 cv
374.136 25.4796 mo
372.871 25.4796 li
372.797 25.4796 372.76 25.4216 372.76 25.3076 cv
372.76 24.7126 li
372.76 24.5976 372.797 24.5406 372.871 24.5406 cv
375.168 24.5406 li
375.25 24.5406 375.293 24.5976 375.293 24.7126 cv
375.293 31.6766 li
375.293 31.7916 375.234 31.8466 375.119 31.8466 cv
374.308 31.8466 li
374.194 31.8466 374.136 31.8106 374.136 31.7386 cv
cp
f
378.485 24.3499 mo
378.672 24.3499 378.828 24.6899 378.955 25.3689 cv
379.796 24.6899 380.608 24.3499 381.39 24.3499 cv
382.056 24.3499 382.526 24.5189 382.797 24.8579 cv
383.067 25.1959 383.204 25.7839 383.204 26.6149 cv
383.204 31.6759 li
383.204 31.7909 383.147 31.8469 383.032 31.8469 cv
382.234 31.8469 li
382.118 31.8469 382.061 31.7909 382.061 31.6759 cv
382.061 26.5919 li
382.061 25.7459 381.724 25.3229 381.047 25.3229 cv
380.412 25.3229 379.75 25.6409 379.062 26.2769 cv
379.062 31.6759 li
379.062 31.7909 379.005 31.8469 378.892 31.8469 cv
378.079 31.8469 li
377.964 31.8469 377.907 31.7909 377.907 31.6759 cv
377.907 26.4199 li
377.907 25.8359 377.813 25.3489 377.626 24.9609 cv
377.615 24.9409 377.605 24.9139 377.595 24.8839 cv
377.595 24.8419 377.62 24.8049 377.672 24.7729 cv
378.36 24.3809 li
378.402 24.3599 378.444 24.3499 378.485 24.3499 cv
f
386.515 37.8951 mo
188.068 37.8951 li
188.068 34.9771 li
386.515 34.9771 li
cp
.698 .8 .2 rgb
ef
345.838 26.265 mo
345.838 40.772 334.078 52.531 319.574 52.531 cv
305.067 52.531 293.308 40.772 293.308 26.265 cv
293.308 11.76 305.067 3.05175e-05 319.574 3.05175e-05 cv
334.078 3.05175e-05 345.838 11.76 345.838 26.265 cv
1 1 1 rgb
f
342.822 25.888 mo
342.369 25.535 li
342.431 26.114 li
341.89 26.316 li
342.444 26.541 li
342.343 27.12 li
342.822 26.768 li
343.289 27.146 li
343.217 26.549 li
343.752 26.316 li
343.199 26.114 li
343.3 25.51 li
342.822 25.888 li
295.578 26.323 mo
296.117 26.121 li
296.056 25.543 li
296.509 25.895 li
296.987 25.518 li
296.886 26.121 li
297.44 26.323 li
296.902 26.557 li
296.977 27.153 li
296.509 26.776 li
296.031 27.128 li
296.132 26.549 li
295.578 26.323 li
328.565 47.798 mo
328.492 46.571 li
328.5 46.535 328.523 46.523 328.56 46.54 cv
329.453 47.383 li
cp
331.222 47.862 mo
331.205 47.814 331.159 47.786 331.086 47.781 cv
331.013 47.798 330.963 47.809 330.937 47.809 cv
330.873 47.806 330.795 47.779 330.707 47.726 cv
330.371 47.444 329.914 47.039 329.328 46.518 cv
328.744 45.994 328.425 45.731 328.367 45.728 cv
328.304 45.72 328.236 45.743 328.166 45.796 cv
328.09 45.849 328.07 45.902 328.099 45.954 cv
328.123 46.012 328.166 46.516 328.23 47.469 cv
328.263 47.942 328.294 48.412 328.324 48.878 cv
328.256 49.027 328.18 49.159 328.093 49.285 cv
328.085 49.378 328.131 49.421 328.236 49.419 cv
328.394 49.371 328.548 49.311 328.699 49.236 cv
328.699 49.233 328.701 49.233 328.704 49.23 cv
328.728 49.218 328.754 49.205 328.779 49.193 cv
328.905 49.122 329.023 49.044 329.141 48.956 cv
329.162 48.906 329.162 48.863 329.134 48.83 cv
329.103 48.787 329.036 48.773 328.929 48.787 cv
328.927 48.787 li
328.87 48.795 328.822 48.792 328.779 48.778 cv
328.744 48.765 328.711 48.744 328.686 48.714 cv
328.676 48.706 328.669 48.697 328.661 48.687 cv
328.603 48.596 328.583 48.457 328.605 48.267 cv
328.595 48.201 328.631 48.151 328.709 48.116 cv
329.021 47.95 329.368 47.788 329.746 47.632 cv
329.914 47.736 330.052 47.879 330.163 48.058 cv
330.185 48.108 330.18 48.151 330.148 48.189 cv
330.072 48.254 330.025 48.304 330.004 48.337 cv
329.944 48.435 329.986 48.495 330.128 48.518 cv
330.519 48.4 330.873 48.229 331.179 48.005 cv
331.224 47.954 331.237 47.907 331.222 47.862 cv
327.886 46.103 mo
328.057 46.465 li
328.062 46.475 328.062 46.488 328.057 46.498 cv
328.052 46.51 328.045 46.518 328.032 46.521 cv
327.652 46.671 li
327.639 46.674 327.627 46.674 327.615 46.669 cv
327.601 46.664 327.594 46.657 327.59 46.647 cv
327.421 46.284 li
327.416 46.274 327.416 46.264 327.418 46.251 cv
327.424 46.242 327.433 46.232 327.443 46.226 cv
327.826 46.08 li
327.836 46.076 327.848 46.076 327.861 46.08 cv
327.874 46.083 327.881 46.093 327.886 46.103 cv
328.82 45.619 mo
328.824 45.61 328.832 45.603 328.842 45.595 cv
329.209 45.439 li
329.222 45.434 329.232 45.434 329.248 45.439 cv
329.259 45.442 329.267 45.451 329.275 45.461 cv
329.473 45.819 li
329.478 45.828 329.481 45.841 329.476 45.854 cv
329.473 45.864 329.464 45.871 329.453 45.876 cv
329.084 46.035 li
329.074 46.037 329.06 46.037 329.049 46.035 cv
329.036 46.03 329.025 46.023 329.021 46.012 cv
328.824 45.656 li
328.817 45.643 328.817 45.632 328.82 45.619 cv
332.045 44.483 mo
331.951 44.412 331.873 44.382 331.818 44.385 cv
331.662 44.397 331.516 44.457 331.375 44.566 cv
331.314 44.611 331.31 44.684 331.368 44.784 cv
331.523 45.062 331.685 45.338 331.845 45.608 cv
331.906 45.708 331.965 45.806 332.024 45.905 cv
332.226 46.232 332.427 46.551 332.633 46.867 cv
332.912 46.853 li
332.953 46.863 332.982 46.878 333 46.901 cv
333.02 46.923 333.02 46.949 333.004 46.973 cv
332.927 47.092 332.797 47.21 332.613 47.333 cv
332.437 47.447 332.256 47.534 332.072 47.595 cv
331.957 47.582 331.912 47.534 331.933 47.454 cv
332.05 47.25 li
332.064 47.202 332.056 47.155 332.027 47.102 cv
330.832 45.067 li
330.761 45.003 330.701 44.986 330.648 45.021 cv
330.525 45.072 330.427 45.132 330.357 45.204 cv
330.236 45.343 330.211 45.517 330.276 45.731 cv
330.268 45.919 330.201 45.994 330.07 45.954 cv
329.922 45.781 329.813 45.552 329.748 45.265 cv
329.735 45.215 329.74 45.172 329.76 45.137 cv
329.781 45.104 329.81 45.086 329.848 45.079 cv
330.346 44.807 330.678 44.623 330.842 44.531 cv
331.209 44.32 331.526 44.117 331.791 43.929 cv
331.843 43.892 331.884 43.874 331.914 43.874 cv
331.951 43.871 331.994 43.889 332.043 43.929 cv
332.254 44.113 332.394 44.309 332.465 44.513 cv
332.463 44.586 332.422 44.636 332.346 44.661 cv
332.271 44.631 332.17 44.571 332.045 44.483 cv
305.46 42.438 mo
305.53 42.561 305.503 42.636 305.379 42.669 cv
305.251 42.58 305.142 42.574 305.05 42.649 cv
304.732 42.938 304.443 43.235 304.184 43.544 cv
304.169 43.562 304.154 43.579 304.138 43.597 cv
303.961 43.816 303.797 44.037 303.646 44.264 cv
303.593 44.347 303.578 44.451 303.6 44.576 cv
303.638 44.777 303.741 44.953 303.907 45.109 cv
304.071 45.257 304.252 45.348 304.453 45.376 cv
304.644 45.351 304.813 45.275 304.954 45.157 cv
304.967 45.15 304.976 45.137 304.989 45.129 cv
304.994 45.124 304.999 45.117 305.005 45.112 cv
305.444 44.669 305.854 44.201 306.239 43.707 cv
306.272 43.672 306.287 43.627 306.282 43.57 cv
306.274 43.512 306.242 43.449 306.189 43.381 cv
306.191 43.333 306.191 43.305 306.197 43.295 cv
306.212 43.265 306.247 43.244 306.304 43.24 cv
306.542 43.343 306.758 43.53 306.957 43.798 cv
306.994 43.892 306.984 43.947 306.926 43.97 cv
306.881 43.982 306.853 43.987 306.845 43.987 cv
306.833 43.985 306.783 43.964 306.702 43.929 cv
306.619 43.894 306.547 43.911 306.483 43.985 cv
305.313 45.308 li
305.268 45.356 305.223 45.399 305.176 45.439 cv
305.123 45.477 li
305.014 45.557 304.896 45.613 304.767 45.645 cv
304.642 45.678 304.553 45.693 304.501 45.693 cv
304.43 45.693 304.333 45.673 304.21 45.627 cv
304.046 45.57 303.91 45.504 303.8 45.429 cv
303.676 45.346 303.563 45.241 303.457 45.112 cv
303.278 44.885 303.168 44.664 303.128 44.445 cv
303.115 44.136 303.19 43.876 303.356 43.665 cv
304.574 42.248 li
304.627 42.188 304.639 42.135 304.614 42.095 cv
304.553 42.01 304.521 41.932 304.518 41.856 cv
304.551 41.788 304.599 41.763 304.665 41.781 cv
304.992 42.002 305.256 42.221 305.46 42.438 cv
314.584 47.472 mo
314.453 47.326 314.506 47.242 314.737 47.223 cv
316.676 47.575 li
316.845 47.542 316.941 47.562 316.961 47.63 cv
317.015 47.834 317.021 48.04 316.976 48.251 cv
316.921 48.334 316.86 48.357 316.802 48.322 cv
316.747 48.289 316.707 48.214 316.674 48.103 cv
316.648 48.002 316.568 47.917 316.44 47.844 cv
315.645 47.696 li
315.61 47.693 315.578 47.696 315.547 47.701 cv
315.454 47.721 315.396 47.779 315.379 47.879 cv
315.305 48.088 315.246 48.327 315.197 48.601 cv
315.179 48.684 315.213 48.732 315.291 48.744 cv
315.797 48.845 li
315.888 48.873 315.965 48.856 316.022 48.797 cv
316.058 48.762 316.093 48.689 316.131 48.576 cv
316.148 48.526 316.168 48.486 316.185 48.457 cv
316.203 48.433 316.22 48.415 316.242 48.41 cv
316.279 48.392 316.314 48.392 316.342 48.408 cv
316.373 48.42 316.386 48.446 316.39 48.486 cv
316.392 48.556 316.392 48.626 316.39 48.7 cv
316.373 49.041 316.284 49.389 316.126 49.745 cv
316.115 49.766 316.091 49.771 316.054 49.758 cv
316.015 49.743 315.992 49.718 315.99 49.683 cv
315.955 49.348 li
315.952 49.253 315.902 49.188 315.803 49.158 cv
315.195 49.067 li
315.152 49.064 315.115 49.112 315.082 49.207 cv
314.968 50.078 li
314.976 50.163 315.009 50.221 315.064 50.249 cv
315.376 50.339 315.685 50.4 315.992 50.435 cv
316.1 50.451 316.203 50.408 316.297 50.31 cv
316.306 50.297 316.316 50.286 316.327 50.275 cv
316.521 50.04 li
316.613 49.952 li
316.705 49.905 316.742 49.98 316.729 50.181 cv
316.707 50.315 316.672 50.435 316.627 50.543 cv
316.574 50.661 316.508 50.765 316.427 50.856 cv
316.383 50.921 316.332 50.936 316.277 50.898 cv
316.236 50.861 316.181 50.833 316.111 50.81 cv
315.393 50.7 314.845 50.601 314.465 50.521 cv
314.234 50.468 314.091 50.43 314.035 50.4 cv
313.945 50.352 313.939 50.286 314.019 50.206 cv
314.062 50.159 314.121 50.136 314.196 50.136 cv
314.242 50.128 314.274 50.101 314.289 50.048 cv
314.365 49.841 314.445 49.509 314.536 49.049 cv
314.606 48.677 314.681 48.224 314.761 47.688 cv
314.759 47.625 314.74 47.585 314.697 47.562 cv
314.584 47.472 li
309.243 45.665 mo
309.283 45.617 309.291 45.557 309.263 45.482 cv
309.134 45.313 li
309.17 45.18 309.225 45.132 309.306 45.174 cv
309.567 45.263 309.799 45.401 309.998 45.59 cv
310.041 45.741 309.995 45.811 309.864 45.806 cv
309.781 45.756 309.698 45.758 309.615 45.816 cv
309.099 46.591 308.612 47.396 308.151 48.232 cv
308.129 48.259 308.108 48.272 308.084 48.267 cv
308.071 48.264 308.041 48.249 307.993 48.221 cv
307.912 48.173 307.806 47.779 307.674 47.036 cv
307.593 46.569 307.479 45.833 307.339 44.832 cv
306.322 46.593 li
306.28 46.765 306.304 46.867 306.387 46.896 cv
306.476 47.062 306.411 47.134 306.191 47.115 cv
305.993 47.046 305.809 46.944 305.635 46.81 cv
305.552 46.73 305.527 46.659 305.555 46.599 cv
305.583 46.543 305.638 46.518 305.726 46.521 cv
305.797 46.526 305.844 46.528 305.87 46.528 cv
305.91 46.526 305.94 46.508 305.96 46.478 cv
306.413 45.801 306.82 45.104 307.182 44.39 cv
307.216 44.342 307.198 44.291 307.134 44.243 cv
307.007 44.05 307.045 43.957 307.248 43.962 cv
307.462 44.033 307.663 44.141 307.849 44.286 cv
307.968 45.376 308.124 46.379 308.315 47.295 cv
308.677 46.772 308.986 46.229 309.243 45.665 cv
311.207 46.108 mo
311.23 46.154 311.235 46.196 311.218 46.237 cv
311.2 46.279 311.16 46.304 311.099 46.307 cv
310.924 46.325 li
310.873 46.339 310.838 46.369 310.815 46.412 cv
310.423 47.107 310.078 47.836 309.781 48.604 cv
309.771 48.631 309.771 48.657 309.783 48.674 cv
309.799 48.695 309.811 48.712 309.819 48.725 cv
309.939 48.88 li
309.998 48.976 309.945 49.034 309.787 49.059 cv
309.628 49.006 309.476 48.951 309.342 48.888 cv
309.176 48.815 309.013 48.73 308.855 48.636 cv
308.804 48.578 308.785 48.529 308.795 48.483 cv
308.804 48.448 308.838 48.425 308.898 48.412 cv
308.951 48.403 309.016 48.39 309.097 48.377 cv
309.154 48.363 309.195 48.337 309.218 48.302 cv
309.545 47.693 309.882 46.971 310.226 46.13 cv
310.244 46.076 310.252 46.042 310.252 46.035 cv
310.254 45.999 310.239 45.97 310.211 45.947 cv
310.105 45.862 310.068 45.791 310.095 45.728 cv
310.123 45.67 310.191 45.648 310.304 45.656 cv
310.617 45.758 310.916 45.907 311.207 46.108 cv
311.459 46.128 mo
311.709 46.191 311.877 46.237 311.963 46.261 cv
312.161 46.322 312.314 46.387 312.426 46.455 cv
312.513 46.513 312.551 46.571 312.539 46.631 cv
312.525 46.689 312.47 46.719 312.373 46.722 cv
312.292 46.724 312.252 46.724 312.249 46.727 cv
312.207 46.735 312.172 46.762 312.146 46.81 cv
312.083 47.391 312.103 48.055 312.201 48.797 cv
312.207 48.837 312.221 48.858 312.249 48.861 cv
312.274 48.863 312.304 48.84 312.34 48.8 cv
312.75 48.412 313.142 47.98 313.517 47.499 cv
313.535 47.472 li
313.578 47.404 313.59 47.338 313.572 47.276 cv
313.564 47.242 313.525 47.19 313.459 47.117 cv
313.394 47.046 313.369 46.984 313.386 46.933 cv
313.406 46.88 313.465 46.861 313.556 46.872 cv
313.846 46.938 314.118 47.034 314.373 47.164 cv
314.508 47.285 314.475 47.368 314.271 47.409 cv
314.148 47.404 314.052 47.436 313.984 47.509 cv
313.511 48.007 312.812 48.76 311.886 49.769 cv
311.814 49.841 311.761 49.831 311.733 49.739 cv
311.631 48.797 311.572 47.784 311.56 46.697 cv
311.554 46.566 311.504 46.46 311.412 46.377 cv
311.331 46.325 311.296 46.269 311.305 46.211 cv
311.316 46.154 311.369 46.125 311.459 46.128 cv
325.426 47.228 mo
325.293 47.242 325.181 47.278 325.093 47.328 cv
324.943 47.431 324.873 47.592 324.881 47.816 cv
324.824 47.994 324.739 48.05 324.623 47.98 cv
324.525 47.771 324.482 47.522 324.49 47.228 cv
324.492 47.177 324.508 47.137 324.535 47.11 cv
324.562 47.081 324.595 47.072 324.636 47.076 cv
325.187 46.944 325.554 46.853 325.738 46.802 cv
326.148 46.695 326.506 46.581 326.809 46.468 cv
326.87 46.445 326.916 46.438 326.945 46.445 cv
326.98 46.452 327.018 46.481 327.053 46.534 cv
327.209 46.767 327.295 46.992 327.31 47.207 cv
327.287 47.276 327.237 47.313 327.156 47.318 cv
327.092 47.27 327.01 47.187 326.912 47.067 cv
326.84 46.976 326.774 46.926 326.718 46.915 cv
326.565 46.888 326.407 46.906 326.246 46.973 cv
326.174 47.003 326.15 47.074 326.18 47.185 cv
326.259 47.494 326.342 47.801 326.429 48.103 cv
326.46 48.214 326.492 48.325 326.525 48.435 cv
326.634 48.802 326.746 49.164 326.865 49.525 cv
327.136 49.582 li
327.174 49.6 327.199 49.622 327.209 49.651 cv
327.222 49.678 327.217 49.701 327.195 49.723 cv
327.089 49.817 326.933 49.9 326.724 49.967 cv
326.523 50.033 326.326 50.071 326.133 50.08 cv
326.025 50.037 325.992 49.983 326.037 49.909 cv
326.201 49.741 li
326.226 49.701 326.233 49.653 326.216 49.592 cv
325.59 47.318 li
325.537 47.238 325.481 47.207 325.426 47.228 cv
322.898 47.579 mo
322.884 47.519 322.927 47.459 323.021 47.401 cv
323.33 47.298 323.658 47.241 324.005 47.228 cv
324.052 47.25 324.08 47.283 324.09 47.324 cv
324.1 47.371 324.082 47.411 324.037 47.451 cv
323.906 47.568 li
323.877 47.61 323.863 47.656 323.871 47.701 cv
323.962 48.481 324.113 49.265 324.324 50.053 cv
324.342 50.093 324.369 50.123 324.407 50.146 cv
324.603 50.179 li
324.707 50.239 324.704 50.32 324.598 50.425 cv
323.609 50.637 li
323.467 50.609 323.433 50.535 323.509 50.423 cv
323.642 50.334 323.705 50.244 323.7 50.144 cv
323.605 49.467 323.451 48.695 323.237 47.824 cv
323.217 47.771 323.205 47.741 323.202 47.736 cv
323.181 47.705 323.154 47.691 323.119 47.688 cv
322.983 47.683 322.91 47.648 322.898 47.579 cv
320.937 49.281 mo
320.729 49.19 320.581 49.067 320.496 48.913 cv
320.337 48.618 320.342 48.337 320.508 48.063 cv
320.732 47.705 321.074 47.534 321.537 47.544 cv
321.831 47.562 322 47.565 322.045 47.557 cv
322.158 47.456 322.259 47.456 322.344 47.555 cv
322.422 47.648 322.508 47.849 322.603 48.163 cv
322.598 48.272 322.566 48.329 322.503 48.332 cv
322.437 48.334 322.351 48.28 322.244 48.171 cv
322.11 48.031 321.99 47.945 321.884 47.914 cv
321.457 47.826 321.179 47.909 321.056 48.163 cv
320.92 48.493 321.109 48.744 321.625 48.915 cv
322.256 49.127 li
322.578 49.228 322.769 49.429 322.828 49.728 cv
322.91 50.058 322.857 50.323 322.672 50.516 cv
322.563 50.682 322.386 50.805 322.142 50.886 cv
321.849 50.987 321.486 51.004 321.058 50.946 cv
320.838 50.898 320.697 50.83 320.636 50.742 cv
320.506 50.548 320.45 50.31 320.472 50.028 cv
320.555 49.922 320.64 49.914 320.729 50.005 cv
320.991 50.323 li
321.107 50.465 321.234 50.556 321.373 50.591 cv
321.63 50.669 321.851 50.644 322.033 50.513 cv
322.234 50.32 322.308 50.151 322.254 50.01 cv
322.218 49.919 322.153 49.831 322.062 49.751 cv
321.969 49.668 321.869 49.61 321.76 49.579 cv
320.937 49.281 li
319.076 48.893 mo
319.033 48.946 318.986 48.992 318.926 49.029 cv
318.847 49.081 318.752 49.119 318.641 49.147 cv
318.447 49.17 318.242 49.162 318.025 49.122 cv
318.088 48.096 li
318.086 47.917 318.277 47.865 318.662 47.94 cv
318.802 47.972 318.924 48.045 319.019 48.159 cv
319.111 48.267 319.168 48.385 319.189 48.516 cv
319.21 48.644 319.172 48.773 319.076 48.893 cv
320.249 50.808 mo
320.234 50.747 320.196 50.725 320.135 50.74 cv
320.025 50.768 319.937 50.732 319.869 50.634 cv
319.801 50.531 319.748 50.352 319.711 50.101 cv
319.677 49.967 319.65 49.871 319.627 49.814 cv
319.59 49.718 319.539 49.635 319.476 49.568 cv
319.422 49.502 319.369 49.459 319.318 49.434 cv
319.27 49.409 319.205 49.396 319.129 49.394 cv
319.079 49.384 319.076 49.364 319.125 49.336 cv
319.238 49.298 319.341 49.25 319.428 49.19 cv
319.519 49.129 319.594 49.054 319.658 48.968 cv
319.768 48.813 319.818 48.641 319.808 48.455 cv
319.799 48.272 319.73 48.111 319.607 47.972 cv
319.474 47.826 319.298 47.734 319.079 47.698 cv
318.5 47.643 317.894 47.63 317.262 47.658 cv
317.096 47.736 317.099 47.826 317.267 47.927 cv
317.371 47.967 li
317.422 47.992 317.443 48.04 317.433 48.108 cv
317.443 48.259 317.451 48.408 317.457 48.559 cv
317.476 49.205 317.439 49.849 317.343 50.491 cv
317.343 50.556 317.316 50.604 317.265 50.639 cv
317.074 50.722 li
317.047 50.749 317.041 50.784 317.056 50.833 cv
317.069 50.873 317.09 50.901 317.117 50.913 cv
317.27 50.976 317.449 51.009 317.658 51.009 cv
317.856 51.009 318.054 50.984 318.256 50.926 cv
318.295 50.853 318.295 50.795 318.254 50.744 cv
318.072 50.652 li
318.019 50.631 317.992 50.589 317.992 50.526 cv
317.982 50.201 317.982 49.884 317.995 49.575 cv
317.99 49.494 318.027 49.449 318.105 49.439 cv
318.427 49.426 318.662 49.485 318.812 49.613 cv
318.91 49.699 319.001 49.882 319.082 50.159 cv
319.136 50.363 319.172 50.478 319.179 50.503 cv
319.222 50.634 319.267 50.744 319.318 50.83 cv
319.424 50.971 319.556 51.057 319.716 51.081 cv
319.867 51.107 320.025 51.075 320.188 50.987 cv
320.244 50.926 320.263 50.866 320.249 50.808 cv
337.166 42.757 mo
336.961 42.39 336.703 42.286 336.391 42.445 cv
336.14 42.543 335.906 42.742 335.695 43.036 cv
336.367 43.741 li
336.492 43.857 336.605 43.864 336.709 43.761 cv
337.073 43.411 li
337.242 43.124 337.275 42.906 337.166 42.757 cv
335.959 42.178 mo
336.019 42.028 336.011 41.876 335.933 41.728 cv
335.765 41.464 335.576 41.353 335.371 41.404 cv
335.183 41.423 334.972 41.562 334.736 41.814 cv
334.674 41.909 334.676 41.99 334.749 42.052 cv
334.955 42.312 335.179 42.556 335.418 42.782 cv
335.685 42.604 335.865 42.402 335.959 42.178 cv
337.78 42.82 mo
337.777 42.877 337.767 42.938 337.752 43.001 cv
337.697 43.222 337.576 43.406 337.387 43.549 cv
336.431 44.445 li
336.293 44.646 336.147 44.737 335.992 44.722 cv
335.939 44.692 335.936 44.618 335.984 44.5 cv
336.032 44.39 336.021 44.296 335.957 44.224 cv
335.511 43.72 334.955 43.15 334.289 42.513 cv
334.216 42.473 334.14 42.467 334.064 42.5 cv
334 42.528 333.947 42.54 333.908 42.538 cv
333.834 42.533 333.799 42.478 333.805 42.367 cv
333.805 42.354 333.808 42.339 333.81 42.326 cv
335.101 41.069 li
335.166 40.993 335.234 40.938 335.31 40.906 cv
335.363 40.88 335.433 40.863 335.526 40.847 cv
335.593 40.837 335.66 40.834 335.722 40.837 cv
335.798 40.842 335.871 40.858 335.941 40.882 cv
336.072 40.928 336.176 41.003 336.256 41.109 cv
336.342 41.217 336.388 41.351 336.399 41.504 cv
336.406 41.6 336.379 41.736 336.321 41.916 cv
336.228 42.156 li
336.382 42.05 li
336.508 41.975 336.629 41.924 336.746 41.897 cv
336.968 41.831 337.169 41.851 337.352 41.954 cv
337.515 42.05 337.636 42.199 337.715 42.395 cv
337.767 42.535 337.791 42.676 337.78 42.82 cv
339.695 36.729 mo
339.632 36.59 339.536 36.5 339.416 36.462 cv
339.293 36.422 339.162 36.419 339.028 36.451 cv
338.884 36.487 338.769 36.561 338.676 36.67 cv
338.441 36.973 338.402 37.164 338.56 37.242 cv
339.43 37.75 li
339.561 37.576 339.66 37.401 339.724 37.222 cv
339.769 37.031 339.759 36.867 339.695 36.729 cv
342.019 36.681 mo
342.024 36.865 341.984 37.016 341.893 37.139 cv
341.802 37.265 341.67 37.345 341.496 37.375 cv
341.4 37.38 341.285 37.37 341.151 37.35 cv
341.123 37.345 341.009 37.323 340.806 37.284 cv
340.527 37.232 340.328 37.23 340.208 37.28 cv
340.031 37.353 339.876 37.534 339.742 37.818 cv
339.717 37.894 339.74 37.944 339.812 37.977 cv
339.971 38.065 340.133 38.151 340.301 38.234 cv
340.414 38.291 340.527 38.347 340.645 38.402 cv
340.699 38.427 340.748 38.422 340.791 38.387 cv
340.95 38.266 li
341.009 38.253 341.066 38.281 341.111 38.347 cv
341.073 38.545 341.008 38.732 340.92 38.906 cv
340.826 39.089 340.718 39.232 340.595 39.335 cv
340.572 39.356 340.54 39.363 340.497 39.358 cv
340.452 39.348 340.422 39.326 340.412 39.29 cv
340.422 39.083 li
340.414 39.026 340.381 38.981 340.326 38.952 cv
340.133 38.817 339.935 38.684 339.734 38.56 cv
339.271 38.279 338.789 38.03 338.283 37.818 cv
338.225 37.781 338.176 37.778 338.13 37.811 cv
338.047 37.886 li
337.886 37.987 337.805 37.949 337.812 37.768 cv
338.062 37.212 338.336 36.696 338.635 36.221 cv
338.64 36.213 338.646 36.205 338.65 36.198 cv
338.779 36.022 338.937 35.909 339.127 35.856 cv
339.189 35.838 339.252 35.828 339.314 35.828 cv
339.423 35.826 339.531 35.846 339.636 35.891 cv
339.804 35.967 339.931 36.084 340.019 36.25 cv
340.112 36.434 340.14 36.643 340.101 36.882 cv
340.107 36.935 340.125 36.943 340.158 36.905 cv
340.193 36.837 340.232 36.789 340.275 36.756 cv
340.318 36.724 340.381 36.696 340.462 36.676 cv
340.551 36.651 340.645 36.643 340.744 36.653 cv
340.806 36.659 340.902 36.676 341.033 36.705 cv
341.269 36.786 341.448 36.819 341.568 36.804 cv
341.684 36.789 341.755 36.727 341.78 36.617 cv
341.795 36.558 341.83 36.535 341.888 36.547 cv
341.949 36.561 341.992 36.606 342.019 36.681 cv
336.932 39.489 mo
337.437 38.837 li
337.564 38.754 337.679 38.721 337.783 38.744 cv
337.9 38.767 337.986 38.762 338.042 38.729 cv
338.102 38.691 338.107 38.628 338.059 38.54 cv
337.888 38.4 337.697 38.306 337.488 38.263 cv
337.418 38.251 337.355 38.326 337.304 38.495 cv
336.08 40.095 li
335.989 40.317 336.039 40.402 336.236 40.352 cv
336.371 40.291 li
336.412 40.261 336.457 40.261 336.512 40.288 cv
337.526 41.013 338.168 41.524 338.439 41.819 cv
338.479 41.859 338.492 41.902 338.474 41.947 cv
338.441 42.012 338.437 42.076 338.459 42.135 cv
338.494 42.248 338.554 42.274 338.64 42.213 cv
338.693 42.178 338.797 42.065 338.953 41.879 cv
339.204 41.572 339.547 41.119 339.981 40.52 cv
340.034 40.465 340.088 40.427 340.137 40.409 cv
340.2 40.376 340.211 40.324 340.17 40.251 cv
340.09 40.033 339.931 39.836 339.699 39.662 cv
339.523 39.557 339.435 39.557 339.437 39.659 cv
339.472 39.788 li
339.596 40.073 li
339.662 40.221 339.657 40.349 339.584 40.452 cv
339.413 40.714 339.212 40.965 338.985 41.209 cv
338.932 41.244 338.867 41.247 338.784 41.217 cv
338.047 40.709 li
337.974 40.633 337.949 40.576 337.971 40.538 cv
338.336 40.027 li
338.409 39.951 338.49 39.937 338.58 39.979 cv
338.9 40.103 li
338.935 40.116 338.968 40.108 339 40.08 cv
339.028 40.05 339.035 40.027 339.02 40.009 cv
338.771 39.698 338.494 39.456 338.19 39.283 cv
338.127 39.244 338.064 39.212 337.999 39.182 cv
337.961 39.164 337.931 39.166 337.906 39.187 cv
337.879 39.207 337.863 39.238 337.861 39.283 cv
337.858 39.303 337.863 39.326 337.879 39.353 cv
337.896 39.383 337.924 39.421 337.961 39.458 cv
338.045 39.546 338.094 39.612 338.109 39.659 cv
338.137 39.738 338.117 39.816 338.049 39.889 cv
337.722 40.301 li
337.675 40.367 337.617 40.374 337.547 40.319 cv
337.322 40.148 337.131 39.982 336.978 39.819 cv
336.894 39.753 336.867 39.675 336.892 39.581 cv
336.902 39.552 336.915 39.522 336.932 39.489 cv
339.722 33.861 mo
339.547 34.129 339.418 34.465 339.332 34.867 cv
339.345 34.905 339.367 34.932 339.402 34.95 cv
339.435 34.963 339.468 34.965 339.498 34.955 cv
339.625 34.801 339.717 34.746 339.78 34.791 cv
339.85 34.815 339.921 34.834 339.989 34.857 cv
340.703 35.091 341.39 35.36 342.051 35.667 cv
342.092 35.677 342.119 35.702 342.136 35.741 cv
342.144 35.762 342.152 35.803 342.16 35.866 cv
342.17 35.987 342.211 36.059 342.281 36.082 cv
342.351 36.105 342.398 36.076 342.426 35.996 cv
343.098 34.301 li
343.121 34.223 343.161 34.153 343.224 34.092 cv
343.289 34.032 343.306 33.977 343.274 33.921 cv
343.08 33.707 342.829 33.543 342.522 33.436 cv
342.384 33.436 342.342 33.496 342.391 33.619 cv
342.674 33.999 li
342.706 34.09 342.723 34.193 342.726 34.311 cv
342.575 34.726 342.469 34.95 342.412 34.981 cv
342.324 35.041 342.246 35.053 342.177 35.023 cv
341.302 34.731 340.562 34.432 339.961 34.117 cv
339.931 34.105 339.916 34.067 339.916 34.002 cv
339.916 33.916 339.911 33.864 339.898 33.838 cv
340.497 31.596 mo
340.356 31.918 340.263 32.241 340.22 32.568 cv
340.23 32.678 340.268 32.741 340.328 32.758 cv
340.394 32.776 340.459 32.726 340.525 32.606 cv
340.54 32.573 340.568 32.555 340.603 32.55 cv
340.61 32.55 340.642 32.55 340.701 32.557 cv
341.589 32.746 342.361 32.948 343.02 33.159 cv
343.058 33.174 343.091 33.209 343.116 33.264 cv
343.143 33.342 343.169 33.406 343.189 33.453 cv
343.211 33.511 343.242 33.541 343.277 33.541 cv
343.322 33.543 343.37 33.516 343.416 33.455 cv
343.48 33.282 343.531 33.108 343.574 32.935 cv
343.609 32.786 343.636 32.63 343.659 32.464 cv
343.606 32.311 343.539 32.274 343.458 32.346 cv
343.324 32.492 li
343.312 32.502 343.3 32.514 343.282 32.537 cv
343.267 32.553 343.244 32.557 343.214 32.55 cv
342.406 32.399 341.624 32.19 340.869 31.926 cv
340.824 31.913 340.789 31.883 340.761 31.838 cv
340.713 31.666 li
340.701 31.61 340.668 31.574 340.621 31.564 cv
340.58 31.553 340.537 31.567 340.497 31.596 cv
341.111 28.115 mo
341.234 28.019 341.317 28.034 341.363 28.159 cv
341.345 28.255 341.378 28.33 341.463 28.386 cv
342.377 28.573 343.306 28.723 344.256 28.839 cv
344.288 28.849 344.308 28.864 344.313 28.889 cv
344.316 28.902 344.313 28.934 344.306 28.991 cv
344.291 29.082 343.964 29.329 343.324 29.73 cv
342.922 29.981 342.281 30.362 341.405 30.867 cv
343.42 31.151 li
343.596 31.123 343.681 31.066 343.676 30.977 cv
343.795 30.834 343.888 30.867 343.953 31.078 cv
343.964 31.287 343.938 31.496 343.879 31.707 cv
343.836 31.813 343.78 31.864 343.713 31.861 cv
343.652 31.856 343.606 31.813 343.576 31.733 cv
343.556 31.664 343.541 31.619 343.529 31.596 cv
343.513 31.561 343.486 31.538 343.451 31.532 cv
342.65 31.366 341.85 31.246 341.052 31.178 cv
340.995 31.166 340.957 31.201 340.935 31.28 cv
340.804 31.468 340.703 31.468 340.633 31.28 cv
340.618 31.053 340.642 30.826 340.709 30.6 cv
341.674 30.079 342.547 29.559 343.324 29.04 cv
342.703 28.899 342.082 28.817 341.463 28.788 cv
341.402 28.768 341.345 28.784 341.287 28.839 cv
341.179 29.02 li
341.041 29.037 340.974 29.002 340.985 28.914 cv
340.965 28.637 341.008 28.371 341.111 28.115 cv
301.626 38.183 mo
301.439 38.042 301.344 38.07 301.344 38.266 cv
301.367 38.411 li
301.384 38.454 301.372 38.5 301.334 38.545 cv
300.393 39.326 299.747 39.806 299.402 39.99 cv
299.354 40.02 299.311 40.02 299.271 39.992 cv
299.218 39.944 299.158 39.924 299.095 39.929 cv
298.979 39.937 298.939 39.987 298.974 40.082 cv
298.997 40.14 299.078 40.266 299.216 40.462 cv
299.445 40.777 299.787 41.217 300.247 41.779 cv
300.285 41.843 300.307 41.902 300.312 41.954 cv
300.33 42.022 300.376 42.045 300.454 42.025 cv
300.682 42.002 300.909 41.902 301.131 41.725 cv
301.273 41.584 301.299 41.501 301.198 41.476 cv
301.07 41.479 li
300.768 41.524 li
300.609 41.549 300.489 41.514 300.411 41.418 cv
300.205 41.19 300.015 40.935 299.843 40.661 cv
299.819 40.603 299.835 40.54 299.884 40.467 cv
300.551 39.896 li
300.639 39.846 300.703 39.836 300.733 39.867 cv
301.125 40.342 li
301.177 40.427 301.173 40.51 301.11 40.583 cv
300.911 40.858 li
300.891 40.888 300.891 40.92 300.911 40.955 cv
300.928 40.991 300.949 41.003 300.971 40.995 cv
301.329 40.837 301.626 40.636 301.87 40.389 cv
301.918 40.339 301.966 40.286 302.01 40.234 cv
302.038 40.201 302.044 40.17 302.031 40.143 cv
302.018 40.113 301.993 40.09 301.953 40.075 cv
301.932 40.068 301.908 40.068 301.88 40.075 cv
301.844 40.085 301.804 40.103 301.759 40.128 cv
301.653 40.186 301.578 40.216 301.53 40.218 cv
301.447 40.226 301.38 40.186 301.326 40.103 cv
301.019 39.69 li
300.967 39.627 300.976 39.572 301.048 39.522 cv
301.263 39.348 301.469 39.209 301.666 39.104 cv
301.744 39.043 301.827 39.034 301.91 39.083 cv
301.935 39.099 301.961 39.118 301.985 39.144 cv
302.478 39.785 li
302.526 39.929 302.529 40.044 302.481 40.138 cv
302.43 40.241 302.413 40.326 302.428 40.387 cv
302.451 40.452 302.509 40.475 302.607 40.452 cv
302.78 40.322 302.917 40.165 303.011 39.977 cv
303.042 39.913 302.984 39.836 302.836 39.745 cv
301.626 38.183 li
300.433 36.847 mo
300.446 36.885 300.438 36.915 300.419 36.943 cv
300.413 36.948 300.39 36.97 300.347 37.008 cv
299.606 37.514 298.936 37.929 298.336 38.256 cv
298.245 38.296 298.136 38.269 298.009 38.175 cv
297.875 38.143 297.817 38.201 297.843 38.344 cv
298.388 39.197 li
298.524 39.26 298.599 39.232 298.62 39.114 cv
298.582 38.92 li
298.59 38.875 298.609 38.839 298.639 38.81 cv
299.303 38.334 299.985 37.919 300.687 37.559 cv
300.725 37.536 300.773 37.532 300.823 37.544 cv
300.979 37.624 li
301.03 37.655 301.077 37.658 301.118 37.629 cv
301.15 37.607 301.171 37.572 301.176 37.519 cv
301.042 37.197 300.874 36.909 300.67 36.656 cv
300.579 36.588 300.509 36.571 300.456 36.603 cv
300.401 36.638 300.39 36.719 300.433 36.847 cv
299.072 34.158 mo
299.08 34.203 299.057 34.245 299.009 34.282 cv
298.526 34.53 298.111 34.731 297.769 34.889 cv
297.342 35.086 297.022 35.214 296.814 35.272 cv
296.761 35.289 296.718 35.28 296.685 35.246 cv
296.642 35.186 296.59 35.154 296.527 35.147 cv
296.414 35.126 296.364 35.168 296.376 35.27 cv
296.386 35.332 296.436 35.471 296.53 35.692 cv
296.683 36.047 296.924 36.55 297.251 37.2 cv
297.274 37.27 297.284 37.332 297.276 37.385 cv
297.279 37.453 297.319 37.486 297.399 37.484 cv
297.517 37.498 297.641 37.492 297.769 37.466 cv
297.885 37.441 298.004 37.398 298.124 37.337 cv
298.295 37.232 298.336 37.157 298.245 37.112 cv
298.119 37.086 li
297.814 37.066 li
297.797 37.064 297.782 37.061 297.769 37.061 cv
297.634 37.04 297.541 36.983 297.49 36.885 cv
297.337 36.616 297.209 36.326 297.1 36.02 cv
297.091 35.959 297.115 35.901 297.183 35.843 cv
297.956 35.428 li
298.053 35.398 298.114 35.403 298.139 35.438 cv
298.419 35.987 li
298.451 36.082 298.428 36.16 298.35 36.221 cv
298.098 36.445 li
298.071 36.469 298.063 36.502 298.076 36.539 cv
298.087 36.58 298.104 36.596 298.129 36.59 cv
298.509 36.515 298.846 36.381 299.135 36.196 cv
299.193 36.158 299.251 36.116 299.306 36.073 cv
299.339 36.047 299.351 36.02 299.344 35.989 cv
299.339 35.956 299.319 35.932 299.284 35.907 cv
299.266 35.896 299.244 35.891 299.211 35.891 cv
299.178 35.893 299.135 35.901 299.083 35.916 cv
298.969 35.95 298.888 35.961 298.841 35.956 cv
298.76 35.944 298.703 35.891 298.668 35.797 cv
298.456 35.33 li
298.421 35.257 298.441 35.204 298.519 35.168 cv
298.768 35.048 299 34.957 299.214 34.897 cv
299.303 34.852 299.384 34.865 299.458 34.93 cv
299.477 34.95 299.498 34.975 299.517 35.005 cv
299.86 35.741 li
299.878 35.886 299.852 36.002 299.784 36.082 cv
299.712 36.172 299.676 36.25 299.681 36.314 cv
299.686 36.384 299.742 36.416 299.84 36.414 cv
300.036 36.326 300.205 36.203 300.338 36.041 cv
300.381 35.985 300.341 35.896 300.217 35.776 cv
299.375 33.992 li
299.223 33.813 299.125 33.818 299.08 34.012 cv
299.072 34.158 li
298.708 32.479 mo
298.663 32.1 298.556 31.936 298.388 31.992 cv
297.412 32.241 li
297.44 32.454 297.495 32.651 297.573 32.822 cv
297.631 32.92 297.696 32.995 297.769 33.055 cv
297.822 33.098 297.88 33.131 297.94 33.154 cv
298.084 33.206 298.212 33.203 298.328 33.147 cv
298.443 33.088 298.539 33 298.609 32.879 cv
298.687 32.756 298.718 32.623 298.708 32.479 cv
298.959 33.375 mo
298.869 33.532 298.738 33.642 298.572 33.707 cv
298.398 33.773 298.222 33.778 298.046 33.72 cv
297.945 33.687 297.852 33.639 297.769 33.572 cv
297.686 33.508 297.611 33.428 297.543 33.33 cv
297.503 33.295 297.485 33.302 297.487 33.352 cv
297.51 33.426 297.515 33.489 297.508 33.543 cv
297.5 33.596 297.475 33.659 297.432 33.73 cv
297.386 33.811 297.324 33.881 297.246 33.944 cv
297.198 33.984 297.115 34.039 297.002 34.11 cv
296.779 34.218 296.628 34.321 296.554 34.416 cv
296.482 34.507 296.474 34.603 296.534 34.699 cv
296.565 34.748 296.557 34.791 296.504 34.822 cv
296.454 34.857 296.391 34.854 296.321 34.819 cv
296.187 34.696 296.109 34.557 296.087 34.407 cv
296.064 34.25 296.102 34.102 296.205 33.959 cv
296.27 33.889 296.358 33.813 296.469 33.733 cv
296.489 33.717 296.587 33.652 296.761 33.539 cv
296.995 33.38 297.137 33.242 297.188 33.121 cv
297.263 32.946 297.249 32.708 297.14 32.411 cv
297.108 32.338 297.052 32.319 296.982 32.348 cv
296.688 32.429 296.391 32.525 296.089 32.63 cv
296.034 32.651 296.001 32.686 295.996 32.743 cv
295.966 32.94 li
295.933 32.992 295.875 33.01 295.795 32.995 cv
295.684 32.826 295.598 32.651 295.541 32.461 cv
295.478 32.268 295.452 32.09 295.468 31.928 cv
295.47 31.901 295.488 31.873 295.523 31.846 cv
295.563 31.818 295.598 31.813 295.634 31.832 cv
295.77 31.987 li
295.815 32.022 295.868 32.032 295.93 32.014 cv
296.557 31.91 297.168 31.752 297.769 31.541 cv
297.908 31.491 298.044 31.438 298.181 31.385 cv
298.25 31.372 298.288 31.34 298.295 31.282 cv
298.302 31.174 li
298.345 30.985 298.428 30.957 298.551 31.09 cv
298.768 31.672 298.936 32.241 299.06 32.796 cv
299.09 33.013 299.057 33.203 298.959 33.375 cv
295.1 28.814 mo
295.123 28.877 295.183 28.922 295.281 28.95 cv
296.524 28.869 297.337 28.756 297.717 28.613 cv
297.739 28.595 297.757 28.577 297.769 28.557 cv
297.79 28.525 297.797 28.482 297.792 28.436 cv
297.84 28.305 297.926 28.29 298.044 28.386 cv
298.122 28.605 298.212 29.277 298.32 30.399 cv
298.388 30.571 298.419 30.676 298.408 30.713 cv
298.247 30.877 298.033 30.952 297.769 30.945 cv
297.761 30.945 li
297.646 30.897 297.613 30.831 297.666 30.75 cv
297.704 30.729 297.737 30.705 297.769 30.68 cv
297.885 30.584 297.958 30.461 297.986 30.306 cv
297.978 30.03 297.948 29.757 297.892 29.492 cv
297.88 29.415 297.838 29.352 297.769 29.302 cv
297.759 29.294 297.749 29.287 297.737 29.282 cv
296.794 29.372 li
296.886 30.072 li
296.922 30.16 296.982 30.2 297.06 30.193 cv
297.244 30.193 297.362 30.21 297.415 30.248 cv
297.452 30.316 297.434 30.373 297.364 30.424 cv
297.263 30.485 297.091 30.532 296.844 30.565 cv
296.585 30.6 296.356 30.603 296.157 30.575 cv
296.059 30.56 296.034 30.502 296.082 30.399 cv
296.384 30.248 li
296.491 30.198 296.539 30.14 296.53 30.075 cv
296.484 29.492 li
296.459 29.422 296.419 29.397 296.358 29.418 cv
295.352 29.569 li
295.281 29.591 295.249 29.634 295.251 29.695 cv
295.214 29.896 295.12 29.955 294.975 29.87 cv
294.902 29.717 294.851 29.372 294.824 28.839 cv
294.879 28.659 294.969 28.651 295.1 28.814 cv
298.371 23.204 mo
298.454 23.159 298.454 23.108 298.371 23.054 cv
297.236 22.356 296.391 21.831 295.83 21.473 cv
295.747 21.421 295.697 21.335 295.679 21.216 cv
295.604 21.03 295.518 21.013 295.427 21.166 cv
295.352 21.432 295.309 21.71 295.301 21.997 cv
295.307 22.087 295.334 22.139 295.39 22.147 cv
295.443 22.155 295.495 22.122 295.553 22.047 cv
295.609 21.969 295.654 21.921 295.681 21.908 cv
295.739 21.881 295.802 21.881 295.875 21.908 cv
295.905 21.921 li
296.431 22.187 296.919 22.481 297.364 22.802 cv
297.407 22.827 297.432 22.852 297.437 22.877 cv
297.44 22.902 297.423 22.92 297.384 22.932 cv
296.698 23.164 296.069 23.305 295.503 23.354 cv
295.452 23.34 295.42 23.311 295.402 23.269 cv
295.402 23.269 295.392 23.229 295.377 23.153 cv
295.357 23.06 295.317 23.013 295.259 23.013 cv
295.198 23.011 295.151 23.057 295.113 23.153 cv
295.068 23.272 295.035 23.43 295.015 23.63 cv
295.005 23.718 294.995 23.886 294.98 24.135 cv
294.995 24.223 295.032 24.265 295.088 24.265 cv
295.146 24.263 295.191 24.221 295.226 24.135 cv
295.289 24.029 295.38 23.964 295.503 23.933 cv
296.537 23.72 297.493 23.475 298.371 23.204 cv
302.773 10.85 mo
302.295 9.74402 li
302.288 9.70602 302.305 9.69101 302.345 9.694 cv
303.452 10.172 li
cp
305.241 10.018 mo
305.208 9.98001 305.158 9.97101 305.09 9.98801 cv
305.027 10.03 304.984 10.055 304.962 10.063 cv
304.898 10.084 304.818 10.084 304.72 10.065 cv
304.317 9.91702 303.759 9.70102 303.047 9.41501 cv
302.333 9.13 301.95 8.99402 301.895 9.00702 cv
301.835 9.02402 301.779 9.06702 301.731 9.138 cv
301.681 9.21402 301.678 9.26801 301.726 9.30502 cv
301.764 9.35101 301.973 9.80502 302.352 10.657 cv
302.544 11.085 302.727 11.508 302.911 11.925 cv
302.899 12.081 302.874 12.232 302.836 12.378 cv
302.858 12.466 302.917 12.491 303.011 12.454 cv
303.142 12.355 303.263 12.247 303.377 12.129 cv
303.377 12.126 303.38 12.124 303.382 12.124 cv
303.399 12.104 303.417 12.084 303.437 12.061 cv
303.528 11.958 303.613 11.845 303.691 11.723 cv
303.693 11.669 303.678 11.631 303.643 11.608 cv
303.598 11.581 303.53 11.589 303.439 11.638 cv
303.439 11.638 303.437 11.638 303.437 11.641 cv
303.386 11.666 303.342 11.679 303.299 11.68 cv
303.259 11.68 303.223 11.674 303.19 11.656 cv
303.177 11.648 303.168 11.643 303.158 11.636 cv
303.075 11.573 303.009 11.45 302.967 11.268 cv
302.936 11.211 302.952 11.153 303.011 11.095 cv
303.243 10.836 303.508 10.571 303.804 10.303 cv
303.993 10.341 304.169 10.423 304.333 10.554 cv
304.368 10.592 304.378 10.635 304.363 10.68 cv
304.312 10.765 304.285 10.825 304.277 10.864 cv
304.258 10.973 304.315 11.016 304.453 10.989 cv
304.775 10.748 305.04 10.473 305.251 10.164 cv
305.273 10.101 305.268 10.054 305.241 10.018 cv
298.476 16.587 mo
298.421 16.763 298.333 16.942 298.215 17.12 cv
297.334 16.665 li
297.176 16.596 297.203 16.409 297.42 16.098 cv
297.503 15.985 297.613 15.908 297.752 15.868 cv
297.883 15.827 298.009 15.822 298.132 15.854 cv
298.255 15.888 298.35 15.971 298.421 16.104 cv
298.491 16.235 298.509 16.395 298.476 16.587 cv
300.697 15.938 mo
300.668 15.865 300.622 15.822 300.564 15.815 cv
300.507 15.805 300.471 15.827 300.461 15.888 cv
300.443 15.996 300.376 16.059 300.262 16.081 cv
300.146 16.101 299.968 16.079 299.731 16.013 cv
299.603 15.991 299.508 15.978 299.447 15.975 cv
299.349 15.971 299.256 15.983 299.171 16.011 cv
299.093 16.036 299.032 16.066 298.992 16.098 cv
298.952 16.134 298.914 16.184 298.884 16.253 cv
298.853 16.29 298.836 16.285 298.829 16.232 cv
298.853 15.999 298.816 15.792 298.713 15.618 cv
298.62 15.46 298.489 15.349 298.32 15.286 cv
298.154 15.223 297.986 15.221 297.817 15.276 cv
297.634 15.337 297.485 15.458 297.367 15.636 cv
297.095 16.124 296.846 16.653 296.625 17.221 cv
296.63 17.397 296.711 17.43 296.864 17.321 cv
296.939 17.247 li
296.982 17.208 297.032 17.208 297.091 17.247 cv
297.82 17.505 298.507 17.841 299.153 18.253 cv
299.211 18.278 299.244 18.321 299.254 18.378 cv
299.254 18.58 li
299.268 18.615 299.297 18.636 299.344 18.639 cv
299.386 18.642 299.417 18.636 299.437 18.615 cv
299.552 18.507 299.651 18.36 299.734 18.177 cv
299.812 18.001 299.865 17.815 299.892 17.618 cv
299.844 17.555 299.792 17.53 299.731 17.548 cv
299.581 17.675 li
299.541 17.712 299.493 17.72 299.439 17.694 cv
299.148 17.579 298.869 17.452 298.599 17.321 cv
298.526 17.294 298.502 17.244 298.524 17.171 cv
298.639 16.882 298.783 16.698 298.952 16.618 cv
299.067 16.561 299.263 16.552 299.538 16.593 cv
299.742 16.62 299.855 16.636 299.88 16.638 cv
300.01 16.653 300.127 16.655 300.222 16.645 cv
300.388 16.604 300.513 16.522 300.599 16.393 cv
300.679 16.267 300.715 16.116 300.697 15.938 cv
296.886 18.247 mo
296.685 18.182 296.484 18.165 296.283 18.197 cv
296.215 18.208 296.187 18.298 296.197 18.467 cv
295.654 20.31 li
295.649 20.537 295.724 20.597 295.88 20.487 cv
295.981 20.386 li
296.006 20.346 296.046 20.331 296.107 20.336 cv
297.257 20.636 298.004 20.869 298.345 21.04 cv
298.393 21.06 298.419 21.093 298.421 21.141 cv
298.413 21.212 298.428 21.269 298.471 21.317 cv
298.542 21.403 298.604 21.405 298.66 21.322 cv
298.695 21.274 298.748 21.138 298.821 20.917 cv
298.941 20.559 299.093 20.036 299.276 19.354 cv
299.303 19.286 299.337 19.236 299.377 19.204 cv
299.42 19.153 299.412 19.102 299.351 19.053 cv
299.203 18.884 298.997 18.763 298.73 18.688 cv
298.537 18.655 298.459 18.682 298.496 18.776 cv
298.572 18.877 li
298.778 19.088 li
298.888 19.198 298.926 19.311 298.899 19.43 cv
298.834 19.721 298.743 20.016 298.622 20.31 cv
298.59 20.361 298.532 20.386 298.446 20.386 cv
297.616 20.184 li
297.525 20.141 297.482 20.099 297.49 20.059 cv
297.641 19.48 li
297.678 19.388 297.747 19.345 297.843 19.354 cv
298.17 19.354 li
298.205 19.352 298.232 19.335 298.25 19.3 cv
298.264 19.264 298.264 19.239 298.245 19.229 cv
297.849 18.997 297.452 18.869 297.052 18.841 cv
297.012 18.839 296.985 18.851 296.969 18.877 cv
296.952 18.904 296.949 18.936 296.962 18.977 cv
296.972 19.017 297.022 19.057 297.113 19.1 cv
297.216 19.148 297.284 19.191 297.314 19.229 cv
297.364 19.29 297.375 19.364 297.34 19.456 cv
297.188 19.933 li
297.168 20.009 297.115 20.034 297.037 20.009 cv
296.776 19.933 296.55 19.85 296.358 19.757 cv
296.233 19.72 296.182 19.629 296.207 19.48 cv
296.434 18.725 li
296.517 18.607 296.61 18.54 296.711 18.524 cv
296.821 18.505 296.897 18.471 296.937 18.424 cv
296.974 18.368 296.96 18.31 296.886 18.247 cv
298.668 13.161 mo
298.179 14.02 li
298.187 14.165 298.245 14.22 298.355 14.182 cv
298.507 14.061 li
298.547 14.046 298.587 14.046 298.627 14.061 cv
299.337 14.413 300.003 14.811 300.627 15.249 cv
300.668 15.271 300.692 15.309 300.703 15.359 cv
300.703 15.53 li
300.703 15.589 300.72 15.629 300.762 15.651 cv
300.799 15.669 300.839 15.669 300.886 15.651 cv
301.102 15.389 301.273 15.112 301.399 14.821 cv
301.417 14.713 301.399 14.645 301.349 14.614 cv
301.291 14.579 301.218 14.61 301.128 14.706 cv
301.102 14.73 301.072 14.743 301.04 14.735 cv
301.032 14.735 301.002 14.725 300.952 14.706 cv
300.179 14.3 299.517 13.913 298.967 13.546 cv
298.891 13.485 298.864 13.38 298.888 13.225 cv
298.853 13.097 298.781 13.075 298.668 13.161 cv
304.413 6.72 mo
304.028 6.94803 303.835 7.26801 303.835 7.67603 cv
303.837 7.98703 303.98 8.22101 304.262 8.38 cv
304.411 8.466 304.594 8.49103 304.815 8.45602 cv
305.645 8.28003 li
305.752 8.25201 305.865 8.24701 305.983 8.26602 cv
306.101 8.28403 306.197 8.32501 306.274 8.38 cv
306.39 8.46902 306.416 8.64401 306.35 8.90903 cv
306.267 9.11002 306.098 9.24301 305.847 9.311 cv
305.714 9.354 305.562 9.34601 305.394 9.28601 cv
305.016 9.16 li
304.896 9.13303 304.831 9.18201 304.815 9.311 cv
304.944 9.55701 305.11 9.72302 305.319 9.81403 cv
305.412 9.85703 305.562 9.84003 305.771 9.76401 cv
306.154 9.59601 306.44 9.39102 306.632 9.15701 cv
306.791 8.96701 306.871 8.77502 306.879 8.58102 cv
306.931 8.32501 306.839 8.08301 306.601 7.85202 cv
306.398 7.638 306.138 7.57001 305.822 7.651 cv
305.193 7.802 li
304.679 7.92801 304.393 7.819 304.338 7.47403 cv
304.307 7.203 304.494 6.99402 304.891 6.84601 cv
304.994 6.815 305.135 6.82501 305.319 6.871 cv
305.465 6.90601 305.562 6.90601 305.616 6.871 cv
305.666 6.83902 305.663 6.772 305.61 6.68002 cv
305.372 6.47101 305.195 6.34702 305.085 6.31201 cv
304.962 6.27402 304.881 6.32703 304.841 6.46802 cv
304.805 6.49902 304.665 6.58102 304.413 6.72 cv
300.411 10.639 mo
300.245 10.911 300.033 11.208 299.784 11.535 cv
299.671 11.683 299.442 11.971 299.097 12.401 cv
299.065 12.419 299.048 12.448 299.04 12.483 cv
299.035 12.524 299.048 12.564 299.075 12.604 cv
299.244 12.836 299.427 13.002 299.626 13.105 cv
299.757 13.093 299.79 12.999 299.726 12.829 cv
299.586 12.66 299.546 12.491 299.6 12.325 cv
299.638 12.232 299.704 12.141 299.795 12.049 cv
299.83 12.001 299.89 11.991 299.978 12.023 cv
301.814 13.407 li
301.86 13.442 301.884 13.485 301.89 13.533 cv
301.865 13.759 li
301.872 13.84 301.932 13.865 302.041 13.835 cv
302.315 13.596 302.516 13.294 302.644 12.929 cv
302.634 12.864 302.594 12.839 302.519 12.853 cv
302.272 12.97 li
301.626 12.529 300.987 12.063 300.35 11.567 cv
300.262 11.5 300.237 11.432 300.275 11.366 cv
300.36 11.218 300.471 11.11 300.607 11.042 cv
300.655 11.016 300.735 11.016 300.845 11.042 cv
300.992 11.077 301.105 11.093 301.185 11.093 cv
301.243 11.04 301.261 10.981 301.236 10.917 cv
300.411 10.639 mo
300.443 10.589 300.473 10.556 300.502 10.544 cv
300.534 10.526 300.577 10.528 300.634 10.547 cv
300.896 10.635 301.094 10.758 301.236 10.917 cv
341.885 15.432 mo
341.916 15.458 341.928 15.487 341.928 15.525 cv
342.123 16.042 342.253 16.384 342.324 16.555 cv
342.476 16.936 342.625 17.268 342.773 17.548 cv
342.801 17.603 342.814 17.646 342.808 17.677 cv
342.806 17.712 342.783 17.749 342.738 17.79 cv
342.532 17.969 342.324 18.077 342.119 18.117 cv
342.049 18.104 342.006 18.061 341.994 17.983 cv
342.031 17.915 342.101 17.827 342.208 17.72 cv
342.285 17.636 342.326 17.568 342.328 17.513 cv
342.339 17.362 342.301 17.212 342.218 17.065 cv
342.179 16.997 342.109 16.985 342.009 17.027 cv
341.719 17.14 341.433 17.257 341.151 17.375 cv
341.049 17.42 340.945 17.463 340.842 17.509 cv
340.502 17.653 340.165 17.807 339.833 17.964 cv
339.808 18.232 li
339.795 18.27 339.777 18.298 339.752 18.31 cv
339.727 18.325 339.705 18.323 339.681 18.304 cv
339.579 18.215 339.48 18.074 339.39 17.878 cv
339.302 17.694 339.244 17.511 339.209 17.324 cv
339.239 17.214 339.289 17.176 339.365 17.212 cv
339.547 17.346 li
339.586 17.37 339.636 17.37 339.692 17.346 cv
341.807 16.473 li
341.879 16.413 341.9 16.358 341.879 16.303 cv
341.845 16.177 341.798 16.077 341.74 15.996 cv
341.624 15.862 341.458 15.815 341.244 15.847 cv
341.066 15.815 341.003 15.739 341.058 15.621 cv
341.244 15.501 341.48 15.43 341.765 15.402 cv
341.812 15.397 341.855 15.407 341.885 15.432 cv
341.247 22.012 mo
341.267 22.007 341.289 21.999 341.312 21.994 cv
341.41 21.971 341.518 21.961 341.634 21.961 cv
341.74 22.036 341.752 22.12 341.672 22.21 cv
341.381 22.481 li
341.247 22.602 341.166 22.731 341.14 22.867 cv
341.081 23.121 341.119 23.333 341.254 23.501 cv
341.455 23.684 341.621 23.747 341.755 23.686 cv
341.84 23.647 341.921 23.579 341.994 23.485 cv
342.066 23.389 342.117 23.29 342.142 23.181 cv
342.384 22.371 li
342.459 22.16 342.57 22.012 342.716 21.921 cv
342.988 21.75 343.261 21.737 343.536 21.884 cv
343.896 22.079 344.082 22.399 344.099 22.846 cv
344.099 23.131 344.107 23.298 344.117 23.343 cv
344.22 23.446 344.228 23.541 344.136 23.63 cv
344.051 23.71 343.861 23.805 343.564 23.916 cv
343.455 23.919 343.4 23.888 343.392 23.828 cv
343.387 23.767 343.435 23.68 343.536 23.569 cv
343.662 23.43 343.737 23.309 343.76 23.204 cv
343.822 22.786 343.727 22.524 343.472 22.419 cv
343.146 22.305 342.912 22.505 342.779 23.013 cv
342.61 23.637 li
342.529 23.954 342.345 24.149 342.062 24.225 cv
341.748 24.323 341.49 24.288 341.289 24.12 cv
341.123 24.024 340.992 23.86 340.9 23.632 cv
340.787 23.35 340.746 23.001 340.781 22.585 cv
340.814 22.366 340.872 22.225 340.953 22.163 cv
341.041 22.096 341.136 22.047 341.247 22.012 cv
336.256 9.41702 mo
336.117 9.5 335.976 9.51401 335.828 9.46802 cv
335.609 9.39102 335.408 9.23102 335.224 8.98901 cv
335.426 8.74802 335.642 8.52103 335.879 8.30902 cv
335.933 8.23703 336.009 8.229 336.105 8.28403 cv
336.356 8.49301 336.5 8.68701 336.533 8.86301 cv
336.59 9.05701 336.498 9.24103 336.256 9.41702 cv
335.349 10.649 mo
335.215 10.761 335.003 10.743 334.72 10.599 cv
334.369 10.272 li
334.263 10.179 334.263 10.071 334.369 9.94501 cv
334.998 9.26602 li
335.29 9.45001 335.491 9.65903 335.601 9.89502 cv
335.767 10.179 335.685 10.43 335.349 10.649 cv
337.068 8.979 mo
337.049 8.89102 337.028 8.82501 337 8.77502 cv
336.965 8.70801 336.907 8.64401 336.832 8.58701 cv
335.564 7.43201 li
335.371 7.41901 335.32 7.50302 335.413 7.68301 cv
335.445 7.75702 335.445 7.82703 335.413 7.897 cv
334.847 8.569 334.336 9.13303 333.884 9.58301 cv
333.818 9.651 333.73 9.66302 333.622 9.62601 cv
333.509 9.58502 333.438 9.59302 333.413 9.64502 cv
333.408 9.79401 333.504 9.93002 333.703 10.048 cv
334.607 10.903 li
334.754 11.077 334.937 11.182 335.151 11.221 cv
335.349 11.257 335.541 11.233 335.724 11.147 cv
335.908 11.065 336.039 10.941 336.123 10.778 cv
336.211 10.599 336.216 10.408 336.142 10.199 cv
336.109 10.089 336.054 9.97501 335.974 9.86203 cv
335.865 9.72101 li
336.099 9.79703 li
336.273 9.84302 336.404 9.86002 336.494 9.84601 cv
336.64 9.82901 336.763 9.77402 336.862 9.68802 cv
336.958 9.60501 337.023 9.50302 337.058 9.37701 cv
337.095 9.25101 337.098 9.11801 337.068 8.979 cv
337.911 10.094 mo
337.906 9.90201 337.996 9.87201 338.182 10.003 cv
339.405 11.482 li
339.551 11.567 339.609 11.641 339.582 11.704 cv
339.494 11.888 339.367 12.044 339.201 12.175 cv
339.108 12.2 339.051 12.182 339.028 12.119 cv
339.009 12.058 339.025 11.977 339.07 11.875 cv
339.113 11.782 339.111 11.669 339.06 11.532 cv
338.562 10.924 li
338.535 10.901 338.509 10.882 338.484 10.868 cv
338.404 10.823 338.324 10.831 338.248 10.896 cv
338.062 11.005 337.865 11.145 337.662 11.316 cv
337.593 11.369 337.59 11.425 337.639 11.485 cv
337.951 11.875 li
338.004 11.956 338.072 11.991 338.152 11.98 cv
338.197 11.975 338.271 11.945 338.371 11.888 cv
338.414 11.86 338.455 11.843 338.484 11.832 cv
338.515 11.825 338.537 11.825 338.557 11.829 cv
338.595 11.845 338.621 11.864 338.635 11.892 cv
338.648 11.921 338.642 11.95 338.618 11.98 cv
338.578 12.036 338.533 12.087 338.484 12.137 cv
338.258 12.384 337.974 12.587 337.632 12.751 cv
337.611 12.761 337.592 12.751 337.572 12.716 cv
337.551 12.682 337.551 12.649 337.572 12.62 cv
337.752 12.348 li
337.812 12.274 337.815 12.194 337.762 12.111 cv
337.367 11.663 li
337.335 11.636 337.277 11.645 337.191 11.696 cv
336.562 12.272 li
336.515 12.343 336.502 12.405 336.527 12.462 cv
336.703 12.722 336.894 12.964 337.101 13.18 cv
337.181 13.268 337.297 13.302 337.451 13.271 cv
337.742 13.219 li
337.865 13.214 li
337.964 13.233 337.943 13.313 337.808 13.455 cv
337.596 13.634 337.383 13.737 337.162 13.766 cv
337.086 13.787 337.038 13.766 337.023 13.702 cv
337.015 13.651 336.993 13.596 336.953 13.536 cv
336.49 13.002 336.142 12.585 335.914 12.288 cv
335.77 12.101 335.689 11.983 335.667 11.928 cv
335.629 11.835 335.667 11.784 335.777 11.774 cv
335.841 11.764 335.898 11.784 335.951 11.829 cv
335.992 11.854 336.032 11.852 336.077 11.825 cv
336.409 11.636 337.02 11.147 337.911 10.366 cv
337.946 10.317 337.957 10.274 337.939 10.231 cv
337.911 10.094 li
340.623 14.207 mo
340.586 14.338 340.519 14.446 340.424 14.532 cv
340.331 14.614 340.208 14.652 340.059 14.639 cv
339.911 14.625 339.765 14.555 339.627 14.421 cv
339.506 14.278 339.405 14.109 339.322 13.913 cv
340.179 13.423 li
340.324 13.327 340.467 13.455 340.607 13.802 cv
340.658 13.935 340.66 14.069 340.623 14.207 cv
341.023 14.011 mo
341.02 14.003 341.015 13.996 341.009 13.988 cv
340.754 13.501 340.449 13.014 340.099 12.529 cv
339.949 12.436 339.879 12.483 339.885 12.673 cv
339.908 12.778 li
339.916 12.833 339.888 12.876 339.828 12.903 cv
339.4 13.231 338.953 13.52 338.484 13.774 cv
338.281 13.883 338.074 13.988 337.863 14.084 cv
337.81 14.116 337.758 14.122 337.705 14.098 cv
337.536 13.991 li
337.498 13.983 337.466 13.996 337.435 14.034 cv
337.41 14.066 337.398 14.096 337.405 14.124 cv
337.433 14.28 337.501 14.444 337.611 14.61 cv
337.715 14.77 337.843 14.917 337.992 15.048 cv
338.072 15.042 338.12 15.01 338.137 14.952 cv
338.115 14.756 li
338.105 14.703 338.125 14.657 338.176 14.625 cv
338.278 14.552 338.381 14.481 338.484 14.413 cv
338.638 14.313 338.791 14.218 338.942 14.127 cv
339.006 14.079 339.06 14.087 339.111 14.144 cv
339.289 14.398 339.365 14.617 339.343 14.804 cv
339.324 14.931 339.226 15.097 339.043 15.309 cv
338.91 15.463 338.834 15.548 338.819 15.571 cv
338.734 15.671 338.671 15.766 338.628 15.852 cv
338.57 16.013 338.572 16.165 338.633 16.305 cv
338.693 16.441 338.801 16.55 338.96 16.636 cv
339.038 16.647 339.098 16.633 339.138 16.59 cv
339.176 16.547 339.176 16.505 339.131 16.464 cv
339.051 16.388 339.033 16.298 339.078 16.192 cv
339.123 16.084 339.239 15.948 339.423 15.784 cv
339.511 15.688 339.574 15.616 339.609 15.565 cv
339.667 15.487 339.707 15.402 339.73 15.314 cv
339.75 15.236 339.758 15.171 339.752 15.118 cv
339.745 15.065 339.722 15.007 339.684 14.944 cv
339.667 14.899 339.681 14.887 339.73 14.909 cv
339.914 15.057 340.105 15.138 340.306 15.145 cv
340.49 15.155 340.653 15.105 340.799 14.997 cv
340.889 14.931 340.96 14.851 341.009 14.759 cv
341.041 14.703 341.062 14.645 341.081 14.582 cv
341.129 14.395 341.108 14.207 341.023 14.011 cv
332.578 5.34802 mo
332.578 5.35602 li
332.578 5.39301 332.56 5.41901 332.527 5.42902 cv
332.502 5.43402 332.452 5.431 332.371 5.41901 cv
332.311 5.40701 332.271 5.414 332.256 5.44202 cv
331.863 5.95502 331.461 6.60101 331.049 7.37903 cv
331.006 7.43402 331.006 7.51001 331.049 7.60501 cv
331.068 7.66302 331.261 7.80002 331.627 8.009 cv
331.738 8.02301 331.838 8.02301 331.929 8.009 cv
332.332 7.806 li
332.455 7.77902 332.505 7.82901 332.482 7.95801 cv
332.329 8.22702 332.137 8.43802 331.904 8.58701 cv
331.848 8.60602 331.799 8.58102 331.753 8.51102 cv
331.705 8.44302 331.644 8.39301 331.576 8.36002 cv
330.093 7.45401 li
330.021 7.41702 330.002 7.36603 330.035 7.30402 cv
330.067 7.24103 330.142 7.21301 330.259 7.22302 cv
330.316 7.22702 330.357 7.22702 330.379 7.22302 cv
330.42 7.216 330.447 7.19202 330.463 7.15503 cv
330.857 6.58102 331.222 5.98001 331.556 5.34802 cv
331.587 5.28802 331.619 5.22501 331.652 5.16501 cv
331.703 5.11203 331.668 5.01401 331.544 4.87402 cv
331.539 4.841 331.547 4.81302 331.564 4.78201 cv
331.587 4.75302 331.615 4.73502 331.652 4.729 cv
332.017 4.87601 332.311 5.052 332.535 5.26102 cv
332.562 5.28302 332.576 5.31302 332.578 5.34802 cv
334.163 6.73203 mo
334.15 6.71201 334.142 6.69202 334.14 6.68002 cv
334.059 6.50702 li
334.024 6.40503 334.085 6.36002 334.238 6.37302 cv
334.379 6.453 334.505 6.53601 334.623 6.62402 cv
334.761 6.72501 334.894 6.83603 335.025 6.95901 cv
335.058 7.022 335.068 7.07202 335.049 7.11203 cv
335.033 7.14502 334.998 7.16 334.937 7.15701 cv
334.886 7.15701 334.822 7.15503 334.744 7.15302 cv
334.685 7.15302 334.643 7.17102 334.615 7.19803 cv
334.183 7.70401 333.72 8.315 333.224 9.03201 cv
333.197 9.08301 333.181 9.11002 333.181 9.11801 cv
333.172 9.15002 333.176 9.18002 333.201 9.20801 cv
333.282 9.311 333.302 9.38702 333.261 9.43903 cv
333.226 9.48703 333.156 9.49503 333.053 9.46503 cv
332.781 9.30402 332.53 9.10202 332.301 8.85602 cv
332.286 8.80502 332.291 8.76501 332.316 8.733 cv
332.342 8.694 332.384 8.68002 332.442 8.69 cv
332.611 8.71002 li
332.661 8.70502 332.701 8.68201 332.728 8.64902 cv
333.242 8.07602 333.715 7.46002 334.15 6.80002 cv
334.168 6.77502 334.17 6.75302 334.163 6.73203 cv
342.564 19.565 mo
341.624 20.318 li
341.342 19.399 li
342.543 19.498 li
342.578 19.511 342.586 19.533 342.564 19.565 cv
343.34 19.286 mo
343.3 19.206 343.25 19.179 343.196 19.201 cv
343.136 19.214 342.64 19.186 341.71 19.12 cv
341.244 19.088 340.784 19.055 340.331 19.02 cv
340.195 18.934 340.074 18.841 339.967 18.741 cv
339.876 18.718 339.826 18.759 339.818 18.862 cv
339.841 19.02 339.879 19.179 339.931 19.335 cv
339.933 19.337 339.933 19.34 339.933 19.34 cv
339.943 19.367 339.953 19.392 339.964 19.417 cv
340.011 19.548 340.072 19.677 340.142 19.803 cv
340.187 19.83 340.228 19.833 340.265 19.812 cv
340.31 19.788 340.336 19.721 340.334 19.622 cv
340.334 19.619 340.334 19.619 340.336 19.616 cv
340.336 19.561 340.345 19.513 340.363 19.475 cv
340.381 19.44 340.406 19.413 340.437 19.392 cv
340.447 19.385 340.457 19.38 340.469 19.375 cv
340.562 19.329 340.701 19.329 340.884 19.375 cv
341.015 19.498 li
341.129 19.764 341.239 20.122 341.342 20.567 cv
341.218 20.716 341.062 20.831 340.872 20.915 cv
340.822 20.93 340.779 20.917 340.748 20.884 cv
340.695 20.802 340.653 20.746 340.623 20.723 cv
340.537 20.65 340.472 20.682 340.431 20.819 cv
340.494 21.214 340.61 21.579 340.787 21.908 cv
340.829 21.958 340.875 21.976 340.92 21.969 cv
340.968 21.958 341 21.919 341.017 21.85 cv
341.008 21.774 341.006 21.724 341.009 21.702 cv
341.02 21.637 341.058 21.563 341.121 21.485 cv
341.44 21.201 341.893 20.811 342.479 20.315 cv
343.066 19.82 343.365 19.546 343.381 19.491 cv
343.392 19.43 343.381 19.362 343.34 19.286 cv
309.468 38.51 mo
308.549 37.283 li
319.716 36.582 mo
319.728 41.763 li
312.427 41.461 mo
311.054 40.239 li
319.398 45.761 mo
319.388 45.046 li
319.722 46.337 mo
319.73 45.972 li
319.406 46.337 mo
319.401 45.942 li
319.736 45.75 mo
319.754 45.046 li
319.471 42.133 mo
319.471 41.902 li
323.853 33.674 mo
323.824 33.78 323.756 33.85 323.655 33.889 cv
323.665 33.91 li
323.869 33.677 mo
323.853 33.674 li
318.624 40.08 mo
318.627 40.151 318.601 40.193 318.549 40.205 cv
318.472 40.226 318.39 40.234 318.297 40.229 cv
318.252 40.221 318.217 40.188 318.196 40.13 cv
318.185 39.942 318.223 39.758 318.301 39.581 cv
318.437 39.516 318.528 39.539 318.574 39.653 cv
318.621 39.795 318.638 39.939 318.624 40.08 cv
319.079 41.013 mo
318.961 40.657 318.865 40.239 318.8 39.763 cv
318.804 39.572 318.906 39.479 319.101 39.487 cv
319.203 39.26 li
317.542 39.31 li
317.545 39.385 317.562 39.439 317.597 39.469 cv
317.627 39.496 317.677 39.509 317.746 39.504 cv
317.797 39.501 317.834 39.522 317.853 39.564 cv
317.877 39.605 317.879 39.653 317.869 39.712 cv
317.542 40.971 li
317.517 41.112 317.441 41.204 317.316 41.247 cv
317.366 41.348 li
317.894 41.323 li
318.045 40.744 li
318.088 40.472 318.299 40.371 318.674 40.442 cv
318.951 41.399 li
319.302 41.348 li
319.345 41.182 li
319.213 41.202 319.125 41.147 319.079 41.013 cv
314.697 29.846 mo
315.037 29.825 315.215 29.891 315.238 30.041 cv
315.25 30.137 315.232 30.21 315.182 30.258 cv
315.139 30.301 315.051 30.338 314.924 30.373 cv
314.812 30.414 314.737 30.394 314.697 30.311 cv
cp
314.068 31.405 mo
314.093 31.506 li
314.672 31.43 li
314.697 30.651 li
314.726 30.62 314.769 30.613 314.82 30.63 cv
314.863 30.643 314.9 30.668 314.927 30.703 cv
314.945 30.729 314.999 30.844 315.087 31.051 cv
315.122 31.106 315.162 31.168 315.205 31.242 cv
315.238 31.291 315.267 31.33 315.293 31.35 cv
315.358 31.403 315.401 31.43 315.416 31.433 cv
315.572 31.46 315.733 31.468 315.904 31.455 cv
315.754 31.363 315.634 31.219 315.552 31.02 cv
315.509 30.905 315.476 30.819 315.454 30.761 cv
315.412 30.659 315.369 30.571 315.323 30.499 cv
315.479 30.324 315.567 30.164 315.595 30.022 cv
315.62 29.878 315.582 29.762 315.476 29.672 cv
315.248 29.473 314.777 29.436 314.068 29.553 cv
314.068 29.695 li
314.218 29.701 314.295 29.785 314.295 29.946 cv
314.269 31.128 li
314.261 31.256 314.196 31.348 314.068 31.405 cv
315.98 33.09 mo
315.853 33.342 li
316.131 33.342 li
316.281 33.619 li
316.432 33.342 li
316.734 33.367 li
316.584 33.09 li
316.734 32.839 li
316.432 32.839 li
316.281 32.537 li
316.131 32.839 li
315.829 32.839 li
cp
314.269 33.569 mo
314.244 33.418 li
314.068 33.292 li
313.892 33.946 li
314.32 33.996 li
314.297 33.963 314.297 33.936 314.32 33.916 cv
314.908 34.034 315.25 33.936 315.345 33.621 cv
315.386 33.41 315.388 33.246 315.353 33.131 cv
315.326 33.034 315.263 32.957 315.172 32.909 cv
315.111 32.877 315.011 32.847 314.863 32.817 cv
314.699 32.779 314.576 32.746 314.496 32.713 cv
314.41 32.659 314.359 32.585 314.342 32.494 cv
314.327 32.409 314.342 32.333 314.387 32.263 cv
314.432 32.193 314.498 32.153 314.578 32.145 cv
314.672 32.137 314.769 32.175 314.873 32.26 cv
314.818 32.437 li
315.074 32.437 li
315.224 31.934 li
314.949 31.959 li
314.906 32.022 li
314.697 31.974 314.528 31.953 314.397 31.959 cv
314.266 31.966 314.156 32.022 314.065 32.132 cv
313.972 32.241 313.934 32.376 313.947 32.539 cv
313.963 32.701 314.093 32.826 314.342 32.917 cv
314.589 33.005 314.758 33.116 314.845 33.252 cv
314.93 33.383 314.941 33.496 314.873 33.594 cv
314.672 33.707 314.47 33.698 314.269 33.569 cv
318.295 37.367 mo
318.672 37.335 li
318.767 37.385 318.83 37.441 318.863 37.501 cv
318.89 37.559 318.888 37.612 318.853 37.664 cv
318.779 37.778 318.619 37.838 318.369 37.846 cv
318.309 37.828 318.284 37.667 318.295 37.367 cv
319.023 38.349 mo
319.064 38.531 319.004 38.649 318.847 38.701 cv
318.638 38.829 318.47 38.81 318.344 38.651 cv
318.319 38.122 li
318.578 38.082 318.814 38.158 319.023 38.349 cv
318.973 39.003 mo
319.084 38.97 319.17 38.906 319.232 38.804 cv
319.291 38.711 319.32 38.606 319.32 38.485 cv
319.32 38.365 319.293 38.253 319.235 38.156 cv
319.172 38.044 319.084 37.966 318.973 37.921 cv
319.353 37.559 319.328 37.257 318.898 37.021 cv
317.867 37.081 li
317.894 37.131 317.902 37.182 317.886 37.242 cv
317.941 37.242 li
318.017 37.242 318.052 37.275 318.043 37.343 cv
317.992 38.651 li
317.977 38.769 317.92 38.863 317.816 38.928 cv
317.867 39.003 li
cp
317.182 37.337 mo
317.182 38.671 li
317.175 38.807 317.099 38.882 316.956 38.898 cv
317.082 39.074 li
317.685 38.998 li
317.677 38.96 317.683 38.922 317.703 38.88 cv
317.725 38.834 317.738 38.802 317.736 38.782 cv
317.634 38.772 li
317.577 38.754 317.542 38.721 317.535 38.671 cv
317.559 37.363 li
317.556 37.257 317.617 37.182 317.736 37.136 cv
317.736 37.01 li
317.031 37.035 li
317.031 37.187 li
317.109 37.189 317.16 37.24 317.182 37.337 cv
315.602 38.978 mo
315.677 39.078 li
316.86 39.029 li
317.087 38.349 li
316.9 38.638 316.732 38.822 316.584 38.903 cv
316.508 38.933 316.432 38.933 316.357 38.903 cv
316.181 38.751 li
316.207 37.318 li
316.199 37.206 316.249 37.141 316.357 37.117 cv
316.408 36.965 li
315.652 37.066 li
315.703 37.242 li
315.754 37.227 315.786 37.244 315.803 37.292 cv
315.779 38.676 li
315.783 38.822 315.722 38.922 315.602 38.978 cv
316.131 31.506 mo
316.257 31.682 li
316.86 31.606 li
316.85 31.569 316.855 31.532 316.875 31.489 cv
316.9 31.443 316.91 31.41 316.91 31.39 cv
316.81 31.38 li
316.75 31.363 316.717 31.33 316.709 31.28 cv
316.734 29.971 li
316.732 29.866 316.79 29.789 316.91 29.744 cv
316.91 29.619 li
316.207 29.644 li
316.207 29.795 li
316.281 29.797 316.332 29.848 316.357 29.946 cv
316.357 31.28 li
316.347 31.415 316.271 31.491 316.131 31.506 cv
326.447 29.757 mo
326.46 29.752 326.492 29.754 326.543 29.762 cv
326.601 29.77 326.646 29.78 326.681 29.795 cv
326.707 31.355 li
326.689 31.498 326.595 31.584 326.429 31.606 cv
326.429 31.682 li
327.234 31.682 li
327.232 31.647 327.237 31.606 327.255 31.556 cv
327.272 31.498 327.285 31.455 327.285 31.43 cv
327.189 31.401 327.121 31.352 327.084 31.287 cv
327.084 29.821 li
327.252 29.789 327.375 29.789 327.456 29.821 cv
327.541 29.85 327.584 29.918 327.587 30.022 cv
327.738 30.047 li
327.748 29.987 327.74 29.903 327.715 29.797 cv
327.693 29.707 327.693 29.639 327.713 29.594 cv
326.052 29.594 li
326.072 29.631 326.072 29.701 326.054 29.803 cv
326.037 29.903 326.045 29.984 326.078 30.047 cv
326.254 30.047 li
326.261 29.969 326.289 29.906 326.34 29.853 cv
326.394 29.805 326.429 29.775 326.447 29.757 cv
322.694 29.856 mo
323.222 31.541 li
323.524 31.617 li
323.574 31.541 li
323.424 31.39 li
324.052 29.83 li
324.113 29.77 324.156 29.727 324.185 29.704 cv
324.234 29.669 324.294 29.644 324.365 29.629 cv
324.389 29.545 li
323.799 29.541 li
323.877 29.655 li
323.398 30.836 li
323.021 29.578 li
322.442 29.578 li
322.442 29.73 li
322.573 29.715 322.656 29.757 322.694 29.856 cv
323.172 32.102 mo
323.149 32.012 323.149 31.944 323.17 31.899 cv
321.607 31.899 li
321.627 31.936 321.627 32.006 321.609 32.108 cv
321.592 32.207 321.599 32.288 321.633 32.351 cv
321.808 32.351 li
321.816 32.274 321.843 32.207 321.894 32.158 cv
321.914 32.137 321.931 32.119 321.947 32.097 cv
321.969 32.062 li
321.982 32.057 322.015 32.059 322.065 32.067 cv
322.123 32.075 322.168 32.084 322.203 32.1 cv
322.228 33.659 li
322.211 33.803 322.118 33.889 321.952 33.91 cv
321.952 33.987 li
322.757 33.987 li
322.754 33.951 322.759 33.91 322.777 33.861 cv
322.795 33.803 322.806 33.76 322.806 33.735 cv
322.712 33.704 322.643 33.657 322.605 33.592 cv
322.605 32.125 li
322.744 32.1 322.847 32.1 322.913 32.125 cv
322.998 32.155 323.041 32.223 323.044 32.326 cv
323.195 32.351 li
323.205 32.288 323.197 32.205 323.172 32.102 cv
324.316 29.775 mo
324.238 29.883 324.206 30.019 324.217 30.182 cv
324.228 30.344 324.34 30.469 324.552 30.56 cv
324.764 30.648 324.908 30.758 324.983 30.895 cv
325.056 31.026 325.064 31.139 325.006 31.237 cv
324.835 31.35 324.664 31.34 324.49 31.211 cv
324.47 31.061 li
324.319 30.935 li
324.168 31.588 li
324.533 31.639 li
324.515 31.606 324.515 31.578 324.533 31.559 cv
325.036 31.677 325.328 31.578 325.411 31.264 cv
325.446 31.053 325.446 30.889 325.418 30.774 cv
325.393 30.676 325.34 30.6 325.262 30.552 cv
325.213 30.52 325.124 30.49 324.998 30.459 cv
324.857 30.421 324.754 30.389 324.683 30.356 cv
324.613 30.301 324.568 30.228 324.552 30.137 cv
324.541 30.051 324.552 29.977 324.591 29.906 cv
324.631 29.835 324.686 29.795 324.757 29.787 cv
324.835 29.78 324.918 29.818 325.006 29.903 cv
324.961 30.079 li
325.179 30.079 li
325.308 29.576 li
325.071 29.602 li
325.033 29.664 li
324.857 29.617 324.711 29.596 324.601 29.602 cv
324.49 29.609 324.394 29.664 324.316 29.775 cv
327.484 32.754 mo
327.181 32.754 li
327.333 33.005 li
327.207 33.257 li
327.484 33.257 li
327.634 33.534 li
327.785 33.257 li
328.088 33.282 li
327.936 33.005 li
328.088 32.754 li
327.785 32.754 li
327.634 32.451 li
cp
321.633 31.486 mo
321.758 31.662 li
322.362 31.586 li
322.351 31.549 322.357 31.51 322.377 31.468 cv
322.402 31.422 322.412 31.39 322.412 31.369 cv
322.311 31.36 li
322.252 31.342 322.218 31.309 322.211 31.259 cv
322.236 29.951 li
322.234 29.846 322.291 29.77 322.412 29.725 cv
322.412 29.599 li
321.708 29.623 li
321.708 29.775 li
321.783 29.778 321.834 29.827 321.859 29.926 cv
321.859 31.259 li
321.849 31.395 321.773 31.471 321.633 31.486 cv
327.834 31.453 mo
327.959 31.629 li
328.562 31.553 li
328.552 31.518 328.558 31.479 328.578 31.438 cv
328.603 31.39 328.613 31.358 328.613 31.34 cv
328.512 31.327 li
328.452 31.313 328.42 31.277 328.412 31.227 cv
328.437 29.918 li
328.434 29.815 328.492 29.74 328.613 29.692 cv
328.613 29.567 li
327.909 29.591 li
327.909 29.742 li
327.984 29.747 328.035 29.797 328.06 29.893 cv
328.06 31.227 li
328.05 31.366 327.974 31.44 327.834 31.453 cv
322.42 37.297 mo
322.759 37.278 322.937 37.345 322.961 37.496 cv
322.972 37.592 322.955 37.662 322.905 37.71 cv
322.863 37.755 322.774 37.793 322.646 37.826 cv
322.535 37.868 322.46 37.848 322.42 37.763 cv
cp
321.791 38.847 mo
321.816 38.948 li
322.394 38.872 li
322.42 38.092 li
322.45 38.065 322.492 38.057 322.543 38.075 cv
322.586 38.087 322.623 38.113 322.651 38.148 cv
322.669 38.17 322.721 38.288 322.81 38.495 cv
322.845 38.548 322.884 38.611 322.927 38.684 cv
322.961 38.737 322.991 38.772 323.015 38.794 cv
323.082 38.847 323.125 38.875 323.138 38.877 cv
323.295 38.906 323.457 38.91 323.627 38.898 cv
323.476 38.807 323.358 38.661 323.275 38.465 cv
323.232 38.349 323.199 38.263 323.177 38.205 cv
323.134 38.1 323.092 38.014 323.047 37.942 cv
323.202 37.768 323.291 37.61 323.318 37.466 cv
323.343 37.323 323.305 37.206 323.199 37.117 cv
322.97 36.917 322.5 36.877 321.791 36.998 cv
321.791 37.136 li
321.941 37.147 322.017 37.23 322.017 37.388 cv
321.992 38.571 li
321.984 38.699 321.92 38.792 321.791 38.847 cv
339.727 27.078 mo
338.939 24.542 337.936 22.633 336.714 21.345 cv
337.194 19.923 337.547 18.688 337.77 17.632 cv
339.151 20.497 339.802 23.644 339.727 27.078 cv
339.762 22.484 mo
339.592 21.392 339.295 20.293 338.869 19.18 cv
338.527 18.28 338.082 17.327 337.531 16.317 cv
337.418 17.073 337.234 17.903 336.985 18.805 cv
336.789 19.513 336.522 20.358 336.187 21.345 cv
337.264 22.693 338.097 24.077 338.683 25.5 cv
339.285 26.954 339.609 28.485 339.657 30.084 cv
339.974 28.768 340.119 27.428 340.094 26.067 cv
340.077 24.977 339.967 23.785 339.762 22.484 cv
340.884 19.375 mo
341.015 19.498 li
340.988 19.425 340.945 19.385 340.884 19.375 cv
338.625 31.949 mo
338.452 33.096 338.127 34.193 337.652 35.242 cv
337.174 36.291 336.676 37.187 336.158 37.929 cv
335.636 38.671 334.816 39.433 333.7 40.213 cv
332.58 40.993 331.371 41.592 330.07 42.01 cv
328.769 42.425 327.459 42.634 326.142 42.634 cv
326.498 42.369 326.847 42.095 327.184 41.808 cv
327.984 41.758 328.822 41.612 329.697 41.375 cv
330.57 41.137 331.523 40.692 332.554 40.037 cv
333.587 39.383 334.482 38.59 335.244 37.662 cv
336.004 36.731 336.615 35.712 337.078 34.603 cv
337.539 33.493 337.815 32.366 337.911 31.227 cv
338.007 30.084 337.949 28.962 337.734 27.86 cv
337.523 26.758 337.151 25.709 336.615 24.714 cv
336.115 23.778 335.395 22.774 334.463 21.7 cv
335.48 21.672 li
336.342 22.532 337.033 23.52 337.551 24.638 cv
338.072 25.754 338.424 26.959 338.613 28.255 cv
338.799 29.549 338.804 30.779 338.625 31.949 cv
324.988 42.669 mo
324.892 42.729 324.795 42.789 324.699 42.847 cv
324.643 42.882 324.588 42.915 324.535 42.946 cv
314.606 42.946 li
314.146 42.669 313.701 42.379 313.265 42.08 cv
313.093 41.962 312.926 41.843 312.759 41.723 cv
313.864 41.725 li
314.528 41.725 li
314.525 41.899 314.525 42.03 314.528 42.113 cv
314.528 42.183 li
314.536 42.325 314.546 42.438 314.558 42.528 cv
314.568 42.616 314.611 42.687 314.681 42.737 cv
314.752 42.789 314.976 42.807 315.351 42.792 cv
315.728 42.777 316.129 42.74 316.558 42.676 cv
316.986 42.611 317.457 42.531 317.972 42.43 cv
318.135 42.397 318.332 42.357 318.558 42.309 cv
318.715 42.279 318.825 42.261 318.888 42.259 cv
318.93 42.259 318.959 42.266 318.973 42.288 cv
318.98 42.299 318.996 42.325 319.015 42.357 cv
319.076 42.427 319.256 42.462 319.547 42.465 cv
319.567 42.465 li
319.859 42.462 320.037 42.427 320.097 42.36 cv
320.118 42.325 320.135 42.301 320.153 42.288 cv
320.168 42.279 320.196 42.266 320.236 42.256 cv
320.273 42.243 320.384 42.251 320.563 42.277 cv
320.739 42.301 321.029 42.347 321.426 42.412 cv
321.826 42.475 322.244 42.543 322.679 42.611 cv
323.114 42.681 323.449 42.719 323.679 42.729 cv
324.002 42.74 324.201 42.746 324.279 42.744 cv
324.357 42.744 324.418 42.689 324.46 42.576 cv
324.5 42.465 324.523 42.354 324.531 42.242 cv
324.535 42.13 324.535 41.951 324.533 41.707 cv
326.361 41.707 li
325.919 42.047 325.461 42.367 324.988 42.669 cv
329.793 43.456 mo
327.307 44.885 324.656 45.769 321.839 46.098 cv
322.465 45.487 323.021 44.827 323.513 44.12 cv
323.874 43.967 324.226 43.793 324.568 43.6 cv
326.183 43.862 327.924 43.814 329.793 43.456 cv
319.554 44.452 mo
317.888 44.322 316.383 43.909 315.037 43.209 cv
324.057 43.209 li
322.712 43.911 321.21 44.326 319.554 44.452 cv
319.736 45.75 mo
319.754 45.046 li
320.113 45.014 320.465 44.968 320.81 44.91 cv
320.468 45.295 320.11 45.577 319.736 45.75 cv
319.722 46.337 mo
319.73 45.972 li
320.266 45.72 320.699 45.353 321.031 44.872 cv
321.222 44.835 321.411 44.794 321.597 44.749 cv
321.031 45.447 320.407 45.975 319.722 46.337 cv
318.362 44.915 mo
318.697 44.971 319.039 45.014 319.388 45.046 cv
319.398 45.761 li
318.867 45.471 318.523 45.187 318.362 44.915 cv
317.57 44.757 mo
317.733 44.794 317.902 44.83 318.07 44.863 cv
318.076 44.863 318.078 44.863 318.08 44.866 cv
318.42 45.353 318.86 45.713 319.401 45.942 cv
319.406 46.337 li
318.747 45.972 318.133 45.444 317.57 44.757 cv
317.245 46.077 mo
314.443 45.72 311.869 44.848 309.525 43.453 cv
311.253 43.771 312.951 43.833 314.627 43.637 cv
314.949 43.816 315.281 43.977 315.62 44.123 cv
cp
309.154 41.977 mo
307.852 41.559 306.642 40.96 305.525 40.181 cv
304.406 39.398 303.586 38.638 303.067 37.896 cv
302.547 37.154 302.049 36.258 301.573 35.209 cv
301.094 34.16 300.77 33.063 300.596 31.916 cv
300.419 30.746 300.424 29.516 300.609 28.223 cv
300.799 26.927 301.15 25.722 301.671 24.605 cv
302.189 23.488 302.881 22.499 303.741 21.639 cv
304.76 21.667 li
303.827 22.741 303.11 23.745 302.607 24.68 cv
302.074 25.676 301.699 26.725 301.487 27.827 cv
301.273 28.93 301.216 30.051 301.311 31.194 cv
301.407 32.333 301.683 33.461 302.144 34.571 cv
302.607 35.68 303.218 36.699 303.978 37.629 cv
304.74 38.558 305.635 39.35 306.667 40.004 cv
307.698 40.659 308.652 41.104 309.527 41.343 cv
310.4 41.579 311.211 41.733 311.955 41.798 cv
312.027 41.856 312.1 41.916 312.174 41.977 cv
312.458 42.201 312.748 42.417 313.041 42.628 cv
311.751 42.609 310.453 42.392 309.154 41.977 cv
302.471 16.31 mo
303.326 16.788 li
303.699 18.305 304.176 19.795 304.76 21.259 cv
303.854 21.191 li
303.213 19.518 302.753 17.89 302.471 16.31 cv
305.218 15.053 mo
305.213 15.932 li
304.614 16.052 304.046 16.227 303.509 16.454 cv
302.577 15.913 li
303.276 15.608 304.156 15.321 305.218 15.053 cv
303.905 16.813 mo
304.315 16.607 304.75 16.473 305.213 16.411 cv
305.193 20.965 li
304.521 19.38 304.092 17.996 303.905 16.813 cv
305.409 31.249 mo
305.605 32.306 305.9 33.299 306.29 34.228 cv
307.107 36.172 308.212 37.939 309.603 39.522 cv
310.176 40.175 310.785 40.784 311.429 41.353 cv
310.896 41.27 310.302 41.134 309.648 40.946 cv
308.992 40.757 308.167 40.371 307.165 39.795 cv
306.164 39.219 305.271 38.467 304.486 37.549 cv
303.699 36.628 303.1 35.7 302.687 34.759 cv
302.275 33.821 301.991 32.807 301.832 31.722 cv
301.676 30.638 301.669 29.553 301.817 28.467 cv
301.963 27.379 302.355 26.2 302.992 24.925 cv
303.631 23.649 304.363 22.661 305.19 21.961 cv
305.163 28.563 li
305.153 29.412 305.236 30.309 305.409 31.249 cv
303.415 14.31 mo
303.843 13.688 304.446 12.974 305.228 12.169 cv
305.22 13.913 li
304.732 13.948 304.129 14.081 303.415 14.31 cv
310.008 23.134 mo
309.738 23.138 309.543 23.11 309.414 23.054 cv
309.508 23.025 309.615 23.005 309.736 22.99 cv
309.733 22.99 309.765 23.005 309.829 23.036 cv
309.91 23.073 309.97 23.106 310.008 23.134 cv
310.269 22.615 mo
309.942 22.615 li
309.791 22.514 li
309.992 22.489 li
cp
309.824 18.851 mo
309.597 18.851 li
309.465 18.751 li
309.66 18.753 309.781 18.786 309.824 18.851 cv
310.798 21.77 mo
310.924 21.77 li
311.074 21.921 li
310.973 21.89 310.881 21.841 310.798 21.77 cv
310.317 22.077 mo
310.242 22.026 li
310.443 22.001 li
310.649 22.095 li
cp
310.903 27.171 mo
310.89 27.151 310.855 27.125 310.804 27.093 cv
310.684 27.02 310.624 26.94 310.621 26.854 cv
310.603 26.439 310.596 26.129 310.606 25.923 cv
310.641 25.795 310.695 25.742 310.759 25.757 cv
310.82 25.775 310.918 25.863 311.054 26.024 cv
311.165 26.157 311.193 26.456 311.136 26.922 cv
311.013 27.055 310.994 27.151 311.074 27.206 cv
311.168 27.291 311.203 27.372 311.185 27.446 cv
311.17 27.506 311.122 27.551 311.039 27.574 cv
310.961 27.598 310.885 27.594 310.812 27.556 cv
310.73 27.518 310.679 27.45 310.659 27.352 cv
310.636 27.294 310.717 27.266 310.898 27.272 cv
310.924 27.234 310.926 27.201 310.903 27.171 cv
311.578 21.997 mo
311.377 21.795 li
311.532 21.831 li
cp
311.027 17.657 mo
311.047 17.681 311.094 17.694 311.176 17.694 cv
311.288 17.675 311.377 17.669 311.441 17.679 cv
311.562 17.694 311.593 17.757 311.527 17.87 cv
311.467 18.046 311.449 18.227 311.472 18.419 cv
311.176 18.675 li
311.16 18.696 311.187 18.741 311.26 18.805 cv
311.338 18.88 311.377 18.934 311.377 18.977 cv
311.379 19.003 311.359 19.032 311.308 19.063 cv
311.258 19.098 311.228 19.136 311.225 19.179 cv
311.22 19.216 311.235 19.271 311.27 19.34 cv
311.305 19.413 311.324 19.468 311.326 19.503 cv
311.326 20.462 li
311.301 20.471 311.283 20.534 311.27 20.65 cv
311.258 20.778 311.258 20.932 311.27 21.11 cv
311.278 21.223 311.267 21.36 311.238 21.516 cv
311.215 21.649 311.211 21.75 311.225 21.82 cv
311.049 21.707 310.863 21.679 310.662 21.739 cv
310.745 21.835 310.798 21.948 310.818 22.074 cv
310.74 21.979 310.662 21.946 310.586 21.976 cv
310.455 19.148 li
310.571 18.625 li
310.504 18.577 310.468 18.522 310.466 18.462 cv
310.466 18.416 310.483 18.363 310.518 18.298 cv
310.576 18.202 310.603 18.152 310.603 18.147 cv
310.627 18.095 310.624 18.052 310.596 18.021 cv
310.32 17.971 li
310.3 17.888 310.309 17.83 310.352 17.792 cv
310.383 17.764 310.433 17.747 310.506 17.734 cv
310.589 17.721 310.638 17.71 310.654 17.702 cv
310.691 17.681 310.697 17.643 310.672 17.594 cv
310.143 17.468 li
310.088 17.417 310.055 17.372 310.051 17.332 cv
310.045 17.304 310.052 17.271 310.076 17.229 cv
310.105 17.173 310.123 17.136 310.129 17.113 cv
310.143 17.059 310.138 17.003 310.119 16.939 cv
310.129 16.915 310.154 16.907 310.193 16.915 cv
310.214 16.919 310.259 16.934 310.327 16.962 cv
310.472 17.02 310.582 17.038 310.652 17.014 cv
310.676 17.153 310.705 17.225 310.73 17.233 cv
310.762 17.241 310.83 17.183 310.933 17.055 cv
311.031 16.989 311.168 16.968 311.342 16.989 cv
311.371 16.992 311.396 16.997 311.419 17 cv
311.467 17.005 311.5 17.007 311.514 17.007 cv
311.575 17.007 311.62 16.992 311.652 16.965 cv
311.73 16.896 311.791 16.861 311.834 16.856 cv
311.867 16.854 311.892 16.839 311.914 16.808 cv
311.907 16.837 311.91 16.869 311.922 16.904 cv
311.929 16.922 311.942 16.952 311.96 16.987 cv
311.984 17.053 311.967 17.11 311.904 17.161 cv
311.761 17.271 311.602 17.362 311.433 17.428 cv
311.302 17.477 311.168 17.515 311.023 17.544 cv
311.011 17.598 311.013 17.636 311.027 17.657 cv
312.488 24.399 mo
312.44 24.311 312.405 24.248 312.383 24.208 cv
312.34 24.135 312.299 24.077 312.257 24.034 cv
312.344 24.077 312.41 24.079 312.453 24.04 cv
312.367 23.979 312.327 23.919 312.332 23.858 cv
312.347 23.873 312.4 23.905 312.493 23.954 cv
312.574 23.994 312.659 24.072 312.75 24.184 cv
312.769 24.132 312.759 24.064 312.719 23.983 cv
312.833 24.061 312.935 24.125 313.031 24.173 cv
313.087 24.2 313.162 24.235 313.263 24.278 cv
313.457 24.369 313.709 24.538 314.017 24.781 cv
314.14 24.88 314.367 24.923 314.691 24.905 cv
314.664 25.005 314.611 25.075 314.533 25.111 cv
314.468 25.141 314.37 25.149 314.244 25.141 cv
314.166 25.136 314.088 25.143 314.008 25.164 cv
313.92 25.191 313.853 25.214 313.808 25.227 cv
313.64 25.28 313.467 25.284 313.288 25.241 cv
313.182 25.217 313.074 25.161 312.968 25.075 cv
312.949 25.06 312.86 24.98 312.709 24.839 cv
312.787 24.842 312.845 24.824 312.885 24.789 cv
312.715 24.688 312.584 24.559 312.488 24.399 cv
321.778 18.25 mo
321.687 18.245 321.605 18.227 321.527 18.2 cv
321.549 18.132 321.599 18.079 321.677 18.042 cv
321.685 18.109 321.718 18.18 321.778 18.25 cv
322.496 18.374 mo
322.4 18.371 322.324 18.353 322.269 18.323 cv
322.271 18.261 322.314 18.22 322.397 18.202 cv
322.4 18.268 322.432 18.325 322.496 18.374 cv
321.086 15.731 mo
320.881 15.999 li
320.804 15.932 li
320.835 15.706 li
321.011 15.706 li
cp
322.015 15.766 mo
321.859 15.958 li
321.722 15.712 li
cp
322.754 15.948 mo
322.593 16.044 li
322.52 15.876 li
cp
305.782 12.255 mo
333.371 12.255 li
333.445 28.129 li
328.067 28.129 li
328.017 28.092 327.982 28.022 327.959 27.918 cv
327.947 27.848 327.936 27.735 327.931 27.58 cv
327.924 27.4 327.916 27.274 327.909 27.201 cv
327.891 27.061 327.861 26.948 327.82 26.862 cv
327.831 26.809 327.845 26.785 327.861 26.793 cv
327.877 26.801 327.909 26.838 327.962 26.914 cv
327.962 26.785 327.936 26.622 327.888 26.424 cv
327.845 26.252 327.831 26.121 327.843 26.032 cv
327.909 26.006 327.954 26.054 327.984 26.177 cv
328.193 25.287 328.299 24.384 328.297 23.466 cv
328.34 23.499 328.384 23.616 328.439 23.828 cv
328.525 23.461 328.525 23.043 328.445 22.573 cv
328.414 22.401 328.439 22.175 328.52 21.89 cv
328.605 21.425 328.578 20.952 328.439 20.47 cv
328.541 20.625 328.661 20.721 328.797 20.751 cv
328.576 20.331 328.392 19.845 328.244 19.3 cv
328.22 19.166 328.228 19.048 328.268 18.947 cv
328.301 18.891 328.342 18.77 328.384 18.585 cv
328.427 18.414 328.46 18.313 328.49 18.283 cv
328.527 18.484 li
328.56 18.481 328.588 18.444 328.608 18.366 cv
328.623 18.318 328.638 18.229 328.656 18.101 cv
328.696 17.82 328.744 17.649 328.797 17.589 cv
328.844 17.681 328.87 17.782 328.873 17.89 cv
328.986 17.392 328.961 16.839 328.797 16.229 cv
328.672 15.173 li
328.817 15.075 328.894 14.944 328.908 14.778 cv
328.908 14.424 li
328.961 14.448 329.013 14.509 329.066 14.602 cv
329.031 14.504 329.006 14.363 328.988 14.18 cv
328.978 14.044 328.945 13.946 328.894 13.888 cv
328.576 13.522 328.166 13.388 327.665 13.487 cv
327.662 13.271 327.601 13.097 327.486 12.964 cv
327.478 12.922 327.509 12.907 327.584 12.914 cv
327.467 12.753 327.325 12.675 327.162 12.682 cv
327.117 12.678 327.056 12.665 326.988 12.642 cv
326.908 12.612 326.847 12.593 326.804 12.579 cv
326.654 12.532 326.527 12.521 326.431 12.556 cv
326.11 12.62 325.891 12.804 325.778 13.11 cv
325.031 12.954 324.525 12.931 324.256 13.04 cv
324.263 12.992 324.297 12.957 324.357 12.934 cv
324.095 12.967 323.898 13.059 323.765 13.211 cv
323.056 13.311 322.351 13.437 321.647 13.589 cv
321.192 13.632 320.8 13.634 320.474 13.598 cv
320.418 13.686 320.375 13.759 320.354 13.817 cv
320.319 13.907 320.326 13.993 320.375 14.076 cv
320.541 14.366 320.573 14.639 320.47 14.896 cv
320.322 15.259 li
320.284 15.349 320.261 15.42 320.254 15.472 cv
320.246 15.522 320.254 15.573 320.277 15.616 cv
320.291 15.651 320.332 15.704 320.394 15.777 cv
320.5 15.78 320.576 15.83 320.621 15.929 cv
320.887 16.155 li
320.98 15.94 321.111 15.78 321.275 15.677 cv
321.33 15.649 321.371 15.659 321.4 15.702 cv
321.489 15.845 321.644 16.007 321.869 16.18 cv
321.937 16.024 322.022 15.908 322.131 15.827 cv
322.15 15.812 322.174 15.807 322.195 15.812 cv
322.22 15.817 322.241 15.83 322.254 15.852 cv
322.281 15.893 322.342 15.948 322.437 16.018 cv
322.533 16.087 322.591 16.114 322.608 16.104 cv
322.666 16.063 322.726 16.036 322.787 16.018 cv
322.857 16.001 322.9 15.996 322.92 16.007 cv
322.937 16.016 322.943 16.046 322.935 16.104 cv
322.955 16.264 323.006 16.388 323.086 16.47 cv
323.24 16.366 323.365 16.353 323.461 16.429 cv
323.801 16.7 323.888 16.861 323.725 16.909 cv
322.777 16.866 322.226 16.837 322.068 16.819 cv
321.552 16.763 321.092 16.69 320.689 16.596 cv
320.308 16.476 320.009 16.323 319.789 16.141 cv
319.64 16.02 319.492 15.84 319.338 15.6 cv
319.262 15.498 319.175 15.437 319.079 15.417 cv
318.988 15.397 318.908 15.415 318.838 15.47 cv
318.761 15.53 318.717 15.618 318.699 15.734 cv
318.676 15.86 318.691 16.009 318.742 16.18 cv
319.192 17.134 320.188 17.657 321.732 17.749 cv
323.092 17.835 323.711 17.999 323.59 18.243 cv
323.566 18.296 323.521 18.313 323.461 18.298 cv
323.381 18.245 323.32 18.194 323.275 18.144 cv
323.248 18.114 323.224 18.081 323.213 18.052 cv
323.015 18.141 322.857 18.263 322.734 18.419 cv
322.568 18.321 322.457 18.22 322.407 18.117 cv
322.234 18.17 322.093 18.286 321.984 18.459 cv
321.843 18.263 321.758 18.074 321.725 17.893 cv
321.474 17.938 321.291 18.096 321.175 18.368 cv
321.107 18.371 321.064 18.406 321.051 18.47 cv
321.039 18.529 321.056 18.587 321.099 18.645 cv
321.096 18.813 li
321.074 18.846 li
321.054 18.874 321.041 18.904 321.033 18.934 cv
321.006 19.038 321.023 19.151 321.09 19.274 cv
321.142 19.18 321.217 19.126 321.315 19.105 cv
321.305 19.279 321.388 19.42 321.559 19.53 cv
321.585 19.445 321.637 19.378 321.713 19.332 cv
321.732 19.392 321.756 19.432 321.781 19.453 cv
321.796 19.468 321.831 19.483 321.884 19.503 cv
321.871 19.438 321.877 19.388 321.899 19.354 cv
322.029 19.432 322.176 19.473 322.334 19.473 cv
322.261 19.546 322.234 19.632 322.256 19.727 cv
322.027 19.833 321.821 19.981 321.642 20.175 cv
321.4 20.144 321.192 20.208 321.018 20.366 cv
321.093 20.361 321.149 20.376 321.184 20.411 cv
320.906 20.53 320.576 20.774 320.196 21.143 cv
320.072 21.262 319.955 21.386 319.843 21.511 cv
319.701 21.675 li
319.763 21.675 319.81 21.669 319.839 21.661 cv
319.891 21.639 319.92 21.639 319.924 21.657 cv
318.933 22.821 li
318.609 22.806 318.349 22.845 318.15 22.937 cv
318.002 22.88 317.842 22.829 317.663 22.792 cv
317.467 22.751 317.336 22.739 317.27 22.751 cv
317.192 22.763 317.136 22.763 317.101 22.754 cv
317.076 22.739 317.044 22.733 317.004 22.733 cv
317.107 22.663 li
317.132 22.643 317.146 22.62 317.15 22.595 cv
316.996 22.626 316.8 22.636 316.56 22.62 cv
316.299 22.6 316.097 22.597 315.96 22.605 cv
315.984 22.557 316.022 22.519 316.068 22.495 cv
316.037 22.487 315.945 22.492 315.786 22.507 cv
315.64 22.519 315.519 22.519 315.429 22.499 cv
315.504 22.457 315.547 22.409 315.556 22.361 cv
315.406 22.403 315.189 22.401 314.903 22.353 cv
314.619 22.305 314.458 22.286 314.423 22.296 cv
314.384 22.253 314.38 22.22 314.4 22.192 cv
314.423 22.167 314.458 22.142 314.508 22.117 cv
313.783 22.069 li
313.877 22.021 313.925 21.951 313.927 21.858 cv
313.728 21.946 313.543 21.956 313.373 21.888 cv
313.215 21.823 313.122 21.718 313.093 21.571 cv
313.047 21.594 313.023 21.651 313.023 21.742 cv
312.951 21.614 312.86 21.501 312.748 21.397 cv
312.624 21.297 312.533 21.219 312.48 21.171 cv
312.397 21.091 312.338 20.899 312.297 20.597 cv
312.277 20.441 312.261 20.304 312.252 20.177 cv
312.242 20.059 312.218 19.961 312.183 19.886 cv
312.146 19.805 312.123 19.729 312.115 19.661 cv
312.186 19.707 312.249 19.724 312.299 19.712 cv
312.086 19.438 311.97 19.138 311.947 18.811 cv
311.952 18.786 311.963 18.781 311.984 18.799 cv
312.012 18.816 312.051 18.834 312.097 18.845 cv
312.14 18.854 312.166 18.856 312.169 18.851 cv
312.008 18.688 311.931 18.516 311.942 18.343 cv
311.945 18.296 311.934 18.218 311.912 18.109 cv
311.892 17.993 311.884 17.913 311.892 17.865 cv
311.899 17.823 311.939 17.76 312.009 17.677 cv
312.076 17.6 312.1 17.541 312.088 17.493 cv
312.108 17.442 312.15 17.388 312.221 17.329 cv
312.405 17.186 li
312.461 17.108 312.493 17.04 312.504 16.982 cv
312.513 16.927 312.475 16.858 312.39 16.784 cv
312.302 16.706 312.252 16.638 312.234 16.579 cv
312.218 16.519 312.252 16.438 312.34 16.339 cv
312.426 16.235 312.48 16.137 312.506 16.042 cv
312.531 15.946 312.546 15.83 312.553 15.699 cv
312.558 15.603 312.546 15.466 312.513 15.284 cv
312.478 15.095 312.461 14.987 312.458 14.96 cv
312.445 14.675 312.56 14.376 312.801 14.066 cv
312.455 14.101 312.217 14.296 312.083 14.647 cv
311.942 15.01 311.768 15.306 311.562 15.543 cv
311.59 15.626 li
311.607 15.664 311.631 15.679 311.666 15.671 cv
311.698 15.664 311.726 15.636 311.748 15.589 cv
311.771 15.538 311.789 15.505 311.799 15.485 cv
312.07 15.458 312.161 15.557 312.068 15.784 cv
312.033 15.868 311.977 15.961 311.899 16.066 cv
312.008 16.187 312.038 16.343 311.988 16.537 cv
311.931 16.542 311.879 16.561 311.829 16.596 cv
311.741 16.66 311.633 16.721 311.5 16.781 cv
311.472 16.791 311.444 16.804 311.414 16.811 cv
311.285 16.848 311.117 16.869 310.908 16.866 cv
310.649 16.866 310.433 16.837 310.263 16.778 cv
310.101 16.692 li
310.048 16.665 309.995 16.647 309.945 16.642 cv
309.955 16.577 309.939 16.534 309.902 16.516 cv
309.864 16.499 309.801 16.489 309.713 16.487 cv
309.522 15.956 li
309.494 15.837 309.502 15.764 309.545 15.737 cv
309.56 15.727 309.578 15.723 309.597 15.729 cv
309.621 15.734 309.633 15.745 309.642 15.757 cv
309.713 15.852 309.746 15.958 309.746 16.081 cv
309.843 16.02 309.854 15.946 309.776 15.852 cv
309.736 15.805 309.716 15.679 309.716 15.477 cv
309.709 15.413 309.676 15.346 309.615 15.274 cv
309.519 15.171 309.449 15.088 309.401 15.03 cv
309.306 14.909 309.258 14.751 309.265 14.55 cv
309.162 14.869 309.168 15.201 309.275 15.551 cv
309.345 15.694 309.356 15.845 309.301 16.003 cv
309.285 16.151 309.31 16.278 309.377 16.381 cv
309.509 16.585 309.509 16.745 309.377 16.858 cv
309.299 16.971 309.306 17.088 309.401 17.212 cv
309.703 17.437 li
309.663 17.571 309.713 17.671 309.854 17.739 cv
310.027 17.946 310.093 18.138 310.051 18.318 cv
309.939 18.265 309.824 18.263 309.703 18.313 cv
309.929 18.456 310.084 18.66 310.161 18.927 cv
309.882 18.738 309.588 18.66 309.275 18.696 cv
309.49 18.846 309.625 19.057 309.677 19.325 cv
309.567 19.538 309.605 19.772 309.794 20.028 cv
309.685 20.109 309.656 20.336 309.703 20.703 cv
309.814 20.502 li
309.808 20.688 309.879 20.877 310.025 21.071 cv
310.048 20.889 310.078 20.819 310.111 20.859 cv
310.267 21.166 li
310.327 21.966 li
310.126 22.042 li
310.221 22.145 310.297 22.283 310.347 22.46 cv
310.279 22.527 li
310.261 22.522 310.246 22.516 310.232 22.51 cv
310.218 22.502 li
310.033 22.409 309.822 22.411 309.582 22.513 cv
309.741 22.595 309.879 22.725 309.992 22.899 cv
309.929 22.937 li
309.741 22.877 309.509 22.897 309.23 23.003 cv
309.451 23.164 309.638 23.354 309.783 23.577 cv
309.72 23.785 li
309.685 23.891 309.73 23.997 309.849 24.099 cv
309.728 24.192 309.698 24.419 309.754 24.778 cv
309.791 24.618 309.843 24.53 309.914 24.513 cv
309.912 24.8 309.98 25.046 310.121 25.252 cv
310.121 25.114 310.148 25.005 310.204 24.923 cv
310.408 25.307 li
310.44 26.782 li
310.44 26.846 310.437 26.892 310.427 26.916 cv
310.408 26.969 310.359 27.008 310.285 27.033 cv
310.25 27.043 310.226 27.053 310.218 27.063 cv
310.209 27.073 310.207 27.098 310.209 27.133 cv
310.224 27.274 li
310.274 27.269 310.306 27.272 310.324 27.286 cv
310.335 27.294 310.344 27.325 310.357 27.379 cv
310.377 27.46 310.43 27.531 310.521 27.596 cv
310.609 27.659 310.709 27.7 310.822 27.711 cv
310.946 27.727 311.058 27.709 311.157 27.657 cv
311.273 27.594 311.359 27.492 311.414 27.355 cv
311.429 27.317 311.436 27.297 311.441 27.294 cv
311.457 27.274 311.482 27.269 311.514 27.28 cv
311.564 27.224 311.57 27.149 311.535 27.053 cv
311.396 26.977 li
311.381 26.959 311.379 26.927 311.384 26.877 cv
311.384 26.26 li
311.394 26.244 311.406 26.25 311.419 26.27 cv
311.422 26.281 311.433 26.311 311.454 26.364 cv
311.494 26.474 311.54 26.539 311.59 26.565 cv
311.58 26.464 311.607 26.404 311.676 26.383 cv
311.787 26.852 311.992 27.289 312.295 27.692 cv
312.267 27.629 312.254 27.543 312.259 27.435 cv
312.37 27.588 312.528 27.676 312.734 27.701 cv
312.636 27.626 312.606 27.578 312.649 27.556 cv
313.189 27.647 313.677 27.669 314.115 27.626 cv
314.118 27.661 314.073 27.697 313.98 27.732 cv
314.724 27.704 li
314.667 27.676 314.656 27.657 314.697 27.644 cv
314.712 27.639 314.734 27.641 314.761 27.655 cv
314.885 27.704 li
315.051 27.768 315.265 27.813 315.524 27.842 cv
315.459 27.8 315.436 27.768 315.454 27.746 cv
315.471 27.725 315.582 27.735 315.789 27.772 cv
316.027 27.818 316.228 27.84 316.394 27.84 cv
316.334 27.815 316.299 27.787 316.289 27.757 cv
316.304 27.742 316.351 27.746 316.435 27.77 cv
316.802 27.873 li
317.21 27.958 317.542 27.981 317.799 27.944 cv
317.834 27.941 317.886 27.969 317.955 28.034 cv
317.894 27.883 li
318.279 27.86 318.56 27.936 318.734 28.104 cv
305.683 28.104 li
cp
310.584 8.298 mo
309.545 9.15701 308.544 10.263 307.586 11.613 cv
305.875 11.613 li
307.067 10.368 308.636 9.263 310.584 8.298 cv
328.41 11.613 mo
310.767 11.613 li
311.794 10.36 313.009 9.36603 314.418 8.63202 cv
315.998 7.80902 317.67 7.38702 319.439 7.36902 cv
321.224 7.34802 322.926 7.74103 324.541 8.54602 cv
326.011 9.28101 327.301 10.303 328.41 11.613 cv
311.273 9.38 mo
311.967 8.71802 312.73 8.15903 313.556 7.70602 cv
314.423 7.23001 315.308 6.87402 316.211 6.63202 cv
317.205 6.36502 318.226 6.21402 319.277 6.177 cv
320.146 6.14603 321.086 6.23401 322.1 6.43802 cv
323.107 6.63901 324.06 6.95901 324.966 7.39301 cv
325.924 7.85703 326.832 8.466 327.689 9.22302 cv
328.509 9.94803 329.215 10.745 329.801 11.613 cv
328.975 11.613 li
327.765 10.091 326.324 8.92401 324.658 8.11401 cv
323.004 7.30502 321.262 6.91302 319.436 6.93301 cv
317.625 6.95401 315.912 7.37402 314.297 8.19901 cv
312.694 9.01401 311.331 10.154 310.211 11.613 cv
309.416 11.613 li
309.791 10.952 310.41 10.207 311.273 9.38 cv
328.525 8.27701 mo
330.472 9.24301 332.072 10.355 333.328 11.613 cv
331.531 11.613 li
330.565 10.25 329.564 9.138 328.525 8.27701 cv
324.552 41.187 mo
324.598 41.204 324.648 41.214 324.711 41.214 cv
324.797 41.214 324.867 41.187 324.927 41.126 cv
324.986 41.069 325.015 40.998 325.015 40.915 cv
325.015 40.834 324.986 40.762 324.927 40.704 cv
324.867 40.646 324.797 40.616 324.711 40.616 cv
324.661 40.616 324.611 40.631 324.56 40.659 cv
324.56 40.229 li
328.07 40.229 li
327.625 40.663 327.162 41.072 326.678 41.458 cv
324.551 41.458 li
cp
329.438 38.751 mo
329.336 38.872 329.232 38.995 329.127 39.117 cv
328.865 39.41 328.597 39.698 328.324 39.977 cv
324.573 39.977 li
324.608 38.751 li
cp
324.619 38.502 mo
324.648 37.979 li
324.709 37.987 324.761 37.992 324.806 37.992 cv
324.892 37.992 324.966 37.961 325.023 37.904 cv
325.084 37.843 325.114 37.773 325.114 37.693 cv
325.114 37.61 325.084 37.539 325.023 37.479 cv
324.966 37.42 324.892 37.393 324.806 37.39 cv
324.759 37.393 324.715 37.403 324.672 37.42 cv
324.658 37.284 li
330.543 37.284 li
330.259 37.7 329.959 38.108 329.642 38.502 cv
cp
308.413 34.334 mo
308.408 34.578 308.408 34.737 308.413 34.812 cv
308.418 34.95 308.44 35.059 308.475 35.129 cv
308.516 35.211 308.582 35.27 308.672 35.307 cv
308.765 35.342 308.896 35.36 309.069 35.36 cv
309.621 35.356 310.115 35.327 310.558 35.272 cv
310.908 35.229 311.342 35.157 311.854 35.055 cv
312.02 35.026 312.217 34.985 312.44 34.938 cv
312.599 34.905 312.709 34.887 312.769 34.887 cv
312.812 34.885 312.843 34.895 312.855 34.914 cv
312.865 34.928 312.878 34.95 312.898 34.985 cv
312.961 35.053 313.136 35.088 313.429 35.094 cv
313.451 35.094 li
313.744 35.091 313.92 35.055 313.982 34.985 cv
314.002 34.952 314.019 34.928 314.035 34.917 cv
314.052 34.905 314.086 34.9 314.138 34.9 cv
314.189 34.903 314.309 34.92 314.496 34.955 cv
314.684 34.992 314.961 35.037 315.331 35.098 cv
315.698 35.157 316.078 35.209 316.47 35.254 cv
316.86 35.299 317.224 35.33 317.564 35.342 cv
317.884 35.356 318.088 35.342 318.178 35.307 cv
318.252 35.28 318.309 35.219 318.351 35.131 cv
318.386 35.059 318.408 34.952 318.415 34.812 cv
318.42 34.739 318.42 34.578 318.415 34.334 cv
320.629 34.336 li
320.627 34.58 320.627 34.741 320.629 34.815 cv
320.636 34.955 320.659 35.061 320.694 35.133 cv
320.732 35.214 320.785 35.28 320.847 35.33 cv
320.91 35.377 321.119 35.403 321.478 35.403 cv
321.836 35.401 322.228 35.37 322.658 35.307 cv
323.086 35.242 323.556 35.161 324.072 35.061 cv
324.236 35.028 324.432 34.988 324.658 34.94 cv
324.814 34.91 324.926 34.892 324.988 34.889 cv
325.031 34.889 325.058 34.897 325.074 34.92 cv
325.082 34.93 325.096 34.955 325.117 34.988 cv
325.177 35.059 325.355 35.094 325.647 35.096 cv
325.668 35.096 li
325.959 35.094 326.138 35.059 326.198 34.991 cv
326.218 34.955 326.236 34.932 326.254 34.92 cv
326.269 34.91 326.304 34.903 326.354 34.905 cv
326.407 34.905 326.525 34.922 326.714 34.96 cv
326.9 34.995 327.179 35.043 327.547 35.101 cv
327.914 35.161 328.294 35.211 328.686 35.26 cv
329.184 35.317 329.549 35.35 329.781 35.36 cv
330.102 35.37 330.306 35.36 330.394 35.325 cv
330.463 35.297 330.519 35.235 330.568 35.133 cv
330.603 35.063 330.626 34.957 330.633 34.817 cv
330.635 34.741 330.635 34.582 330.633 34.338 cv
332.218 34.338 li
331.609 35.551 li
307.555 35.551 li
307.228 35.026 307.022 34.62 306.939 34.334 cv
cp
308.387 32.857 mo
308.398 33.246 li
308.4 33.267 308.392 33.278 308.373 33.272 cv
308.33 33.254 308.287 33.244 308.237 33.242 cv
308.151 33.244 308.078 33.272 308.02 33.33 cv
307.963 33.39 307.932 33.461 307.932 33.543 cv
307.932 33.624 307.963 33.695 308.02 33.755 cv
308.078 33.813 308.151 33.843 308.237 33.843 cv
308.285 33.843 308.33 33.832 308.373 33.813 cv
308.387 33.811 308.392 33.818 308.395 33.83 cv
308.398 34.075 li
306.818 34.075 li
306.639 33.666 306.501 33.262 306.4 32.857 cv
cp
308.398 31.401 mo
308.387 32.608 li
306.31 32.608 li
306.184 32.215 306.091 31.813 306.028 31.401 cv
cp
308.405 29.918 mo
308.405 30.03 li
308.405 30.044 308.398 30.049 308.381 30.047 cv
308.34 30.03 308.292 30.019 308.247 30.019 cv
308.161 30.019 308.091 30.047 308.031 30.107 cv
307.972 30.164 307.94 30.235 307.94 30.319 cv
307.94 30.399 307.972 30.472 308.031 30.53 cv
308.091 30.587 308.161 30.617 308.247 30.617 cv
308.298 30.617 308.343 30.608 308.383 30.587 cv
308.403 30.584 308.41 30.592 308.405 30.613 cv
308.398 31.125 li
305.968 31.125 li
305.877 30.711 305.819 30.309 305.792 29.918 cv
cp
312.881 34.278 mo
312.707 34.276 312.394 34.314 311.939 34.389 cv
311.484 34.462 311.08 34.518 310.726 34.55 cv
310.373 34.582 310 34.6 309.605 34.6 cv
309.509 34.6 309.439 34.568 309.394 34.502 cv
309.366 34.467 309.348 34.422 309.342 34.369 cv
309.342 34.359 309.339 34.349 309.339 34.341 cv
309.339 34.248 li
309.369 29.05 li
309.974 29.151 310.412 29.189 310.676 29.16 cv
310.956 29.131 311.351 29.078 311.867 29.002 cv
312.38 28.927 312.737 28.93 312.938 29.01 cv
313.144 29.093 313.283 29.159 313.355 29.209 cv
313.355 34.389 li
313.211 34.319 313.051 34.282 312.881 34.278 cv
309.152 34.45 mo
309.14 34.555 309.158 34.641 309.203 34.703 cv
309.248 34.769 309.318 34.801 309.414 34.801 cv
309.808 34.801 310.226 34.772 310.667 34.713 cv
310.861 34.686 311.211 34.631 311.72 34.539 cv
312.103 34.475 312.394 34.434 312.593 34.424 cv
312.888 34.407 313.142 34.442 313.355 34.53 cv
313.355 34.762 li
313.263 34.686 313.082 34.663 312.807 34.694 cv
312.656 34.708 312.335 34.766 311.84 34.862 cv
311.318 34.965 310.885 35.035 310.543 35.078 cv
310 35.147 309.49 35.172 309.011 35.154 cv
308.775 35.144 308.652 35.053 308.644 34.882 cv
308.639 34.703 308.632 34.52 308.63 34.334 cv
308.599 32.973 308.601 31.401 308.632 29.619 cv
308.755 29.36 308.956 29.166 309.238 29.04 cv
309.222 29.644 309.195 30.545 309.158 31.744 cv
309.133 32.793 309.13 33.695 309.152 34.45 cv
313.599 34.379 mo
313.625 29.211 li
313.625 29.211 313.666 29.189 313.741 29.143 cv
313.832 29.093 313.927 29.047 314.03 29.012 cv
314.234 28.945 314.4 28.909 314.523 28.907 cv
314.646 28.907 314.838 28.942 315.093 29.008 cv
315.412 29.09 315.808 29.133 316.287 29.141 cv
316.609 29.143 317.041 29.111 317.585 29.04 cv
317.634 30.782 317.607 32.545 317.504 34.326 cv
317.5 34.394 317.471 34.442 317.419 34.469 cv
317.366 34.494 317.24 34.5 317.041 34.485 cv
316.715 34.469 316.465 34.457 316.292 34.442 cv
315.776 34.409 315.361 34.373 315.049 34.341 cv
314.578 34.291 314.259 34.266 314.088 34.268 cv
313.907 34.271 313.744 34.309 313.599 34.379 cv
313.602 34.53 mo
313.814 34.442 314.065 34.407 314.355 34.424 cv
314.724 34.444 315.016 34.475 315.227 34.51 cv
315.567 34.571 315.917 34.61 316.279 34.633 cv
316.769 34.699 317.168 34.731 317.474 34.731 cv
317.577 34.731 317.648 34.705 317.685 34.653 cv
317.73 34.592 317.746 34.507 317.736 34.399 cv
317.763 33.395 317.768 32.51 317.748 31.744 cv
317.736 31.287 317.73 30.761 317.736 30.17 cv
317.743 29.549 317.743 29.174 317.74 29.04 cv
317.884 29.106 318.008 29.196 318.113 29.309 cv
318.191 29.397 318.259 29.5 318.314 29.619 cv
318.309 30.407 318.301 31.189 318.289 31.969 cv
318.273 32.946 318.252 33.916 318.223 34.882 cv
318.214 35.069 318.09 35.164 317.856 35.174 cv
317.465 35.186 316.98 35.159 316.408 35.088 cv
315.871 35.023 315.441 34.957 315.117 34.892 cv
314.624 34.797 314.304 34.739 314.154 34.723 cv
313.857 34.691 313.674 34.703 313.602 34.762 cv
cp
318.5 31.128 mo
318.533 30.608 li
318.533 30.592 318.541 30.587 318.556 30.59 cv
318.598 30.608 318.644 30.617 318.691 30.617 cv
318.777 30.617 318.847 30.59 318.908 30.53 cv
318.966 30.472 318.996 30.401 318.996 30.319 cv
318.996 30.238 318.966 30.164 318.908 30.107 cv
318.847 30.049 318.777 30.019 318.691 30.019 cv
318.641 30.019 318.595 30.03 318.556 30.049 cv
318.549 30.049 318.541 30.049 318.539 30.047 cv
318.533 30.044 318.531 30.034 318.531 30.024 cv
318.541 29.91 li
320.603 29.91 li
320.605 30.022 li
320.605 30.034 320.603 30.041 320.598 30.047 cv
320.595 30.049 320.588 30.049 320.581 30.047 cv
320.541 30.03 320.496 30.019 320.445 30.016 cv
320.359 30.019 320.289 30.047 320.228 30.104 cv
320.171 30.164 320.14 30.235 320.14 30.319 cv
320.14 30.399 320.171 30.469 320.228 30.53 cv
320.289 30.587 320.359 30.617 320.445 30.617 cv
320.493 30.617 320.538 30.608 320.581 30.587 cv
320.595 30.584 320.603 30.592 320.603 30.606 cv
320.609 31.128 li
cp
318.458 32.603 mo
318.49 31.377 li
320.601 31.377 li
320.601 32.603 li
cp
320.228 33.758 mo
320.289 33.815 320.359 33.846 320.445 33.846 cv
320.493 33.846 320.538 33.836 320.581 33.815 cv
320.595 33.813 320.603 33.821 320.603 33.832 cv
320.603 34.084 li
318.435 34.084 li
318.435 33.83 li
318.437 33.818 318.445 33.811 318.461 33.813 cv
318.503 33.832 318.549 33.843 318.593 33.843 cv
318.679 33.843 318.752 33.813 318.81 33.755 cv
318.871 33.695 318.9 33.624 318.9 33.543 cv
318.9 33.461 318.871 33.39 318.81 33.33 cv
318.752 33.272 318.679 33.244 318.593 33.242 cv
318.546 33.244 318.5 33.254 318.458 33.272 cv
318.44 33.278 318.432 33.267 318.435 33.246 cv
318.445 32.857 li
320.595 32.857 li
320.605 33.249 li
320.609 33.27 320.601 33.28 320.581 33.274 cv
320.541 33.257 320.496 33.246 320.445 33.244 cv
320.359 33.246 320.289 33.274 320.228 33.332 cv
320.171 33.393 320.14 33.463 320.14 33.546 cv
320.14 33.627 320.171 33.698 320.228 33.758 cv
325.096 34.284 mo
324.926 34.282 324.611 34.306 324.156 34.362 cv
323.7 34.414 323.298 34.467 322.943 34.515 cv
322.591 34.565 322.287 34.59 322.033 34.596 cv
321.778 34.6 321.634 34.578 321.599 34.528 cv
321.564 34.477 321.547 34.437 321.552 34.405 cv
321.554 34.373 321.556 34.324 321.556 34.25 cv
321.585 29.053 li
322.193 29.157 322.629 29.194 322.895 29.166 cv
323.172 29.136 323.569 29.082 324.082 29.008 cv
324.595 28.93 324.953 28.932 325.156 29.015 cv
325.363 29.098 325.502 29.163 325.572 29.211 cv
325.572 33.823 li
325.572 34.391 li
325.428 34.321 325.269 34.285 325.096 34.284 cv
320.847 34.336 mo
320.817 32.977 320.817 31.405 320.849 29.621 cv
320.973 29.362 321.175 29.171 321.454 29.043 cv
321.439 29.647 321.414 30.549 321.376 31.75 cv
321.347 32.796 321.347 33.7 321.368 34.451 cv
321.358 34.56 321.373 34.646 321.418 34.708 cv
321.467 34.772 321.537 34.804 321.63 34.804 cv
322.025 34.804 322.442 34.777 322.884 34.716 cv
323.076 34.691 323.428 34.633 323.937 34.545 cv
324.322 34.477 324.613 34.44 324.809 34.426 cv
325.103 34.411 325.358 34.448 325.572 34.533 cv
325.572 34.764 li
325.481 34.691 325.298 34.668 325.025 34.696 cv
324.875 34.713 324.551 34.769 324.057 34.867 cv
323.537 34.967 323.044 35.066 322.578 35.157 cv
322.115 35.249 321.708 35.282 321.358 35.257 cv
321.009 35.229 320.843 35.106 320.86 34.885 cv
320.855 34.705 320.849 34.525 320.847 34.336 cv
325.816 34.381 mo
325.842 29.213 li
325.843 29.213 325.881 29.192 325.959 29.149 cv
326.047 29.096 326.145 29.053 326.248 29.018 cv
326.453 28.948 326.615 28.912 326.742 28.912 cv
326.865 28.912 327.053 28.945 327.312 29.012 cv
327.63 29.093 328.027 29.139 328.506 29.143 cv
328.827 29.149 329.259 29.114 329.801 29.043 cv
329.853 30.786 329.851 32.119 329.796 33.045 cv
329.781 33.325 329.765 33.652 329.753 34.03 cv
329.748 34.236 329.738 34.349 329.722 34.373 cv
329.685 34.442 329.622 34.494 329.539 34.53 cv
329.461 34.563 329.381 34.575 329.298 34.568 cv
327.265 34.344 li
326.797 34.293 326.477 34.271 326.306 34.274 cv
326.123 34.276 325.962 34.311 325.816 34.381 cv
325.818 34.533 mo
326.032 34.389 326.304 34.331 326.634 34.367 cv
326.963 34.399 327.269 34.442 327.556 34.494 cv
327.842 34.547 328.193 34.606 328.613 34.668 cv
329.036 34.729 329.345 34.756 329.544 34.748 cv
329.746 34.739 329.866 34.708 329.901 34.659 cv
329.947 34.596 329.965 34.512 329.951 34.402 cv
329.982 33.415 329.984 32.53 329.967 31.75 cv
329.951 31.27 329.947 30.746 329.954 30.172 cv
329.959 29.553 329.962 29.176 329.957 29.043 cv
330.099 29.108 330.223 29.199 330.329 29.315 cv
330.407 29.401 330.474 29.503 330.53 29.621 cv
330.527 30.447 330.517 31.229 330.508 31.974 cv
330.49 33.013 330.467 33.984 330.439 34.885 cv
330.431 35.08 330.308 35.182 330.072 35.189 cv
329.732 35.201 329.25 35.168 328.623 35.094 cv
328.41 35.066 328.168 35.023 327.901 34.963 cv
327.633 34.897 327.443 34.854 327.333 34.834 cv
326.746 34.719 326.425 34.659 326.372 34.651 cv
326.128 34.625 325.944 34.663 325.818 34.764 cv
cp
330.718 31.133 mo
330.749 30.61 li
330.802 30.625 330.849 30.633 330.897 30.633 cv
330.982 30.633 331.053 30.606 331.113 30.545 cv
331.172 30.487 331.202 30.416 331.202 30.333 cv
331.202 30.252 331.172 30.18 331.113 30.121 cv
331.053 30.065 330.982 30.034 330.897 30.034 cv
330.852 30.034 330.812 30.041 330.774 30.059 cv
330.759 29.916 li
333.338 29.916 li
333.151 31.133 li
cp
332.816 32.608 mo
330.674 32.608 li
330.709 31.383 li
333.113 31.383 li
331.028 33.334 mo
330.968 33.278 330.897 33.246 330.812 33.246 cv
330.761 33.246 330.711 33.262 330.661 33.289 cv
330.661 32.86 li
332.742 32.86 li
332.623 33.287 332.482 33.695 332.314 34.09 cv
330.65 34.09 li
330.654 33.818 li
330.699 33.836 330.749 33.846 330.812 33.846 cv
330.897 33.846 330.968 33.818 331.028 33.758 cv
331.086 33.7 331.117 33.629 331.117 33.546 cv
331.117 33.465 331.086 33.393 331.028 33.334 cv
325.008 14.494 mo
324.958 14.446 324.916 14.421 324.877 14.421 cv
324.859 14.419 324.847 14.419 324.84 14.419 cv
324.83 14.419 324.82 14.413 324.812 14.401 cv
324.809 14.384 324.824 14.366 324.859 14.35 cv
325.008 14.307 325.134 14.317 325.234 14.381 cv
325.301 14.421 325.39 14.518 325.513 14.675 cv
325.424 14.756 325.312 14.805 325.187 14.823 cv
325.127 14.831 325.099 14.805 325.101 14.751 cv
325.106 14.645 325.074 14.561 325.008 14.494 cv
323.519 17.632 mo
322.478 17.634 321.577 17.548 320.814 17.378 cv
320.384 17.279 319.998 17.102 319.652 16.851 cv
319.353 16.633 319.177 16.436 319.125 16.261 cv
319.066 16.077 319.069 15.968 319.125 15.932 cv
319.181 15.895 319.273 15.946 319.401 16.084 cv
319.834 16.55 320.437 16.826 321.213 16.915 cv
322.281 17.032 323.044 17.214 323.502 17.46 cv
323.577 17.501 323.617 17.541 323.623 17.576 cv
323.625 17.614 323.592 17.632 323.519 17.632 cv
323.154 18.283 mo
323.162 18.232 323.184 18.197 323.222 18.18 cv
323.219 18.222 323.252 18.263 323.318 18.304 cv
cp
333.433 28.512 mo
333.383 29.644 li
330.792 29.644 li
330.734 29.471 330.638 29.305 330.508 29.146 cv
330.367 28.977 330.22 28.871 330.072 28.834 cv
330.062 28.831 329.984 28.828 329.841 28.826 cv
329.164 28.919 328.777 28.975 328.681 28.997 cv
328.583 29.02 328.425 29.02 328.198 28.997 cv
327.974 28.975 327.73 28.938 327.468 28.881 cv
327.176 28.819 327.013 28.785 326.978 28.785 cv
326.704 28.768 326.457 28.807 326.241 28.899 cv
326.131 28.95 326.05 28.985 325.997 29.008 cv
325.906 29.047 325.82 29.071 325.74 29.082 cv
325.672 29.09 325.609 29.08 325.554 29.05 cv
325.478 28.997 325.403 28.955 325.328 28.916 cv
325.106 28.804 324.734 28.796 324.213 28.892 cv
323.693 28.991 323.315 29.033 323.084 29.02 cv
322.849 29.01 322.605 28.983 322.349 28.94 cv
321.73 28.825 321.381 28.799 321.301 28.86 cv
320.873 29.189 320.638 29.451 320.603 29.644 cv
318.546 29.644 li
318.51 29.528 318.461 29.418 318.392 29.309 cv
318.357 29.254 318.316 29.201 318.271 29.146 cv
318.131 28.977 317.984 28.871 317.836 28.834 cv
317.826 28.831 317.748 28.828 317.605 28.826 cv
316.935 28.909 316.563 28.951 316.485 28.957 cv
316.404 28.962 316.261 28.965 316.051 28.965 cv
315.765 28.965 315.494 28.938 315.232 28.881 cv
314.941 28.819 314.777 28.785 314.742 28.785 cv
314.468 28.768 314.221 28.807 314.006 28.899 cv
313.894 28.95 313.814 28.985 313.761 29.008 cv
313.67 29.047 313.585 29.071 313.504 29.082 cv
313.436 29.09 313.373 29.08 313.318 29.05 cv
313.242 28.997 313.168 28.955 313.092 28.916 cv
312.871 28.804 312.51 28.784 312.009 28.86 cv
311.511 28.932 311.099 28.975 310.772 28.983 cv
310.599 28.988 310.377 28.973 310.113 28.94 cv
309.474 28.821 309.117 28.793 309.039 28.854 cv
308.614 29.178 308.405 29.451 308.408 29.669 cv
305.766 29.644 li
305.741 29.372 305.721 29.174 305.714 29.045 cv
305.699 28.828 305.696 28.651 305.711 28.512 cv
cp
314.5 38.759 mo
314.5 39.985 li
310.783 39.985 li
310.722 39.926 310.664 39.871 310.606 39.813 cv
310.03 39.195 li
310.012 39.172 li
309.894 39.034 309.787 38.895 309.685 38.759 cv
cp
314.129 37.899 mo
314.189 37.956 314.259 37.987 314.344 37.987 cv
314.392 37.987 314.437 37.977 314.48 37.956 cv
314.496 37.954 314.504 37.961 314.504 37.974 cv
314.508 38.51 li
309.468 38.51 li
308.549 37.283 li
314.504 37.283 li
314.506 37.39 li
314.506 37.403 314.504 37.41 314.498 37.415 cv
314.496 37.418 314.488 37.418 314.48 37.415 cv
314.44 37.398 314.394 37.388 314.344 37.385 cv
314.259 37.388 314.189 37.415 314.129 37.474 cv
314.07 37.534 314.041 37.605 314.041 37.687 cv
314.041 37.768 314.07 37.838 314.129 37.899 cv
314.129 41.126 mo
314.189 41.185 314.259 41.214 314.344 41.214 cv
314.392 41.214 314.437 41.204 314.48 41.185 cv
314.504 41.182 314.515 41.187 314.515 41.202 cv
314.515 41.461 li
312.427 41.461 li
311.054 40.239 li
314.513 40.239 li
314.518 40.618 li
314.521 40.641 314.508 40.649 314.48 40.644 cv
314.44 40.626 314.394 40.616 314.344 40.614 cv
314.259 40.616 314.189 40.644 314.129 40.701 cv
314.07 40.762 314.041 40.832 314.041 40.915 cv
314.041 40.995 314.07 41.066 314.129 41.126 cv
315.396 41.776 mo
315.398 41.748 315.401 41.698 315.401 41.622 cv
315.429 36.424 li
315.977 36.518 316.412 36.545 316.74 36.512 cv
316.812 36.502 316.966 36.469 317.192 36.414 cv
317.424 36.356 317.634 36.317 317.826 36.293 cv
318.045 36.268 318.279 36.276 318.525 36.314 cv
318.606 36.326 318.764 36.362 319.001 36.416 cv
319.217 36.469 319.369 36.525 319.454 36.582 cv
319.454 41.745 li
319.338 41.688 319.168 41.658 318.941 41.655 cv
318.772 41.653 318.461 41.677 318 41.733 cv
317.547 41.785 317.144 41.838 316.787 41.886 cv
316.437 41.937 316.135 41.962 315.877 41.967 cv
315.623 41.972 315.479 41.95 315.443 41.899 cv
315.408 41.849 315.39 41.806 315.396 41.776 cv
314.758 42.111 mo
314.752 41.977 314.75 41.843 314.747 41.705 cv
314.717 40.347 314.717 38.774 314.75 36.991 cv
314.853 36.703 315.054 36.51 315.353 36.412 cv
315.338 37.016 315.313 37.919 315.275 39.118 cv
315.248 40.165 315.248 41.069 315.267 41.821 cv
315.258 41.929 315.277 42.015 315.334 42.077 cv
315.386 42.143 315.532 42.173 315.768 42.173 cv
316.005 42.173 316.342 42.146 316.785 42.085 cv
316.976 42.06 317.328 42.002 317.836 41.914 cv
318.22 41.846 318.513 41.808 318.709 41.796 cv
319.004 41.781 319.258 41.816 319.471 41.902 cv
319.471 42.133 li
319.336 42.015 319.168 41.972 318.963 42.004 cv
318.761 42.034 318.412 42.108 317.917 42.221 cv
317.424 42.331 316.943 42.435 316.478 42.526 cv
316.015 42.618 315.607 42.651 315.258 42.626 cv
315.133 42.616 315.034 42.611 314.967 42.616 cv
314.898 42.618 314.84 42.593 314.797 42.54 cv
314.752 42.485 314.74 42.39 314.759 42.253 cv
314.759 42.205 314.758 42.159 314.758 42.111 cv
324.407 36.515 mo
324.304 36.392 324.203 36.306 324.1 36.25 cv
324.057 36.231 324.014 36.213 323.972 36.201 cv
323.959 36.198 323.884 36.196 323.74 36.196 cv
323.326 36.25 li
322.905 36.311 322.672 36.338 322.623 36.338 cv
322.566 36.338 322.418 36.336 322.177 36.326 cv
321.922 36.319 321.722 36.303 321.59 36.284 cv
321.426 36.258 321.326 36.242 321.283 36.241 cv
321.22 36.233 321.103 36.225 320.93 36.218 cv
320.754 36.211 320.591 36.221 320.443 36.248 cv
320.289 36.279 320.174 36.301 320.095 36.317 cv
320.017 36.334 319.939 36.352 319.856 36.369 cv
319.773 36.389 319.695 36.402 319.625 36.409 cv
319.519 36.422 319.464 36.424 319.454 36.416 cv
319.408 36.387 319.227 36.341 318.908 36.284 cv
318.592 36.223 318.384 36.196 318.292 36.201 cv
317.906 36.213 317.711 36.218 317.705 36.221 cv
317.465 36.253 317.248 36.282 317.054 36.299 cv
316.689 36.336 316.42 36.338 316.249 36.306 cv
316.111 36.282 315.974 36.256 315.842 36.225 cv
315.705 36.198 315.556 36.183 315.396 36.178 cv
315.232 36.175 315.104 36.215 315.009 36.303 cv
314.913 36.392 314.807 36.512 314.689 36.666 cv
314.586 36.801 314.523 36.922 314.504 37.023 cv
308.395 37.031 li
307.686 35.813 li
331.443 35.813 li
331.219 36.223 330.978 36.62 330.724 37.01 cv
324.691 37.01 li
324.634 36.837 324.538 36.67 324.407 36.515 cv
319.716 36.582 mo
319.716 36.582 319.783 36.558 319.92 36.504 cv
320.07 36.451 320.176 36.422 320.241 36.409 cv
320.397 36.384 320.538 36.369 320.662 36.371 cv
320.704 36.371 320.785 36.371 320.908 36.369 cv
321.031 36.369 321.154 36.381 321.273 36.402 cv
321.751 36.48 322.131 36.52 322.415 36.525 cv
322.605 36.528 323.031 36.485 323.693 36.399 cv
323.703 37.171 323.697 38.281 323.677 39.725 cv
323.658 41.061 323.644 41.738 323.634 41.753 cv
323.625 41.771 323.615 41.811 323.601 41.876 cv
323.582 41.916 323.542 41.95 323.486 41.972 cv
323.439 41.994 323.345 41.997 323.207 41.985 cv
322.508 41.962 321.826 41.886 321.164 41.763 cv
320.646 41.688 320.332 41.653 320.217 41.653 cv
320.035 41.655 319.871 41.693 319.728 41.763 cv
cp
319.718 41.902 mo
319.816 41.836 319.939 41.796 320.083 41.784 cv
320.193 41.773 320.342 41.779 320.533 41.798 cv
320.865 41.831 321.172 41.873 321.457 41.927 cv
321.74 41.98 322.093 42.037 322.513 42.1 cv
322.852 42.148 323.162 42.168 323.443 42.156 cv
323.627 42.146 323.748 42.103 323.801 42.028 cv
323.845 41.964 323.863 41.881 323.851 41.771 cv
323.881 40.799 323.884 39.913 323.866 39.118 cv
323.851 38.618 323.845 38.092 323.853 37.541 cv
323.859 36.922 323.861 36.545 323.856 36.412 cv
324 36.477 324.123 36.568 324.228 36.684 cv
324.306 36.769 324.375 36.872 324.429 36.991 cv
324.427 37.738 324.42 38.52 324.407 39.343 cv
324.389 40.349 324.367 41.321 324.34 42.253 cv
324.332 42.51 324.183 42.626 323.896 42.609 cv
323.609 42.588 323.267 42.545 322.87 42.48 cv
322.472 42.414 322.113 42.354 321.786 42.299 cv
321.524 42.256 321.341 42.224 321.232 42.203 cv
320.651 42.087 320.33 42.028 320.271 42.02 cv
320.027 41.994 319.843 42.033 319.718 42.133 cv
cp
333.705 31.256 mo
333.715 31.209 333.722 31.16 333.732 31.114 cv
333.888 30.223 333.961 29.375 333.951 28.57 cv
333.943 21.954 li
334.832 22.68 335.592 23.682 336.23 24.958 cv
336.867 26.233 337.259 27.412 337.405 28.499 cv
337.553 29.586 337.547 30.67 337.39 31.754 cv
337.232 32.839 336.947 33.854 336.535 34.791 cv
336.123 35.733 335.523 36.66 334.736 37.581 cv
333.951 38.502 333.058 39.249 332.056 39.828 cv
331.058 40.405 330.23 40.789 329.574 40.978 cv
328.92 41.167 328.306 41.283 327.735 41.33 cv
328.359 40.767 328.953 40.165 329.513 39.529 cv
330.905 37.944 332.009 36.18 332.827 34.233 cv
333.076 33.637 333.287 33.01 333.459 32.362 cv
333.554 32.001 333.636 31.631 333.705 31.256 cv
335.695 14.29 mo
335 14.069 334.412 13.935 333.933 13.895 cv
333.931 12.202 li
334.688 12.987 335.275 13.684 335.695 14.29 cv
336.646 15.946 mo
335.713 16.487 li
335.176 16.261 334.583 16.066 333.936 15.908 cv
333.933 15.065 li
335.043 15.346 335.946 15.641 336.646 15.946 cv
333.943 21.093 mo
333.936 16.444 li
334.447 16.507 334.908 16.639 335.317 16.846 cv
335.131 18.028 334.671 19.442 333.943 21.093 cv
335.312 21.223 mo
334.406 21.292 li
334.988 19.827 335.466 18.339 335.841 16.821 cv
336.696 16.343 li
336.412 17.923 335.951 19.551 335.312 21.223 cv
337.863 24.315 mo
337.32 23.199 336.629 22.21 335.783 21.349 cv
336.548 19.488 337.055 17.626 337.304 15.764 cv
336.64 15.409 335.992 15.151 335.365 14.987 cv
334.736 14.821 334.258 14.71 333.933 14.657 cv
333.933 14.409 li
335.025 14.595 335.978 14.876 336.799 15.257 cv
336.009 13.93 335.052 12.718 333.931 11.613 cv
333.371 11.059 332.769 10.536 332.125 10.041 cv
330.137 8.50702 327.888 7.341 325.379 6.54202 cv
327.597 7.75101 329.443 9.44202 330.92 11.613 cv
330.361 11.613 li
330.314 11.535 330.263 11.458 330.216 11.382 cv
330.145 11.27 330.078 11.171 330.014 11.08 cv
329.939 10.97 329.859 10.861 329.778 10.753 cv
329.7 10.649 329.609 10.532 329.502 10.395 cv
329.403 10.274 329.293 10.146 329.172 10.009 cv
329.053 9.87201 328.92 9.73102 328.777 9.58301 cv
328.591 9.39401 328.399 9.21402 328.206 9.03702 cv
327.371 8.28403 326.42 7.62601 325.358 7.061 cv
324.447 6.58102 323.476 6.23401 322.439 6.01801 cv
321.924 5.91302 321.481 5.83701 321.111 5.79401 cv
320.659 5.74301 320.174 5.72101 319.658 5.72501 cv
319.114 5.733 318.551 5.77103 317.967 5.83701 cv
317.366 5.90701 316.836 5.99802 316.375 6.11102 cv
315.39 6.35202 314.445 6.72501 313.543 7.22501 cv
311.459 8.37802 309.884 9.84003 308.812 11.613 cv
308.199 11.613 li
309.668 9.45401 311.511 7.77103 313.728 6.561 cv
311.22 7.36102 308.97 8.526 306.984 10.061 cv
305.05 11.553 303.49 13.292 302.31 15.276 cv
303.14 14.891 304.109 14.607 305.22 14.421 cv
305.213 14.625 li
304.939 14.678 304.486 14.788 303.86 14.954 cv
303.231 15.118 302.582 15.377 301.918 15.731 cv
302.167 17.594 302.675 19.456 303.439 21.317 cv
302.594 22.178 301.902 23.167 301.359 24.283 cv
300.839 25.354 300.459 26.479 300.215 27.655 cv
299.973 28.826 299.91 30.03 300.033 31.259 cv
300.154 32.492 300.448 33.704 300.917 34.903 cv
301.386 36.1 301.988 37.189 302.725 38.173 cv
303.465 39.157 304.376 40.015 305.462 40.749 cv
306.547 41.487 307.776 42.063 309.152 42.478 cv
310.528 42.893 312.02 43.076 313.628 43.029 cv
313.72 43.089 313.816 43.15 313.91 43.209 cv
313.842 43.209 li
311.17 43.517 308.652 43.031 306.285 41.75 cv
309.92 44.777 314.111 46.403 318.855 46.618 cv
318.086 46.173 317.27 45.442 316.404 44.425 cv
316.611 44.492 316.82 44.558 317.039 44.618 cv
317.047 44.621 317.056 44.623 317.066 44.628 cv
317.642 45.429 318.426 46.108 319.411 46.661 cv
319.459 46.689 319.509 46.717 319.559 46.744 cv
319.609 46.717 319.662 46.692 319.713 46.664 cv
320.672 46.156 321.454 45.479 322.06 44.631 cv
322.281 44.571 322.498 44.503 322.715 44.43 cv
321.81 45.512 320.996 46.249 320.269 46.641 cv
324.998 46.448 329.189 44.82 332.84 41.75 cv
330.377 43.072 327.853 43.57 325.272 43.244 cv
325.358 43.187 325.443 43.129 325.527 43.072 cv
327.179 43.112 328.693 42.925 330.07 42.51 cv
331.445 42.095 332.676 41.519 333.762 40.782 cv
334.847 40.047 335.758 39.187 336.498 38.205 cv
337.234 37.222 337.836 36.133 338.306 34.935 cv
338.773 33.738 339.068 32.525 339.189 31.291 cv
339.31 30.062 339.25 28.86 339.008 27.687 cv
338.763 26.512 338.384 25.388 337.863 24.315 cv
324.9 32.776 mo
324.902 32.847 324.877 32.889 324.824 32.903 cv
324.75 32.922 324.666 32.93 324.573 32.924 cv
324.527 32.917 324.492 32.885 324.472 32.826 cv
324.463 32.638 324.5 32.454 324.578 32.278 cv
324.715 32.213 324.804 32.236 324.849 32.348 cv
324.898 32.492 324.916 32.635 324.9 32.776 cv
325.322 33.655 mo
325.207 33.297 325.119 32.879 325.056 32.405 cv
325.064 32.213 325.156 32.119 325.343 32.127 cv
325.435 31.901 li
323.912 31.951 li
323.914 31.977 323.914 32.009 323.914 32.047 cv
323.916 32.076 323.924 32.097 323.939 32.11 cv
323.967 32.137 324.008 32.15 324.062 32.145 cv
324.11 32.143 324.142 32.162 324.163 32.205 cv
324.183 32.245 324.188 32.293 324.177 32.354 cv
323.869 33.612 li
323.863 33.634 323.861 33.655 323.853 33.674 cv
323.767 33.664 li
323.711 33.649 323.676 33.614 323.668 33.564 cv
323.693 32.256 li
323.69 32.145 323.74 32.069 323.843 32.03 cv
323.843 31.903 li
323.215 31.928 li
323.197 32.079 li
323.275 32.084 323.326 32.135 323.347 32.231 cv
323.347 33.564 li
323.341 33.709 323.269 33.787 323.138 33.8 cv
323.248 33.966 li
323.665 33.91 li
323.703 33.989 li
324.201 33.963 li
324.343 33.385 li
324.384 33.114 324.584 33.013 324.937 33.083 cv
325.199 34.039 li
325.531 33.989 li
325.572 33.823 li
325.449 33.843 325.363 33.787 325.322 33.655 cv
317.484 39.828 mo
317.494 39.768 317.486 39.685 317.461 39.579 cv
317.439 39.492 317.439 39.423 317.459 39.375 cv
315.799 39.375 li
315.818 39.413 315.818 39.484 315.801 39.587 cv
315.783 39.688 315.791 39.768 315.824 39.828 cv
316 39.828 li
316.008 39.753 316.035 39.688 316.086 39.635 cv
316.14 39.589 316.176 39.559 316.193 39.539 cv
316.207 39.536 316.239 39.539 316.289 39.546 cv
316.347 39.554 316.392 39.564 316.427 39.576 cv
316.453 41.137 li
316.435 41.283 316.342 41.366 316.176 41.388 cv
316.176 41.464 li
316.98 41.464 li
316.978 41.431 316.984 41.388 317.002 41.34 cv
317.019 41.283 317.031 41.24 317.031 41.212 cv
316.935 41.182 316.868 41.134 316.83 41.069 cv
316.83 39.605 li
316.998 39.572 317.122 39.572 317.203 39.602 cv
317.288 39.635 317.33 39.701 317.334 39.803 cv
cp
322.777 40.095 mo
322.626 39.793 li
322.474 40.095 li
322.174 40.095 li
322.324 40.347 li
322.199 40.598 li
322.474 40.598 li
322.626 40.875 li
322.777 40.598 li
323.079 40.623 li
322.927 40.347 li
323.079 40.095 li
cp
311.537 30.263 mo
311.545 30.328 311.597 30.421 311.703 30.547 cv
311.514 30.776 311.454 31.008 311.521 31.244 cv
311.55 31.348 311.602 31.436 311.68 31.5 cv
311.759 31.571 311.854 31.612 311.965 31.621 cv
312.08 31.634 312.181 31.629 312.267 31.61 cv
312.443 31.569 312.574 31.506 312.662 31.425 cv
312.687 31.401 312.707 31.375 312.724 31.35 cv
312.734 31.33 312.742 31.32 312.742 31.32 cv
312.744 31.521 li
312.97 31.546 li
312.946 30.665 li
312.619 30.715 li
312.624 30.756 312.613 30.811 312.592 30.879 cv
312.56 30.965 312.543 31.012 312.543 31.023 cv
312.543 31.023 312.568 31.02 312.617 31.016 cv
312.629 31.018 312.634 31.026 312.629 31.035 cv
312.629 31.069 li
312.603 31.174 312.558 31.252 312.493 31.297 cv
312.447 31.332 312.37 31.34 312.267 31.327 cv
312.178 31.315 312.103 31.272 312.041 31.2 cv
311.967 31.116 311.92 31.002 311.894 30.862 cv
311.889 30.741 311.952 30.67 312.08 30.651 cv
312.189 30.635 312.335 30.656 312.518 30.711 cv
312.48 30.338 li
312.468 30.381 312.429 30.424 312.367 30.464 cv
312.242 30.467 312.156 30.461 312.115 30.45 cv
311.957 30.362 311.907 30.241 311.965 30.086 cv
312.043 29.853 312.148 29.73 312.281 29.722 cv
312.352 29.717 312.427 29.744 312.504 29.807 cv
312.563 29.858 312.606 29.923 312.632 30.008 cv
312.518 30.036 li
312.504 30.059 312.513 30.102 312.546 30.167 cv
312.581 30.241 312.593 30.295 312.584 30.336 cv
312.895 30.414 li
312.996 29.634 li
312.845 29.634 li
312.694 29.76 li
312.466 29.549 312.231 29.478 311.992 29.545 cv
311.882 29.576 311.791 29.631 311.713 29.709 cv
311.638 29.789 311.585 29.883 311.56 29.987 cv
cp
312.508 32.739 mo
312.51 32.807 312.486 32.85 312.433 32.865 cv
312.357 32.885 312.274 32.892 312.181 32.885 cv
312.136 32.879 312.1 32.847 312.08 32.789 cv
312.07 32.6 312.108 32.416 312.186 32.239 cv
312.322 32.172 312.412 32.198 312.458 32.311 cv
312.506 32.451 312.523 32.595 312.508 32.739 cv
312.964 33.637 mo
312.845 33.28 312.75 32.862 312.684 32.387 cv
312.689 32.196 312.79 32.102 312.986 32.11 cv
313.087 31.883 li
311.426 31.934 li
311.429 32.009 311.447 32.062 311.482 32.092 cv
311.511 32.119 311.562 32.132 311.631 32.127 cv
311.68 32.125 311.718 32.145 311.738 32.188 cv
311.761 32.228 311.763 32.276 311.754 32.336 cv
311.426 33.594 li
311.401 33.735 311.326 33.828 311.2 33.871 cv
311.25 33.971 li
311.779 33.946 li
311.929 33.367 li
311.972 33.096 312.183 32.995 312.558 33.066 cv
312.836 34.022 li
313.187 33.971 li
313.23 33.805 li
313.097 33.826 313.009 33.77 312.964 33.637 cv
301.452 17.598 mo
301.676 18.655 302.028 19.89 302.509 21.311 cv
301.286 22.6 300.282 24.51 299.495 27.045 cv
299.42 23.612 300.071 20.464 301.452 17.598 cv
303.035 21.311 mo
302.7 20.325 302.433 19.48 302.237 18.773 cv
301.988 17.87 301.804 17.04 301.691 16.285 cv
301.14 17.294 300.695 18.247 300.35 19.148 cv
299.927 20.261 299.631 21.36 299.46 22.452 cv
299.256 23.753 299.145 24.944 299.128 26.034 cv
299.102 27.395 299.218 28.729 299.469 30.032 cv
299.581 28.444 299.935 26.922 300.539 25.468 cv
301.125 24.044 301.958 22.661 303.035 21.311 cv
320.057 38.654 mo
320.088 38.756 320.14 38.845 320.217 38.91 cv
320.297 38.981 320.392 39.021 320.503 39.031 cv
320.619 39.043 320.718 39.038 320.804 39.018 cv
320.98 38.978 321.111 38.917 321.197 38.834 cv
321.222 38.81 321.245 38.784 321.259 38.759 cv
321.273 38.742 321.277 38.729 321.28 38.729 cv
321.283 38.93 li
321.509 38.955 li
321.484 38.075 li
321.157 38.125 li
321.16 38.165 321.152 38.221 321.127 38.288 cv
321.096 38.374 321.082 38.422 321.079 38.432 cv
321.079 38.432 321.103 38.43 321.154 38.424 cv
321.164 38.427 321.17 38.435 321.167 38.445 cv
321.164 38.452 321.164 38.462 321.167 38.477 cv
321.139 38.583 321.093 38.661 321.031 38.706 cv
320.983 38.742 320.908 38.749 320.802 38.737 cv
320.717 38.724 320.64 38.681 320.576 38.608 cv
320.503 38.525 320.455 38.414 320.432 38.271 cv
320.426 38.151 320.488 38.079 320.619 38.062 cv
320.724 38.044 320.87 38.065 321.056 38.12 cv
321.018 37.747 li
321.004 37.79 320.966 37.833 320.906 37.873 cv
320.777 37.876 320.694 37.871 320.654 37.861 cv
320.493 37.771 320.443 37.65 320.503 37.496 cv
320.581 37.262 320.686 37.139 320.817 37.131 cv
320.89 37.126 320.963 37.157 321.041 37.219 cv
321.099 37.267 321.142 37.332 321.17 37.42 cv
321.056 37.446 li
321.041 37.468 321.049 37.511 321.082 37.576 cv
321.117 37.65 321.129 37.705 321.119 37.745 cv
321.433 37.824 li
321.534 37.043 li
321.383 37.043 li
321.232 37.169 li
321.004 36.957 320.769 36.887 320.528 36.955 cv
320.42 36.986 320.326 37.04 320.252 37.118 cv
320.174 37.2 320.123 37.292 320.097 37.396 cv
320.075 37.672 li
320.08 37.738 320.135 37.83 320.238 37.956 cv
320.052 38.188 319.992 38.417 320.057 38.654 cv
321.353 40.301 mo
321.295 40.271 321.192 40.241 321.047 40.208 cv
320.881 40.173 320.759 40.138 320.676 40.105 cv
320.593 40.05 320.543 39.977 320.525 39.886 cv
320.51 39.803 320.525 39.725 320.568 39.658 cv
320.616 39.584 320.679 39.546 320.761 39.539 cv
320.855 39.529 320.953 39.57 321.054 39.653 cv
321.001 39.828 li
321.256 39.828 li
321.406 39.326 li
321.129 39.35 li
321.086 39.413 li
320.881 39.368 320.709 39.345 320.581 39.353 cv
320.45 39.358 320.34 39.415 320.246 39.524 cv
320.156 39.635 320.115 39.768 320.131 39.932 cv
320.142 40.095 320.273 40.221 320.523 40.309 cv
320.771 40.397 320.941 40.51 321.029 40.644 cv
321.114 40.775 321.122 40.89 321.054 40.986 cv
320.852 41.099 320.651 41.091 320.45 40.96 cv
320.426 40.81 li
320.249 40.684 li
320.072 41.338 li
320.5 41.388 li
320.48 41.356 320.48 41.33 320.5 41.31 cv
321.09 41.426 321.431 41.327 321.529 41.013 cv
321.566 40.805 321.57 40.641 321.537 40.526 cv
321.507 40.425 321.446 40.352 321.353 40.301 cv
309.842 29.846 mo
310.37 31.532 li
310.672 31.606 li
310.722 31.532 li
310.571 31.38 li
311.2 29.821 li
311.293 29.719 311.419 29.652 311.578 29.619 cv
311.602 29.535 li
310.946 29.532 li
311.023 29.644 li
310.547 30.826 li
310.169 29.569 li
309.59 29.569 li
309.59 29.719 li
309.718 29.701 309.804 29.744 309.842 29.846 cv
311.253 32.153 mo
311.23 32.065 311.23 31.996 311.253 31.949 cv
309.593 31.949 li
309.61 31.987 309.613 32.057 309.595 32.16 cv
309.578 32.26 309.585 32.341 309.617 32.402 cv
309.794 32.402 li
309.801 32.326 309.829 32.26 309.877 32.207 cv
309.931 32.162 309.97 32.129 309.985 32.112 cv
309.998 32.11 310.03 32.112 310.084 32.117 cv
310.138 32.127 310.186 32.137 310.221 32.15 cv
310.246 33.709 li
310.226 33.856 310.134 33.939 309.97 33.961 cv
309.97 34.037 li
310.775 34.037 li
310.769 34.004 310.777 33.961 310.793 33.913 cv
310.812 33.856 310.822 33.813 310.825 33.785 cv
310.726 33.755 310.659 33.707 310.624 33.642 cv
310.624 32.178 li
310.79 32.145 310.916 32.145 310.996 32.175 cv
311.08 32.207 311.122 32.274 311.127 32.376 cv
311.278 32.402 li
311.285 32.341 311.278 32.258 311.253 32.153 cv
325.572 34.764 mo
325.572 34.533 li
329.642 38.502 mo
333.338 29.916 mo
333.343 29.916 li
333.931 12.202 mo
333.933 13.895 li
310.762 16.098 mo
310.783 16.061 310.795 16.031 310.807 16.003 cv
310.807 16.024 310.802 16.056 310.793 16.104 cv
310.793 16.106 310.793 16.112 310.79 16.114 cv
310.78 16.169 310.775 16.215 310.777 16.255 cv
310.78 16.386 310.85 16.547 310.986 16.738 cv
310.873 16.745 310.758 16.738 310.641 16.721 cv
310.592 16.567 310.593 16.427 310.649 16.3 cv
310.695 16.222 310.734 16.157 310.762 16.098 cv
310.873 15.268 mo
310.84 15.173 310.812 15.1 310.795 15.05 cv
310.726 14.848 310.758 14.673 310.888 14.526 cv
310.812 14.723 310.857 14.946 311.023 15.204 cv
311.072 15.276 311.092 15.352 311.084 15.432 cv
311.082 15.477 311.062 15.528 311.023 15.583 cv
311.004 15.616 310.973 15.664 310.938 15.727 cv
310.928 15.747 310.924 15.774 310.926 15.807 cv
310.926 15.815 310.928 15.822 310.928 15.83 cv
310.935 15.872 310.933 15.905 310.921 15.926 cv
310.914 15.888 310.9 15.85 310.881 15.812 cv
310.855 15.757 310.84 15.727 310.838 15.721 cv
310.815 15.653 310.825 15.568 310.873 15.46 cv
310.896 15.409 310.896 15.346 310.873 15.268 cv
310.211 15.667 mo
310.209 15.688 310.207 15.709 310.204 15.727 cv
310.204 15.76 310.211 15.8 310.228 15.845 cv
310.236 15.862 310.252 15.893 310.282 15.938 cv
310.306 15.981 310.327 16.018 310.338 16.056 cv
310.39 16.218 310.402 16.427 310.37 16.685 cv
310.32 16.675 310.271 16.657 310.228 16.636 cv
310.183 16.604 310.143 16.582 310.115 16.564 cv
310.091 16.516 310.08 16.464 310.084 16.411 cv
310.088 16.356 310.103 16.31 310.131 16.272 cv
310.156 16.235 310.158 16.173 310.131 16.087 cv
310.105 16.001 310.091 15.95 310.088 15.932 cv
310.073 15.817 310.097 15.723 310.161 15.653 cv
310.214 15.596 310.25 15.551 310.261 15.52 cv
310.239 15.575 310.221 15.626 310.211 15.667 cv
311.377 15.757 mo
311.377 15.76 311.379 15.763 311.381 15.764 cv
311.439 15.87 311.447 15.958 311.401 16.034 cv
311.396 16.044 311.394 16.054 311.391 16.063 cv
311.371 16.124 311.374 16.187 311.396 16.25 cv
311.429 16.35 311.514 16.454 311.652 16.561 cv
311.58 16.61 311.5 16.647 311.409 16.668 cv
311.374 16.678 311.338 16.682 311.301 16.688 cv
311.232 16.537 311.2 16.406 311.2 16.3 cv
311.203 16.222 311.222 16.147 311.26 16.074 cv
311.313 15.971 311.343 15.915 311.345 15.903 cv
311.359 15.86 311.361 15.817 311.353 15.769 cv
311.345 15.742 311.338 15.712 311.326 15.681 cv
311.343 15.706 311.361 15.731 311.377 15.757 cv
311.967 13.677 mo
311.96 13.72 311.945 13.779 311.925 13.857 cv
311.894 13.993 311.912 14.098 311.98 14.177 cv
312.105 14.323 312.012 14.572 311.703 14.927 cv
311.66 14.896 311.65 14.844 311.67 14.768 cv
311.801 14.667 311.84 14.552 311.779 14.424 cv
311.698 14.253 311.693 14.089 311.761 13.928 cv
311.771 13.897 311.808 13.827 311.867 13.717 cv
311.917 13.624 311.952 13.543 311.972 13.472 cv
311.982 13.536 311.98 13.603 311.967 13.677 cv
311.074 13.643 mo
311.016 13.432 311.006 13.208 311.041 12.97 cv
311.08 12.716 311.157 12.547 311.275 12.462 cv
311.157 12.85 311.2 13.239 311.401 13.618 cv
311.451 13.699 311.482 13.784 311.484 13.872 cv
311.49 13.958 311.468 14.023 311.426 14.071 cv
311.248 14.258 311.15 14.512 311.134 14.831 cv
311.062 14.756 311.019 14.706 311.006 14.678 cv
310.996 14.642 311.016 14.561 311.069 14.441 cv
311.15 14.272 li
311.168 14.177 311.17 14.079 311.154 13.981 cv
311.147 13.925 311.119 13.815 311.074 13.643 cv
309.479 13.897 mo
309.564 13.766 309.61 13.651 309.613 13.555 cv
309.634 13.362 309.61 13.185 309.537 13.027 cv
309.776 13.311 309.859 13.571 309.789 13.807 cv
309.736 13.985 309.769 14.119 309.889 14.21 cv
310.008 14.296 310.088 14.374 310.134 14.441 cv
310.189 14.524 310.209 14.614 310.191 14.713 cv
310.166 15.014 li
310.111 14.995 310.073 14.964 310.055 14.922 cv
310.038 14.887 310.035 14.833 310.041 14.763 cv
310.048 14.688 310.033 14.635 309.995 14.602 cv
309.957 14.572 309.914 14.575 309.864 14.612 cv
309.797 14.665 309.759 14.718 309.752 14.77 cv
309.748 14.819 309.769 14.884 309.814 14.964 cv
309.939 15.14 li
309.935 15.319 309.918 15.42 309.889 15.442 cv
309.783 15.284 309.701 15.126 309.638 14.964 cv
309.61 14.879 309.607 14.773 309.631 14.645 cv
309.642 14.582 309.642 14.534 309.633 14.497 cv
309.621 14.462 309.593 14.416 309.55 14.366 cv
309.482 14.288 309.444 14.207 309.431 14.122 cv
309.419 14.038 309.433 13.964 309.479 13.897 cv
310.375 12.768 mo
310.475 12.61 310.521 12.479 310.51 12.376 cv
310.574 12.507 310.56 12.741 310.475 13.08 cv
310.458 13.15 310.461 13.246 310.486 13.367 cv
310.513 13.487 310.533 13.628 310.541 13.792 cv
310.549 13.956 310.553 14.175 310.558 14.444 cv
310.553 14.464 310.56 14.486 310.578 14.514 cv
310.606 14.55 310.624 14.572 310.636 14.59 cv
310.681 14.647 310.67 14.69 310.599 14.713 cv
310.488 14.628 310.423 14.514 310.408 14.374 cv
310.402 14.348 310.4 14.29 310.398 14.2 cv
310.394 14.127 310.39 14.071 310.377 14.028 cv
310.338 13.862 310.236 13.737 310.07 13.643 cv
310.084 13.606 310.091 13.528 310.097 13.412 cv
310.103 13.304 310.121 13.216 310.148 13.143 cv
310.169 13.095 310.201 13.032 310.25 12.96 cv
310.274 12.917 310.317 12.853 310.375 12.768 cv
309.404 7.05002 mo
309.422 7.00201 309.419 6.95602 309.398 6.91602 cv
309.107 6.21201 308.755 5.52002 308.347 4.84302 cv
308.32 4.80701 308.287 4.78802 308.244 4.77802 cv
308.053 4.77802 li
307.94 4.76401 307.918 4.694 307.99 4.569 cv
308.259 4.38 308.551 4.22601 308.861 4.10303 cv
308.931 4.09802 308.981 4.11301 309.011 4.14902 cv
309.039 4.181 309.039 4.22302 309.013 4.28003 cv
308.992 4.32501 308.961 4.38303 308.924 4.45001 cv
308.898 4.50302 308.896 4.54901 308.908 4.58902 cv
309.177 5.19501 309.527 5.87402 309.963 6.63 cv
309.995 6.67502 310.012 6.70001 310.02 6.70203 cv
310.045 6.72501 310.076 6.73203 310.111 6.72501 cv
310.236 6.69202 310.317 6.70801 310.344 6.76401 cv
310.373 6.81702 310.349 6.88602 310.277 6.966 cv
310.015 7.14502 309.723 7.28802 309.401 7.39102 cv
309.351 7.384 309.316 7.36102 309.296 7.32602 cv
309.273 7.28601 309.278 7.24103 309.313 7.19202 cv
309.404 7.05002 li
309.532 3.927 mo
309.487 3.87003 309.487 3.81601 309.532 3.76602 cv
309.872 3.58301 310.181 3.45203 310.463 3.37402 cv
310.601 3.36801 310.656 3.427 310.629 3.55002 cv
310.496 3.62003 310.44 3.71402 310.463 3.82703 cv
310.571 4.23703 310.705 4.62201 310.855 4.98602 cv
310.865 5.009 310.873 5.02902 310.883 5.052 cv
310.991 5.30502 311.112 5.55301 311.243 5.78403 cv
311.291 5.87003 311.374 5.93002 311.494 5.966 cv
311.685 6.02502 311.886 6.01501 312.097 5.94 cv
312.302 5.867 312.461 5.74902 312.576 5.58801 cv
312.638 5.40903 312.649 5.23001 312.611 5.052 cv
312.606 5.03601 312.603 5.02402 312.601 5.009 cv
312.599 5.00101 312.595 4.99402 312.593 4.98602 cv
312.405 4.40302 312.181 3.83102 311.922 3.27301 cv
311.907 3.22702 311.875 3.19501 311.822 3.173 cv
311.765 3.15503 311.698 3.15201 311.615 3.16702 cv
311.572 3.14502 311.55 3.13 311.545 3.12201 cv
311.521 3.09601 311.521 3.056 311.545 3.00101 cv
311.741 2.84601 312 2.742 312.324 2.68903 cv
312.42 2.70203 312.466 2.73502 312.461 2.79602 cv
312.451 2.841 312.443 2.86603 312.437 2.87302 cv
312.429 2.884 312.392 2.91602 312.324 2.97101 cv
312.257 3.026 312.239 3.09903 312.274 3.18402 cv
312.903 4.80701 li
312.926 4.86801 312.943 4.92902 312.956 4.98602 cv
312.959 5.009 312.964 5.02902 312.967 5.052 cv
312.986 5.18002 312.981 5.311 312.953 5.436 cv
312.926 5.55902 312.9 5.64502 312.875 5.69 cv
312.843 5.75403 312.78 5.82901 312.687 5.91501 cv
312.563 6.03003 312.443 6.11801 312.33 6.181 cv
312.201 6.24902 312.058 6.302 311.896 6.33301 cv
311.62 6.388 311.377 6.38303 311.168 6.31702 cv
310.89 6.18802 310.699 6.005 310.589 5.76401 cv
309.9 4.05701 li
309.869 3.98703 309.832 3.95203 309.783 3.95203 cv
309.683 3.96802 309.597 3.96002 309.532 3.927 cv
314.812 2.11603 mo
314.91 2.005 315.006 1.99503 315.099 2.08102 cv
315.185 2.16101 315.291 2.34601 315.416 2.63901 cv
315.424 2.74503 315.396 2.80301 315.338 2.81302 cv
315.275 2.82303 315.187 2.78003 315.069 2.68402 cv
314.926 2.56302 314.801 2.49503 314.694 2.47702 cv
314.274 2.43802 314.017 2.54901 313.925 2.80502 cv
313.829 3.13901 314.037 3.36102 314.556 3.47 cv
315.187 3.60501 li
315.507 3.66803 315.713 3.83902 315.803 4.121 cv
315.917 4.43002 315.896 4.68903 315.738 4.89801 cv
315.65 5.069 315.494 5.20801 315.27 5.31302 cv
314.996 5.43903 314.648 5.49701 314.231 5.48703 cv
314.012 5.46402 313.869 5.41702 313.801 5.33701 cv
313.73 5.25302 313.676 5.15701 313.634 5.052 cv
313.628 5.02902 313.62 5.009 313.615 4.98602 cv
313.585 4.89102 313.57 4.78201 313.564 4.66702 cv
313.634 4.55502 313.716 4.54102 313.811 4.61603 cv
314.097 4.89301 li
314.224 5.022 314.357 5.09302 314.496 5.11203 cv
314.752 5.15701 314.961 5.11002 315.122 4.966 cv
315.296 4.755 315.348 4.58701 315.281 4.45801 cv
315.235 4.37201 315.165 4.298 315.069 4.229 cv
314.968 4.15903 314.865 4.11301 314.758 4.09601 cv
313.934 3.897 li
313.72 3.83102 313.564 3.72803 313.467 3.591 cv
313.283 3.32602 313.256 3.052 313.386 2.77002 cv
313.562 2.40302 313.875 2.19803 314.32 2.15903 cv
314.606 2.14301 314.769 2.12802 314.812 2.11603 cv
318.297 2.03003 mo
318.158 1.97 318.002 1.95801 317.836 1.99002 cv
317.76 2.00302 317.725 2.065 317.73 2.17401 cv
317.765 2.97601 317.826 3.763 317.909 4.53802 cv
318.158 4.64902 li
318.188 4.67502 318.206 4.70001 318.214 4.72702 cv
318.218 4.75803 318.209 4.77802 318.181 4.79602 cv
318.065 4.86301 317.899 4.90903 317.685 4.93002 cv
317.482 4.95102 317.288 4.94803 317.101 4.92102 cv
317.006 4.858 316.988 4.798 317.044 4.73703 cv
317.232 4.61203 li
317.267 4.57703 317.283 4.53101 317.28 4.47302 cv
317.144 2.18301 li
317.109 2.09802 317.064 2.05701 317.006 2.06302 cv
316.875 2.05402 316.764 2.06302 316.67 2.09302 cv
316.506 2.15903 316.404 2.30002 316.367 2.513 cv
316.279 2.67502 316.185 2.707 316.093 2.61603 cv
316.041 2.40002 316.048 2.15302 316.115 1.87701 cv
316.129 1.82703 316.15 1.79401 316.185 1.77002 cv
316.217 1.75101 316.249 1.74902 316.287 1.76102 cv
316.836 1.746 317.203 1.733 317.388 1.72302 cv
317.799 1.703 318.161 1.66803 318.475 1.62302 cv
318.539 1.61203 318.581 1.61502 318.609 1.62802 cv
318.641 1.64001 318.669 1.67603 318.691 1.73102 cv
318.795 1.98502 318.83 2.21701 318.8 2.42502 cv
318.767 2.48801 318.712 2.513 318.634 2.50101 cv
318.581 2.44202 318.52 2.345 318.453 2.21201 cv
318.4 2.11002 318.349 2.05002 318.297 2.03003 cv
319.542 2.022 mo
319.535 1.979 319.517 1.944 319.484 1.91501 cv
319.318 1.82401 li
319.224 1.75702 319.24 1.68503 319.361 1.608 cv
319.687 1.57501 320.015 1.58002 320.342 1.62302 cv
320.407 1.65002 320.445 1.68802 320.453 1.733 cv
320.463 1.776 320.443 1.81601 320.392 1.84802 cv
320.351 1.88 320.297 1.91501 320.231 1.95801 cv
320.185 1.99301 320.16 2.03003 320.153 2.07101 cv
320.1 2.73502 320.086 3.50201 320.105 4.375 cv
320.113 4.43002 320.118 4.46402 320.123 4.46802 cv
320.133 4.50101 320.156 4.52002 320.191 4.53101 cv
320.316 4.56601 320.38 4.61603 320.377 4.68201 cv
320.375 4.74301 320.324 4.79001 320.22 4.82501 cv
319.909 4.85501 319.585 4.83801 319.256 4.77502 cv
319.215 4.74301 319.195 4.707 319.195 4.66702 cv
319.195 4.61902 319.22 4.58401 319.273 4.55801 cv
319.422 4.47501 li
319.457 4.44 319.476 4.40002 319.478 4.354 cv
319.556 3.595 319.577 2.815 319.542 2.022 cv
325.121 2.591 mo
325.068 2.61603 325.036 2.64902 325.023 2.686 cv
324.845 3.32901 324.681 4.078 324.535 4.94101 cv
324.533 4.99701 324.533 5.026 324.533 5.03403 cv
324.538 5.06702 324.555 5.09302 324.591 5.11002 cv
324.707 5.16702 324.757 5.22702 324.742 5.29102 cv
324.728 5.35101 324.672 5.38702 324.562 5.40402 cv
324.252 5.37402 323.937 5.29602 323.623 5.17102 cv
323.59 5.13 323.577 5.09302 323.584 5.052 cv
323.594 5.00403 323.625 4.97302 323.682 4.95901 cv
323.843 4.90601 li
323.886 4.88101 323.914 4.84601 323.924 4.80002 cv
324.145 4.06802 324.314 3.30801 324.432 2.52002 cv
324.432 2.47702 324.42 2.44 324.394 2.40503 cv
324.249 2.28403 li
324.168 2.20203 324.199 2.134 324.332 2.08102 cv
324.658 2.11002 324.978 2.17902 325.293 2.28201 cv
325.35 2.32202 325.379 2.36502 325.381 2.41302 cv
325.381 2.45602 325.353 2.49103 325.298 2.513 cv
325.252 2.53601 325.191 2.561 325.121 2.591 cv
323.411 1.85602 mo
323.474 1.85901 323.516 1.86902 323.539 1.88702 cv
323.569 1.90701 323.592 1.94702 323.601 2.005 cv
323.655 2.27402 323.644 2.509 323.577 2.707 cv
323.531 2.76001 323.471 2.77402 323.398 2.75 cv
323.358 2.68201 323.318 2.57602 323.275 2.43002 cv
323.245 2.32202 323.205 2.25201 323.16 2.22101 cv
323.033 2.138 322.884 2.09601 322.715 2.09601 cv
322.638 2.09302 322.593 2.14801 322.576 2.25702 cv
322.531 2.56302 322.488 2.87003 322.45 3.173 cv
322.437 3.28601 322.422 3.39603 322.41 3.50702 cv
322.367 3.87402 322.332 4.24103 322.301 4.60901 cv
322.523 4.76401 li
322.549 4.79602 322.56 4.82303 322.563 4.85202 cv
322.563 4.88101 322.549 4.901 322.517 4.91101 cv
322.389 4.95602 322.218 4.96902 322.005 4.95102 cv
321.803 4.93301 321.612 4.89301 321.436 4.828 cv
321.355 4.75 321.347 4.686 321.414 4.63901 cv
321.625 4.552 li
321.662 4.52301 321.687 4.483 321.695 4.423 cv
321.997 2.15302 li
321.982 2.06302 321.944 2.013 321.886 2.01102 cv
321.76 1.97501 321.647 1.96201 321.549 1.97501 cv
321.379 2.00803 321.252 2.12601 321.175 2.32901 cv
321.056 2.46802 320.961 2.483 320.884 2.37802 cv
320.875 2.15302 320.93 1.91501 321.049 1.65503 cv
321.068 1.61002 321.099 1.58002 321.136 1.56702 cv
321.172 1.552 321.205 1.55502 321.238 1.57501 cv
321.781 1.66501 322.142 1.72302 322.326 1.74902 cv
322.732 1.806 323.093 1.84201 323.411 1.85602 cv
326.185 4.50101 mo
326.955 3.57501 li
326.983 3.552 327.006 3.55902 327.023 3.595 cv
327.099 4.798 li
cp
328.005 6.17401 mo
327.939 6.13602 327.896 6.11102 327.881 6.09402 cv
327.834 6.04602 327.796 5.97501 327.767 5.88 cv
327.718 5.45401 327.657 4.858 327.59 4.09302 cv
327.519 3.32901 327.467 2.92603 327.428 2.88602 cv
327.388 2.83801 327.322 2.80902 327.24 2.80002 cv
327.149 2.78802 327.099 2.80902 327.086 2.87003 cv
327.064 2.92603 326.757 3.315 326.168 4.04001 cv
325.874 4.40302 325.582 4.76102 325.293 5.11203 cv
325.146 5.173 325.001 5.22101 324.855 5.25101 cv
324.787 5.311 324.792 5.37402 324.87 5.44202 cv
325.013 5.51401 325.167 5.57303 325.322 5.61801 cv
325.326 5.62003 325.328 5.62003 325.33 5.62003 cv
325.355 5.62802 325.383 5.63602 325.411 5.64301 cv
325.545 5.67603 325.682 5.70102 325.826 5.716 cv
325.877 5.69302 325.901 5.66302 325.906 5.62003 cv
325.912 5.56702 325.874 5.513 325.789 5.45401 cv
325.789 5.45203 325.785 5.45203 325.785 5.45203 cv
325.74 5.41901 325.708 5.384 325.687 5.34601 cv
325.668 5.311 325.66 5.276 325.66 5.23801 cv
325.66 5.22501 325.662 5.21301 325.662 5.203 cv
325.679 5.09903 325.76 4.98602 325.904 4.86301 cv
326.078 4.82501 li
326.361 4.88602 326.717 5.00101 327.141 5.17102 cv
327.195 5.35602 327.199 5.55301 327.159 5.75702 cv
327.138 5.80402 327.106 5.83502 327.06 5.83902 cv
326.961 5.83502 326.892 5.83701 326.857 5.84903 cv
326.75 5.88 326.739 5.95001 326.824 6.061 cv
327.187 6.23703 327.551 6.35001 327.922 6.39502 cv
327.986 6.388 328.029 6.36203 328.047 6.319 cv
328.064 6.27701 328.052 6.22702 328.005 6.17401 cv
325.904 4.86301 mo
325.949 4.79303 326.009 4.78003 326.078 4.82501 cv
336.009 33.961 mo
335.371 33.551 li
334.824 34.14 li
334.851 33.352 li
334.092 33.166 li
334.756 32.786 li
334.508 32.027 li
335.194 32.411 li
335.681 31.818 li
335.722 32.617 li
336.463 32.774 li
335.798 33.189 li
cp
336.789 32.711 mo
335.838 32.499 li
335.816 31.473 li
335.159 32.236 li
334.301 31.73 li
334.595 32.716 li
333.74 33.206 li
334.717 33.444 li
334.681 34.459 li
335.384 33.702 li
336.205 34.228 li
335.933 33.235 li
cp
304.464 33.332 mo
304.464 34.135 li
303.955 33.546 li
303.271 33.939 li
303.505 33.194 li
302.821 32.784 li
303.565 32.627 li
303.563 31.808 li
304.086 32.407 li
304.758 32.022 li
304.542 32.766 li
305.206 33.176 li
cp
304.684 32.688 mo
304.962 31.733 li
304.098 32.228 li
303.425 31.455 li
303.426 32.512 li
302.471 32.713 li
303.351 33.242 li
303.05 34.198 li
303.93 33.695 li
304.584 34.45 li
304.584 33.418 li
305.54 33.217 li
cp
319.874 10.026 mo
319.585 10.775 li
319.323 10.046 li
318.543 10.164 li
319.029 9.55502 li
318.539 8.92902 li
319.285 9.048 li
319.58 8.28201 li
319.851 9.02902 li
320.616 8.90903 li
320.148 9.52502 li
320.621 10.146 li
cp
320.308 9.505 mo
320.91 8.71201 li
319.926 8.86603 li
319.577 7.90503 li
319.199 8.89102 li
318.236 8.73502 li
318.867 9.54303 li
318.244 10.327 li
319.245 10.175 li
319.585 11.11 li
319.955 10.149 li
320.918 10.303 li
cp
334.268 40.955 mo
330.211 45.014 325.312 47.044 319.574 47.046 cv
319.451 47.046 319.328 47.044 319.205 47.044 cv
319.099 47.041 318.994 47.039 318.89 47.036 cv
313.444 46.878 308.775 44.853 304.879 40.955 cv
300.821 36.897 298.793 32.001 298.793 26.265 cv
298.793 20.527 300.821 15.629 304.879 11.571 cv
308.935 7.513 313.834 5.48502 319.574 5.48502 cv
325.312 5.48502 330.211 7.513 334.268 11.571 cv
338.326 15.629 340.356 20.527 340.353 26.265 cv
340.356 32.001 338.326 36.897 334.268 40.955 cv
334.384 11.455 mo
330.297 7.36401 325.358 5.319 319.574 5.319 cv
313.791 5.319 308.855 7.36401 304.765 11.455 cv
300.675 15.543 298.633 20.481 298.633 26.265 cv
298.633 32.047 300.675 36.983 304.765 41.072 cv
308.692 44.998 313.398 47.041 318.884 47.2 cv
318.991 47.202 319.096 47.205 319.203 47.207 cv
319.326 47.207 319.451 47.21 319.574 47.21 cv
325.358 47.21 330.297 45.162 334.384 41.072 cv
338.474 36.983 340.517 32.047 340.517 26.265 cv
340.517 20.481 338.474 15.543 334.384 11.455 cv
337.435 44.12 mo
332.502 49.054 326.548 51.522 319.574 51.525 cv
319.424 51.522 319.275 51.522 319.127 51.52 cv
318.998 51.517 318.871 51.515 318.744 51.512 cv
312.126 51.321 306.448 48.858 301.714 44.12 cv
296.781 39.19 294.316 33.237 294.318 26.265 cv
294.316 19.29 296.781 13.334 301.714 8.40302 cv
306.644 3.47 312.599 1.00403 319.574 1.00403 cv
326.548 1.00403 332.502 3.47 337.435 8.40302 cv
342.366 13.334 344.834 19.29 344.832 26.265 cv
344.834 33.237 342.366 39.19 337.435 44.12 cv
337.576 8.26001 mo
332.605 3.28802 326.605 .803009 319.574 .805023 cv
312.546 .803009 306.544 3.28802 301.57 8.26001 cv
296.6 13.233 294.117 19.233 294.117 26.265 cv
294.117 33.292 296.6 39.292 301.57 44.261 cv
306.343 49.039 312.068 51.52 318.736 51.713 cv
318.865 51.716 318.994 51.718 319.122 51.723 cv
319.273 51.723 319.424 51.723 319.574 51.726 cv
326.605 51.723 332.605 49.236 337.576 44.261 cv
342.547 39.292 345.033 33.292 345.033 26.265 cv
345.033 19.233 342.547 13.233 337.576 8.26001 cv
337.808 44.492 mo
332.774 49.53 326.693 52.05 319.574 52.05 cv
319.422 52.05 319.267 52.048 319.117 52.048 cv
318.986 52.045 318.855 52.043 318.726 52.037 cv
311.97 51.844 306.174 49.328 301.339 44.492 cv
296.305 39.458 293.79 33.383 293.79 26.265 cv
293.79 19.143 296.305 13.065 301.339 8.03003 cv
306.376 2.99402 312.453 .47702 319.574 .47702 cv
326.693 .47702 332.774 2.99402 337.808 8.03003 cv
342.843 13.065 345.359 19.143 345.359 26.265 cv
345.359 33.383 342.843 39.458 337.808 44.492 cv
338.144 7.69 mo
333.017 2.56302 326.827 0 319.572 0 cv
312.32 0 306.129 2.56302 301.002 7.69 cv
295.873 12.821 293.309 19.013 293.309 26.265 cv
293.309 33.516 295.873 39.705 301.002 44.832 cv
305.925 49.756 311.829 52.32 318.709 52.519 cv
318.843 52.521 318.973 52.524 319.107 52.526 cv
319.262 52.529 319.416 52.529 319.572 52.531 cv
326.827 52.529 333.017 49.962 338.144 44.832 cv
343.274 39.705 345.838 33.516 345.838 26.265 cv
345.838 19.013 343.274 12.821 338.144 7.69 cv
0 .2 .4 rgb
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
